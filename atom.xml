<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aotu.io「凹凸实验室」</title>
  <subtitle>凹凸实验室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aotu.io/"/>
  <updated>2016-04-07T06:05:44.000Z</updated>
  <id>http://aotu.io/</id>
  
  <author>
    <name>凹凸实验室</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node读写Excel文件探究实践</title>
    <link href="http://aotu.io/notes/2016/04/07/node-excel/"/>
    <id>http://aotu.io/notes/2016/04/07/node-excel/</id>
    <published>2016-04-06T18:32:18.000Z</published>
    <updated>2016-04-07T06:05:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的依赖库来处理 Excel 文件，深入分析对比常见npm库处理Excel 文件存在的优缺点，主要阐述用js-xlsx、excel-export 库来处理 Excel 文件。 &lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有哪些外部模块支持读写Excel&lt;/li&gt;
&lt;li&gt;引入依赖模块&lt;/li&gt;
&lt;li&gt;编写业务逻辑函数&lt;/li&gt;
&lt;li&gt;实践应用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;支持读写Excel的node-js模块&quot;&gt;&lt;a href=&quot;#支持读写Excel的node-js模块&quot; class=&quot;headerlink&quot; title=&quot;支持读写Excel的node.js模块&quot;&gt;&lt;/a&gt;支持读写Excel的node.js模块&lt;/h2&gt;&lt;p&gt;通过npm搜索，支持读写excel文件的模块有很多，但是都各有忧缺点，有些仅支持xls/xlsx的一种格式，有些仅支持读取数据，有些仅支持导出文件，有些需要依赖python解析。常见的npm依赖模块如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SheetJS/js-xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js-xlsx&lt;/a&gt;: 目前 Github 上 star 数量最多的处理 Excel 的库，支持解析多种格式表格XLSX / XLSM / XLSB / XLS / CSV，解析采用纯js实现，写入需要依赖nodejs或者&lt;a href=&quot;https://github.com/eligrey/FileSaver.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileSaver&lt;/a&gt;.js实现生成写入Excel，可以生成子表Excel，功能强大，但上手难度稍大。不提供基础设置Excel表格api例单元格宽度，文档有些乱，不适合快速上手；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgcrea/node-xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-xlsx&lt;/a&gt;: 基于Node.js解析excel文件数据及生成excel文件，仅支持xlsx格式文件；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leftshifters/excel-parser&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;excel-parser&lt;/a&gt;: 基于Node.js解析excel文件数据，支持xls及xlsx格式文件，需要依赖python，太重不太实用；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/functionscope/Node-Excel-Export&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;excel-export&lt;/a&gt; : 基于Node.js将数据生成导出excel文件，生成文件格式为xlsx，可以设置单元格宽度，API容易上手，无法生成worksheet字表，比较单一，基本功能可以基本满足；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004062768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-xlrd&lt;/a&gt;: 基于node.js从excel文件中提取数据，仅支持xls格式文件,不支持xlsx,有点过时，常用的都是XLSX 格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过以上分析对比，本人比较推崇&lt;code&gt;js-xlsx&lt;/code&gt;、&lt;code&gt;excel-export&lt;/code&gt;来读写Excel文件，可以结合使用&lt;code&gt;js-xlsx&lt;/code&gt;解析Excel、&lt;code&gt;excel-export&lt;/code&gt;生成，效果更加，接下来分别实践&lt;code&gt;js-xlsx&lt;/code&gt;、&lt;code&gt;excel-export&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;第一讲：利用-js-xlsx-处理-Excel-文件&quot;&gt;&lt;a href=&quot;#第一讲：利用-js-xlsx-处理-Excel-文件&quot; class=&quot;headerlink&quot; title=&quot;第一讲：利用 js-xlsx 处理 Excel 文件&quot;&gt;&lt;/a&gt;第一讲：利用 js-xlsx 处理 Excel 文件&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;node中使用通过npm：&lt;br&gt;&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; xlsx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;浏览器使用：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;javascript&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dist/xlsx.core.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过bower安装：&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bower &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;js-xlsx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt;，在客户端使用时，建议使用&lt;code&gt;dist/xlsx.full.min.js&lt;/code&gt;，包含了js-xlsx所有模块。&lt;/p&gt;
&lt;h3 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h3&gt;&lt;p&gt;在使用这个库之前，先介绍库中的一些概念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;workbook 对象，指的是整份 Excel 文档。我们在使用 js-xlsx 读取 Excel 文档之后就会获得 workbook 对象。&lt;/li&gt;
&lt;li&gt;worksheet 对象，指的是 Excel 文档中的表。我们知道一份 Excel 文档中可以包含很多张表，而每张表对应的就是 worksheet 对象。&lt;/li&gt;
&lt;li&gt;cell 对象，指的就是 worksheet 中的单元格，一个单元格就是一个 cell 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;它们的关系如下：&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;SheetNames&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Sheets&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet1&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// worksheet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;sheet2&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt;: &amp;#123; ... &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.用 &lt;code&gt;XLSX.read&lt;/code&gt; 读取获取到的 Excel 数据，返回 workbook&lt;br&gt;2.用 &lt;code&gt;XLSX.readFile&lt;/code&gt; 打开 Excel 文件，返回 workbook&lt;br&gt;3.用 &lt;code&gt;workbook.SheetNames&lt;/code&gt; 获取表名&lt;br&gt;4.用 &lt;code&gt;workbook.Sheets[xxx]&lt;/code&gt; 通过表名获取表格&lt;br&gt;5.用 &lt;code&gt;worksheet[address]&lt;/code&gt;操作单元格&lt;br&gt;6.用&lt;code&gt;XLSX.utils.sheet_to_json&lt;/code&gt;针对单个表获取表格数据转换为json格式&lt;br&gt;7.用&lt;code&gt;XLSX.writeFile(wb, &amp;#39;output.xlsx&amp;#39;)&lt;/code&gt;生成新的 Excel 文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体用法&lt;/strong&gt;&lt;br&gt;读取 Excel 文件&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;workbook&lt;/span&gt; ＝ &lt;span class=&quot;selector-tag&quot;&gt;XLSX&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.read&lt;/span&gt;(excelData, &amp;#123;&lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;base64&#39;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;workbook&lt;/span&gt; ＝ &lt;span class=&quot;selector-tag&quot;&gt;XLSX&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.writeFile&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;someExcel.xlsx&#39;&lt;/span&gt;, opts);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取 Excel 文件中的表&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取 Excel 中所有表名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sheetNames&lt;/span&gt; = workbook.SheetNames; &lt;span class=&quot;comment&quot;&gt;// 返回 [&#39;sheet1&#39;, &#39;sheet2&#39;,……]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据表名获取对应某张表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worksheet&lt;/span&gt; = workbook.Sheets[sheetNames[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;worksheet[address]&lt;/code&gt; 来操作表格，以 ! 开头的 key 是特殊的字段。&lt;br&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 获取 A1 单元格对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a1 = worksheet[&lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt;]; // 返回 &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, t: &lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;, ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取 A1 中的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1.v // 返回 &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取表的有效范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;] // 返回 &lt;span class=&quot;string&quot;&gt;&#39;A1:B20&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!range&#39;&lt;/span&gt;] // 返回 range 对象，&amp;#123; s: &amp;#123; r: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, e: &amp;#123; r: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取合并过的单元格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worksheet[&lt;span class=&quot;string&quot;&gt;&#39;!merges&#39;&lt;/span&gt;] // 返回一个包含 range 对象的列表，[ &amp;#123;s: &amp;#123; r: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;, c: &amp;#123; r: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, c: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取 Excel 文件中的表转换为json数据&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XLSX&lt;span class=&quot;selector-class&quot;&gt;.utils&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sheet_to_json&lt;/span&gt;(worksheet)  &lt;span class=&quot;comment&quot;&gt;//针对单个表，返回序列化json数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成新的 Excel 文件&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//服务端通过XLSX.writeFile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XLSX = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;xlsx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XLSX.writeFile(wb, &lt;span class=&quot;string&quot;&gt;&#39;output.xlsx&#39;&lt;/span&gt;)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//客服端，只能通过XLSX.write(wb, write_opts) 写入 表格数据，借助FileSaver生成，且只支持在高版本浏览器。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; wopts = &amp;#123; &lt;span class=&quot;attribute&quot;&gt;bookType&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;xlsx&#39;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;bookSST&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;false, type&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;binary&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; wbout = XLSX.write(wb,wopts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s2ab&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; buf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;(s.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; view = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Uint8Array&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i!=s.length; ++i) view[i] = s.charCodeAt(i) &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* the saveAs call downloads a file on the local machine */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;saveAs(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Blob([s2ab(wbout)],&amp;#123;&lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;#125;), &lt;span class=&quot;string&quot;&gt;&quot;test.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;js-xlsx实战&quot;&gt;&lt;a href=&quot;#js-xlsx实战&quot; class=&quot;headerlink&quot; title=&quot;js-xlsx实战&quot;&gt;&lt;/a&gt;js-xlsx实战&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;解析 Excel 生成 JSON&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function to_json(workbook) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 获取 &lt;span class=&quot;type&quot;&gt;Excel&lt;/span&gt; 中所有表名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sheetNames = workbook.&lt;span class=&quot;type&quot;&gt;SheetNames&lt;/span&gt;; // 返回 [&#39;sheet1&#39;, &#39;sheet2&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	workbook.&lt;span class=&quot;type&quot;&gt;SheetNames&lt;/span&gt;.forEach(function(sheetName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worksheet = workbook.&lt;span class=&quot;type&quot;&gt;Sheets&lt;/span&gt;[sheetName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;[sheetName] = &lt;span class=&quot;type&quot;&gt;XLSX&lt;/span&gt;.utils.sheet_to_json(worksheet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(&lt;span class=&quot;string&quot;&gt;&quot;打印表信息&quot;&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));  //显示格式&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;表1&quot;&lt;/span&gt;:[],&lt;span class=&quot;string&quot;&gt;&quot;表2&quot;&lt;/span&gt;:[]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导出表格&lt;/strong&gt;&lt;br&gt;1.构建特定的数据结构，通过new Blob如下。&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// workbook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;SheetNames&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;Sheets&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;A1:E4&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 必须要有这个范围才能输出，否则导出的 excel 会是一个空表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;A1&lt;/span&gt;: &amp;#123; &lt;span class=&quot;attribute&quot;&gt;v&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.调用 XLSX.write， 借助FileSaver中new Blob生成即可。&lt;br&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var _headers = [&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;country&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;remark&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var _data = [ &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123; id: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remark: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt; &amp;#125; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var headers = _headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 为 _headers 添加对应的单元格位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // [ &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;country&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;remark&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E1&#39;&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;((v, i) =&amp;gt; Object.assign(&amp;#123;&amp;#125;, &amp;#123;v: v, position: String.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+i) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 转换成 worksheet 需要的结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // &amp;#123; A1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   B1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   C1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;age&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   D1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;country&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //   E1: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;remark&#39;&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .reduce((prev, &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;) =&amp;gt; Object.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var data = _data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              // 匹配 headers 的位置，生成对应的单元格数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              // [ [ &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E2&#39;&lt;/span&gt; &amp;#125; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   [ &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E3&#39;&lt;/span&gt; &amp;#125; ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   [ &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E4&#39;&lt;/span&gt; &amp;#125; ] ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;((v, i) =&amp;gt; _headers.&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;((k, j) =&amp;gt; Object.assign(&amp;#123;&amp;#125;, &amp;#123; v: v[k], position: String.fromCharCode(&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;+j) + (i+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#125;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              // 对刚才的结果进行降维处理（二维数组变成一维数组）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              // [ &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;A4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;B4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;C4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;D4&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt;, position: &lt;span class=&quot;string&quot;&gt;&#39;E4&#39;&lt;/span&gt; &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;) =&amp;gt; prev.concat(&lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              // 转换成 worksheet 需要的结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //   &amp;#123; A2: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     B2: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test1&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     C2: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;30&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     D2: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;China&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     E2: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     A3: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     B3: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test2&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     C3: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;20&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     D3: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;America&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     E3: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     A4: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     B4: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;test3&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     C4: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;18&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     D4: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;Unkonw&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              //     E4: &amp;#123; v: &lt;span class=&quot;string&quot;&gt;&#39;???&#39;&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              .reduce((prev, &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt;) =&amp;gt; Object.assign(&amp;#123;&amp;#125;, prev, &amp;#123;[next.position]: &amp;#123;v: next.v&amp;#125;&amp;#125;), &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 合并 headers 和 data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var output = Object.assign(&amp;#123;&amp;#125;, headers, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有单元格的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var outputPos = Object.keys(output);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 计算出范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ref = outputPos[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + outputPos[outputPos.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 构建 workbook 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var wb = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SheetNames: [&lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sheets: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;mySheet&#39;&lt;/span&gt;: Object.assign(&amp;#123;&amp;#125;, output, &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;!ref&#39;&lt;/span&gt;: ref &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 导出 Excel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//XLSX.writeFile(wb, &lt;span class=&quot;string&quot;&gt;&#39;output.xlsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var wopts = &amp;#123; bookType:&lt;span class=&quot;string&quot;&gt;&#39;xlsx&#39;&lt;/span&gt;, bookSST:false, type:&lt;span class=&quot;string&quot;&gt;&#39;binary&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var wbout = XLSX.write(wb,wopts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; s2ab(s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var buf = new ArrayBuffer(s.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var view = new Uint8Array(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  for (var i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i!=s.length; ++i) view[i] = s.charCodeAt(i) &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* the saveAs call downloads a file on the local machine */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;saveAs(new Blob([s2ab(wbout)],&amp;#123;type:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;#125;), &lt;span class=&quot;string&quot;&gt;&quot;test.xlsx&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;实践Demo：&lt;a href=&quot;http://doc.pfan123.com/excel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RD快速生成excel表&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二讲：利用-excel-export-生成-Excel-文件&quot;&gt;&lt;a href=&quot;#第二讲：利用-excel-export-生成-Excel-文件&quot; class=&quot;headerlink&quot; title=&quot;第二讲：利用 excel-export 生成 Excel 文件&quot;&gt;&lt;/a&gt;第二讲：利用 excel-export 生成 Excel 文件&lt;/h2&gt;&lt;p&gt;excel-export模块，上手起来就比较容易了，其中原理是通过修改，修改header 信息、拼接字符串、修改字符集、输出字符串的形式实现的，在部分firefox低版本下载中文名会出现乱码情况。我们只需要按照API设置好数据参数，通过nodeExcel.execute调用执行，系统调用模版”styles.xml”就可以生成Excel文件，比较好的就是，它可以设置单元格的宽度，类型。&lt;br&gt;我们先看看，官方提供的例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nodeExcel = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;excel-export&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/Excel&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; conf =&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conf.stylesXmlFile = &lt;span class=&quot;string&quot;&gt;&quot;styles.xml&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conf.name = &lt;span class=&quot;string&quot;&gt;&quot;mysheet&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conf.cols = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        caption:&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type:&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        beforeCellWrite:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;row, cellData&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cellData.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width:&lt;span class=&quot;number&quot;&gt;28.7109375&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        caption:&lt;span class=&quot;string&quot;&gt;&#39;date&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type:&lt;span class=&quot;string&quot;&gt;&#39;date&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        beforeCellWrite:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originDate = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.UTC(&lt;span class=&quot;number&quot;&gt;1899&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;row, cellData, eOpt&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (eOpt.rowNum%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    eOpt.styleIndex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    eOpt.styleIndex = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cellData === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  eOpt.cellType = &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;N/A&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (cellData - originDate) / (&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        caption:&lt;span class=&quot;string&quot;&gt;&#39;bool&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type:&lt;span class=&quot;string&quot;&gt;&#39;bool&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        caption:&lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         type:&lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conf.rows = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;string&quot;&gt;&#39;pi&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.UTC(&lt;span class=&quot;number&quot;&gt;2013&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)), &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.14&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2012&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.7182&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;string&quot;&gt;&quot;M&amp;amp;M&amp;lt;&amp;gt;&#39;&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.UTC(&lt;span class=&quot;number&quot;&gt;2013&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)), &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.61803&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;string&quot;&gt;&quot;null date&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.414&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = nodeExcel.execute(conf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.setHeader(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/vnd.openxmlformats&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.setHeader(&lt;span class=&quot;string&quot;&gt;&quot;Content-Disposition&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;attachment; filename=&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;Report.xlsx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.end(result, &lt;span class=&quot;string&quot;&gt;&#39;binary&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Listening on port 3000&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 分析生成excel流程：&lt;/strong&gt;&lt;br&gt;1.配置excel文件名conf.name&lt;br&gt;2.设置表caption，每列单元格数据类型，宽度&lt;br&gt;3.填充表中每行数据conf.rows，nodeExcel.execute生成数据结构，设置头部，拼接生成表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在最后，以上仅为个人观点，如有纰漏之处，欢迎各位大侠拍砖！&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/functionscope/Node-Excel-Export&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node-Excel-Export excel导出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004062768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js读写excel文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.uedsc.com/js-xlsx.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS-XLSX读取和解析Excel表格文件(xls/xlsx)的JavaScript插件&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scarletsky.github.io/2016/01/30/nodejs-process-excel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 Node.js 中利用 js-xlsx 处理 Excel 文件&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004062768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-xlrd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leftshifters/excel-parser&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;excel-parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eligrey/FileSaver.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileSaver浏览器保存excel&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30859901/parse-xlsx-with-node-and-create-json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow xlsx相关问题&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文介绍用 Node.js 中的依赖库来处理 Excel 文件，深入分析对比常见npm库处理Excel 文件存在的优缺点，主要阐述用js-x
    
    </summary>
    
    
      <category term="node" scheme="http://aotu.io/tags/node/"/>
    
      <category term="excel" scheme="http://aotu.io/tags/excel/"/>
    
      <category term="JS-XLSX" scheme="http://aotu.io/tags/JS-XLSX/"/>
    
      <category term="Node-Excel-Export" scheme="http://aotu.io/tags/Node-Excel-Export/"/>
    
  </entry>
  
  <entry>
    <title>提升代码的可读性系列(一)--基础篇</title>
    <link href="http://aotu.io/notes/2016/03/31/readable/"/>
    <id>http://aotu.io/notes/2016/03/31/readable/</id>
    <published>2016-03-31T13:30:12.000Z</published>
    <updated>2016-04-06T09:16:01.000Z</updated>
    
    <content type="html">&lt;p&gt;编程是一门艺术活，好的代码应该就像住的房子一样，有整体的框架，有门，有窗户，相互独立又完美组合。你觉得门不够结实，就拆下来换个实心的；你觉得窗户不够明亮就换个全玻璃的，总之对房子的其他部位没有任何影响。所以说每一个程序员都应该有一颗设计师的心。本文主要从&lt;strong&gt;编码&lt;/strong&gt;、&lt;strong&gt;变量&lt;/strong&gt;、&lt;strong&gt;处理错误&lt;/strong&gt;、&lt;strong&gt;对象&lt;/strong&gt;等基础方面进行简单的探讨，希望能对大家的工作有所帮助~~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-编码风格&quot;&gt;&lt;a href=&quot;#1-编码风格&quot; class=&quot;headerlink&quot; title=&quot;1 编码风格&quot;&gt;&lt;/a&gt;1 编码风格&lt;/h2&gt;&lt;p&gt;老生常谈，我们先从最基础的编码说起吧！好的编码规范不仅仅能够提升代码的可读性与可维护性，提高团队的工作效率，也能够避开一些低级的错误，减少bug的隐患，提升程序员的自我修养。编码虽小，但却是万丈高楼的基础，对于编写清晰连贯的代码来说，每一个字符都是非常重要的。以下部分编码规范参考自&lt;a href=&quot;http://aotu.io&quot;&gt;凹凸实验室&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-1-缩进&quot;&gt;&lt;a href=&quot;#1-1-缩进&quot; class=&quot;headerlink&quot; title=&quot;1.1 缩进&quot;&gt;&lt;/a&gt;1.1 缩进&lt;/h4&gt;&lt;p&gt;通常使用四个空格进行代码缩进，有些也用tab来缩进，这主要根据团队的风格跟个人喜好&lt;/p&gt;
&lt;h4 id=&quot;1-2-空格&quot;&gt;&lt;a href=&quot;#1-2-空格&quot; class=&quot;headerlink&quot; title=&quot;1.2 空格&quot;&gt;&lt;/a&gt;1.2 空格&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;左括号与类名之间一个空格&lt;/li&gt;
&lt;li&gt;冒号与属性值之间一个空格&lt;/li&gt;
&lt;li&gt;操作符前后&lt;/li&gt;
&lt;li&gt;匿名函数表达式之后等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-3-空行&quot;&gt;&lt;a href=&quot;#1-3-空行&quot; class=&quot;headerlink&quot; title=&quot;1.3 空行&quot;&gt;&lt;/a&gt;1.3 空行&lt;/h4&gt;&lt;p&gt;这是一个容易被大家忽略的点，但它所带来的效果是毋庸置疑的！通常一段代码的语义和另一段代码不相关，就应该用空行隔开，避免一大段的代码揉在一起，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在方法之间；&lt;/li&gt;
&lt;li&gt;方法中的局部变量和第一条语句之间；&lt;/li&gt;
&lt;li&gt;注释之前&lt;/li&gt;
&lt;li&gt;方法内的逻辑片段之间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-4-命名约定&quot;&gt;&lt;a href=&quot;#1-4-命名约定&quot; class=&quot;headerlink&quot; title=&quot;1.4 命名约定&quot;&gt;&lt;/a&gt;1.4 命名约定&lt;/h4&gt;&lt;p&gt;有一位大师曾说过，计算机科学只存在两个难题：&lt;strong&gt;缓存&lt;/strong&gt;和&lt;strong&gt;命名&lt;/strong&gt;。由此可见命名不仅是一门科学，也是一门技术。&lt;br&gt;通常情况下，变量与函数一般使用驼峰大小写命名法，其中为了区分变量与函数，变量命名前缀应当是名词，函数前缀应当是动词，也就是说我们应当让命名&lt;strong&gt;承载一定的含义&lt;/strong&gt;，因此要避免使用没有意义的命名。&lt;/p&gt;
&lt;h4 id=&quot;1-4-注释&quot;&gt;&lt;a href=&quot;#1-4-注释&quot; class=&quot;headerlink&quot; title=&quot;1.4 注释&quot;&gt;&lt;/a&gt;1.4 注释&lt;/h4&gt;&lt;p&gt;通常我们在编写完一段代码的短时间内，会清楚这段代码的工作原理。但是当过一段时间再次回到代码中，可能会花很长的时间才能读懂。这种情况下，编写注释就变得尤为重要了。&lt;/p&gt;
&lt;h2 id=&quot;2-变量&quot;&gt;&lt;a href=&quot;#2-变量&quot; class=&quot;headerlink&quot; title=&quot;2 变量&quot;&gt;&lt;/a&gt;2 变量&lt;/h2&gt;&lt;p&gt;首先说一说全局变量存在哪些的问题吧！&lt;strong&gt;命名冲突&lt;/strong&gt;、&lt;strong&gt;测试难度大&lt;/strong&gt;、&lt;strong&gt;深耦合&lt;/strong&gt;等等。在创建变量的时候，我们应该注意以下几个方面&lt;/p&gt;
&lt;h4 id=&quot;2-1-避免隐性的创建全局变量&quot;&gt;&lt;a href=&quot;#2-1-避免隐性的创建全局变量&quot; class=&quot;headerlink&quot; title=&quot;2.1 避免隐性的创建全局变量&quot;&gt;&lt;/a&gt;2.1 避免隐性的创建全局变量&lt;/h4&gt;&lt;p&gt;什么是隐性的全局变量呢？官方的回答是：&lt;strong&gt;任何变量，如果未经声明，就为全局对象所有&lt;/strong&gt;。啥意思呢？其实就是没有加&lt;strong&gt;var&lt;/strong&gt;声明的，请看下面的例子&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一种容易创建隐形全局变量的情况就是var声明的链式赋值，如下代码所示&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;person&lt;/span&gt;（） &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上这段代码的执行结果是：a是局部变量，b是全局变量，主要原因是&lt;strong&gt;从右至左&lt;/strong&gt;的操作符优先级，它实际执行的结果等同于&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a&lt;/span&gt; = ( b = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;综上所述，隐式全局变量并不是我们平时用var声明的变量，而是全局对象的属性，既然是属性，那么它可以通过delete操作符删除，但变量不可以，且在&lt;strong&gt;ES5 strict&lt;/strong&gt;以上会抛出错误。&lt;/p&gt;
&lt;h4 id=&quot;2-2-在函数顶部声明变量&quot;&gt;&lt;a href=&quot;#2-2-在函数顶部声明变量&quot; class=&quot;headerlink&quot; title=&quot;2.2 在函数顶部声明变量&quot;&gt;&lt;/a&gt;2.2 在函数顶部声明变量&lt;/h4&gt;&lt;p&gt;在javascript中，声明变量有一个“提升”的概念，即无论在函数哪里声明，效果都等同于在函数顶部进行声明。所以我们统一把变量在函数顶部声明，既有利于可读性与可维护行，也不易出错。&lt;/p&gt;
&lt;h4 id=&quot;2-3-使用单一var模式&quot;&gt;&lt;a href=&quot;#2-3-使用单一var模式&quot; class=&quot;headerlink&quot; title=&quot;2.3 使用单一var模式&quot;&gt;&lt;/a&gt;2.3 使用单一var模式&lt;/h4&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;b&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;c&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样声明的变量不仅可读性好，而且可以防止变量在定义前就被使用的逻辑错误，且编码更少。&lt;/p&gt;
&lt;h4 id=&quot;2-4-单全局变量方式&quot;&gt;&lt;a href=&quot;#2-4-单全局变量方式&quot; class=&quot;headerlink&quot; title=&quot;2.4 单全局变量方式&quot;&gt;&lt;/a&gt;2.4 单全局变量方式&lt;/h4&gt;&lt;p&gt;虽然全局变量的容易污染命名空间，但有些功能的需要，难以避免使用，关键是我们应该做到避免全局变量超出我们的掌控，最佳的方法是依赖尽可能少的全局变量。我们可以使用单全局变量的方式来开启我们的项目，这种方式在许多的javascript类库中都有这样使用。如jQuery,它定义了两个全局变量$和jQuery。&lt;/p&gt;
&lt;h2 id=&quot;3-UI松耦合&quot;&gt;&lt;a href=&quot;#3-UI松耦合&quot; class=&quot;headerlink&quot; title=&quot;3 UI松耦合&quot;&gt;&lt;/a&gt;3 UI松耦合&lt;/h2&gt;&lt;p&gt;什么是松耦合？当修改一个组件的逻辑，而对另一个组件没有影响，就说这叫松耦合。通常一个大型的web应用，都是由多人共同开发维护，这时候松耦合显得至关重要，假如你修改了某一处的代码而影响了团队其他人的功能，这是非常不友好的。通常我们主要注意以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将javascript从css中抽离，如避免使用css表达式&lt;/li&gt;
&lt;li&gt;将csst从javascrip中抽离,如避免使用javascript直接修改css，最佳的方法是操作css的className;&lt;/li&gt;
&lt;li&gt;将javascript从HTML中抽离，如避免将函数直接嵌入到html执行，我们应该尽量做到将所有的js代码都放入外置文件中，确保&lt;br&gt;html中不会有内联的js代码。&lt;/li&gt;
&lt;li&gt;将html从javascript中抽离,如避免在js中拼接html结构，我们可以用模板引擎，也可以使用Vue、React等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-错误处理&quot;&gt;&lt;a href=&quot;#4-错误处理&quot; class=&quot;headerlink&quot; title=&quot;4 错误处理&quot;&gt;&lt;/a&gt;4 错误处理&lt;/h2&gt;&lt;h4 id=&quot;4-1-为什么要抛出错误？&quot;&gt;&lt;a href=&quot;#4-1-为什么要抛出错误？&quot; class=&quot;headerlink&quot; title=&quot;4.1 为什么要抛出错误？&quot;&gt;&lt;/a&gt;4.1 为什么要抛出错误？&lt;/h4&gt;&lt;p&gt;在javascript开发中，总是会悄无声息的出现一些超出我们预期的，携带的信息稀少的，隐晦含糊的bug，让我们措手不及，大大增加了我们调试错误、定位错误的难度，影响开发效率。假设错误中包含这样的信息：“由于某某情况，导致某某函数执行错误”，那么是不是马上就可以开始调试而不用花大量的时候去定位错误？&lt;/p&gt;
&lt;h4 id=&quot;4-2-何时抛出错误&quot;&gt;&lt;a href=&quot;#4-2-何时抛出错误&quot; class=&quot;headerlink&quot; title=&quot;4.2 何时抛出错误?&quot;&gt;&lt;/a&gt;4.2 何时抛出错误?&lt;/h4&gt;&lt;p&gt;主要是辨识代码中哪些部分在特定的情况下最后可能导致错误,这里的错误通常都是我们在思考的过程中的一些可预期的错误。&lt;/p&gt;
&lt;h4 id=&quot;4-3-怎样抛出错误？&quot;&gt;&lt;a href=&quot;#4-3-怎样抛出错误？&quot; class=&quot;headerlink&quot; title=&quot;4.3 怎样抛出错误？&quot;&gt;&lt;/a&gt;4.3 怎样抛出错误？&lt;/h4&gt;&lt;h5 id=&quot;4-3-1-使用try-catch&quot;&gt;&lt;a href=&quot;#4-3-1-使用try-catch&quot; class=&quot;headerlink&quot; title=&quot;4.3.1 使用try-catch&quot;&gt;&lt;/a&gt;4.3.1 使用try-catch&lt;/h5&gt;&lt;p&gt;将可能引发错误的代码放在try块中，处理错误的代码放在catch中，如&lt;br&gt;&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    someMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    catchError(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以增加一个finally块，这里需注意的是finally块中的代码块不管是否有错误发生，最后都会被执行。&lt;/p&gt;
&lt;h5 id=&quot;4-3-2-throw&quot;&gt;&lt;a href=&quot;#4-3-2-throw&quot; class=&quot;headerlink&quot; title=&quot;4.3.2 throw&quot;&gt;&lt;/a&gt;4.3.2 throw&lt;/h5&gt;&lt;p&gt;当我们能清晰的捕捉到错误的时候，最好的做法就是抛出这个错误，避免在不经意的时候又遇到它，让大家尴尬。这里需注意的是当遇到throw操作符时，代码会立即停止执行&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;method(): descdescdesc&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以自定义一个错误类型,总之就是尽可能用最短的字符描述清楚&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;throw&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;myErrorType&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;arguments must be a DOM element&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;errorMethod&lt;/span&gt;: errorMethod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-创建对象&quot;&gt;&lt;a href=&quot;#5-创建对象&quot; class=&quot;headerlink&quot; title=&quot;5 创建对象&quot;&gt;&lt;/a&gt;5 创建对象&lt;/h2&gt;&lt;h4 id=&quot;5-1-对象字面量&quot;&gt;&lt;a href=&quot;#5-1-对象字面量&quot; class=&quot;headerlink&quot; title=&quot;5.1 对象字面量&quot;&gt;&lt;/a&gt;5.1 对象字面量&lt;/h4&gt;&lt;p&gt;所谓的对象字面量其实就是我们通常所说的键值对哈希表，这种方式不仅富有表现力，可读性好，且字符更短，没有作用域解析。它的语法规则如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象包装在大括号中&lt;/li&gt;
&lt;li&gt;逗号分隔属性和方法&lt;/li&gt;
&lt;li&gt;用冒号分隔属性名称和属性的值&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;job&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;farmer&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;实现私有属性&quot;&gt;&lt;a href=&quot;#实现私有属性&quot; class=&quot;headerlink&quot; title=&quot;实现私有属性&quot;&gt;&lt;/a&gt;实现私有属性&lt;/h5&gt;&lt;p&gt;以上例子的name、job属性都是可直接访问的。有些时候我们可能想实现一些私有的属性，然后提供一个公有的接口来对外访问。虽然javascript并没有特殊的语法来表示私有、公共属性和方法，但是可以通过&lt;strong&gt;匿名闭包&lt;/strong&gt;来实现，内部的任意变量都不会暴露，来看以下代码&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这样就能实现私有成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        job = &lt;span class=&quot;string&quot;&gt;&quot;farmer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更优雅的写法&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        job = &lt;span class=&quot;string&quot;&gt;&quot;farmer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种写法也是&lt;strong&gt;模块模式&lt;/strong&gt;的基础框架，后续会有详细介绍。&lt;/p&gt;
&lt;p&gt;熟悉了这种模式之后它还有很多种玩法，比如可以像jQuery这样链式调用：“$(‘#id’).siblings(‘ul’).find(“li”).addClass();&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;add&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num += arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;red&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;arg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num -= arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;setTotal&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.add(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).red(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).setTotal(); &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-2-构造函数&quot;&gt;&lt;a href=&quot;#5-2-构造函数&quot; class=&quot;headerlink&quot; title=&quot;5.2 构造函数&quot;&gt;&lt;/a&gt;5.2 构造函数&lt;/h4&gt;&lt;p&gt;我们先来看看构造函数的基础框架&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//公有属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = &lt;span class=&quot;string&quot;&gt;&quot;farmer&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//公有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在使用new方式实例化构造函数通常会经历以下几个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个对象并且this变量引用了该对象，且继承了该对象的原型     &lt;/li&gt;
&lt;li&gt;属性和方法被加入到this引用的对象中&lt;/li&gt;
&lt;li&gt;隐式的返回新对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;忘记使用NEW的情况&quot;&gt;&lt;a href=&quot;#忘记使用NEW的情况&quot; class=&quot;headerlink&quot; title=&quot;忘记使用NEW的情况&quot;&gt;&lt;/a&gt;忘记使用NEW的情况&lt;/h5&gt;&lt;p&gt;当然我们有时候会忘记使用new操作符的实例化的情况，然而这并不会导致语法错误，但构造函数的this指向了全局对象，可能会发生逻辑错误或者意外，来看下面执行的结果&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName(); //Cannot &lt;span class=&quot;keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;title&quot;&gt; &lt;/span&gt;&#39;get&lt;span class=&quot;literal&quot;&gt;Inf&lt;/span&gt;o&#39; of undefined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了避免这种意外发生，我们也可以在构造函数中检查this是否为构造函数的一个实例，强制使用new操作符，继续看下面的例子&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Obj))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看执行的结果&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj&lt;/span&gt; = Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName(); &lt;span class=&quot;comment&quot;&gt;//&quot;aotu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;静态成员&quot;&gt;&lt;a href=&quot;#静态成员&quot; class=&quot;headerlink&quot; title=&quot;静态成员&quot;&gt;&lt;/a&gt;静态成员&lt;/h5&gt;&lt;p&gt;在javascript中，并没有特殊的语法来表示静态成员，但我们可以为构造函数添加属性这种方式来实现这种语法，请看下面的例子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//添加静态方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.getAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//注意这里的调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.getAge(); &lt;span class=&quot;comment&quot;&gt;//25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果使用实例对象调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getAge(); &lt;span class=&quot;comment&quot;&gt;//Object #&amp;lt;Obj&amp;gt; has no method &#39;getAge&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里大家需要注意调用静态方法的方式，若以实例对象调用一个静态方法是无法正常运行的，反之同理。&lt;/p&gt;
&lt;h5 id=&quot;私有属性与方法&quot;&gt;&lt;a href=&quot;#私有属性与方法&quot; class=&quot;headerlink&quot; title=&quot;私有属性与方法&quot;&gt;&lt;/a&gt;私有属性与方法&lt;/h5&gt;&lt;p&gt;在以上例子中构造函数的属性与方法都属于公有方法，我们也可以给构造函数添加私有方法与私有属性&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; address = &lt;span class=&quot;string&quot;&gt;&quot;sz&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        that = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAddress&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(that.address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;构造函数存在的问题&quot;&gt;&lt;a href=&quot;#构造函数存在的问题&quot; class=&quot;headerlink&quot; title=&quot;构造函数存在的问题&quot;&gt;&lt;/a&gt;构造函数存在的问题&lt;/h5&gt;&lt;p&gt;构造函数的主要问题就是当多次实例化这个构造函数的时候，每个方法都会重新创建一遍，这样就等于在内存中的拷贝。解决问题的第一种思路就是将函数中的方法通过函数定义转移到函数外面，并将指针传递给构造函数，来看下面的例子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将指针赋给getName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = getName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;虽然也解决了以上的问题，但并没有达到封装的效果。接下来我们引入原型&lt;strong&gt;prototype&lt;/strong&gt;的概念。&lt;/p&gt;
&lt;h4 id=&quot;5-3-原型模式&quot;&gt;&lt;a href=&quot;#5-3-原型模式&quot; class=&quot;headerlink&quot; title=&quot;5.3 原型模式&quot;&gt;&lt;/a&gt;5.3 原型模式&lt;/h4&gt;&lt;p&gt;每一个构造函数都有一个原型prototype，原型对象包含一个指向构造函数的指针，这个指针指向一个可以由特定类型的所有实例共享的属性和方法，所以使用原型对象可以让所有对象实例共享它的属性和方法，来看下面的例子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype.name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype.age = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.getName() &lt;span class=&quot;comment&quot;&gt;//&quot;aotu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj2.getName() &lt;span class=&quot;comment&quot;&gt;//&quot;aotu&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj1.getName == obj2.getName); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由此可见obj1 和 obj2 访问的是同一个getName函数&lt;/p&gt;
&lt;h5 id=&quot;更好的写法&quot;&gt;&lt;a href=&quot;#更好的写法&quot; class=&quot;headerlink&quot; title=&quot;更好的写法&quot;&gt;&lt;/a&gt;更好的写法&lt;/h5&gt;&lt;p&gt;我们可以将所有的原型都写在一个对象字面量里，这样整个代码看起来更加简洁清晰，继续往下看&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;使用字面量的方式需注意的问题&quot;&gt;&lt;a href=&quot;#使用字面量的方式需注意的问题&quot; class=&quot;headerlink&quot; title=&quot;使用字面量的方式需注意的问题&quot;&gt;&lt;/a&gt;使用字面量的方式需注意的问题&lt;/h5&gt;&lt;p&gt;在使用这种字面量的方式的时候需注意以下两点&lt;/p&gt;
&lt;p&gt;1.将prototype设置为等于一个对象字面量形式创建的对象，它本质上已经完全重写了默认的prototype对象，最终结果虽然相同但是其constructor属性不再指向该对象。&lt;/p&gt;
&lt;p&gt;constructor是个什么鬼？在默认情况下，所有原型对象都会自动获得一个constructor，它指向prototype属性所在函数的指针，换句话说这个constructor就是指这个构造函数。以上代码执行结果如下所示&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.cnstructor == Obj) &lt;span class=&quot;comment&quot;&gt;//false;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以在重写prototype的时候给constructor指定构造函数，接着往下看&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: Obj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(obj.cnstructor == Obj) &lt;span class=&quot;comment&quot;&gt;//true;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.当我们重写整个原型的时候如果先创建了实例，就会切断构造函数与原型之间的联系，因为&lt;strong&gt;实例的指针仅仅指向原型，而不是构造函数&lt;/strong&gt;，在实际的操作过程中，应该尽量避免这种错误&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: Obj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName();  &lt;span class=&quot;comment&quot;&gt;//error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;组合使用二者&quot;&gt;&lt;a href=&quot;#组合使用二者&quot; class=&quot;headerlink&quot; title=&quot;组合使用二者&quot;&gt;&lt;/a&gt;组合使用二者&lt;/h5&gt;&lt;p&gt;在我们的具体应用中，通常比较多的是组合使用构造函数模式与原型模式。&lt;strong&gt;构造函数用于定义实例属性，原型用于定于共享的属性和方法&lt;/strong&gt;，这样能够最大限度的节省内存。以下是一个基本的组合使用构造函数与原型的例子&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Obj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!（&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Obj）)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&quot;aotu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Obj.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;constructor&lt;/span&gt;: Obj,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;getName&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; obj = Obj();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.getName();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-4-模块模式&quot;&gt;&lt;a href=&quot;#5-4-模块模式&quot; class=&quot;headerlink&quot; title=&quot;5.4 模块模式&quot;&gt;&lt;/a&gt;5.4 模块模式&lt;/h4&gt;&lt;p&gt;模块模式是一种非常通用的模式，也是使用频率比较高的模式，它具有以下几个特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;可复用&lt;/li&gt;
&lt;li&gt;松耦合&lt;/li&gt;
&lt;li&gt;区分了私有方法与公共方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先看看模块模式的基础框架&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; testModule = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//私有成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; testNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//也可在此定义私有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;privateMethod&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;this is Private method!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//对外公开的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;setHtml&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;txt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testNode.innerHTML = txt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; testModule = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; testModule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testModule.setHtml(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方式看起来比较清晰、简洁，但就是每次调用的时候都需要用new来实例化，我们知道每个实例在内存里都是一份拷贝。如何解决这个问题呢？…我们可以采用一个匿名闭包来完美的解决这个问题。&lt;br&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //将所有的变量和&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;放在这里声明，其作用域也只能在这个匿名闭包里面,既达到了封装的目的，也能防止命名冲突&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来我们将它应用到具体的实例中，以下就是一个基本的Module模式&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testModule =(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; my = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my.setHtml = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;txt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testNode.innerHTML = txt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; ())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testModule.setHtml(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通常在一个大型的项目中，会有多人共同开发一个功能的情况，这个时候我们可以运用这种模式将全局变量当作参数传递，然后通过变量返回，从而达到多人协作的目的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testModule =(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;my&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my.setHtml = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;txt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testNode.innerHTML = txt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; (testModule || &amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们也可以通过这个模式将私有的对象或者属性保护起来，然后设置一些公共接口对外访问，继续来看下面的代码&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; testModule =(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; testNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setHtml = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;txt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testNode.innerHTML = txt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置公共调用方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;setHtml&lt;/span&gt;: setHtml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; ())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上几种方式仅仅只是一些创建对象的基础，通过灵活运用这些基础，可以变换出传说中各种各样的模式，如迭代器模式、工厂模式、装饰者模式等，对于后续学习其他的技术也是极有帮助的，如&lt;strong&gt;React&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyTitle = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getDefaultProps : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            title : &lt;span class=&quot;string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt; &amp;#123;this.props.title&amp;#125; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vue&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message: &lt;span class=&quot;string&quot;&gt;&#39;Hello Vue.js!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;methods&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;reverseMessage&lt;/span&gt;: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.message = this.message.&lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;().&lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上就是本期的所有内容，如有错漏，恳请指正，大家共同进步！在下一期中，会继续跟大家探讨更多好玩的东西，敬请期待~~~&lt;/p&gt;
&lt;h2 id=&quot;6-参考资料&quot;&gt;&lt;a href=&quot;#6-参考资料&quot; class=&quot;headerlink&quot; title=&quot;6 参考资料&quot;&gt;&lt;/a&gt;6 参考资料&lt;/h2&gt;&lt;p&gt;《编写可维护的JavaScript》[美] Nicholas C. Zakas 著&lt;br&gt;《JavaScript设计模式》[美] Addy Osmani 著&lt;br&gt;《JavaScript高级程序设计(第3版)》&lt;br&gt;博文：&lt;a href=&quot;http://www.cnblogs.com/TomXu/tag/JavaScript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解JavaScript系列&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;编程是一门艺术活，好的代码应该就像住的房子一样，有整体的框架，有门，有窗户，相互独立又完美组合。你觉得门不够结实，就拆下来换个实心的；你觉得窗户不够明亮就换个全玻璃的，总之对房子的其他部位没有任何影响。所以说每一个程序员都应该有一颗设计师的心。本文主要从&lt;strong&gt;编码&lt;/strong&gt;、&lt;strong&gt;变量&lt;/strong&gt;、&lt;strong&gt;处理错误&lt;/strong&gt;、&lt;strong&gt;对象&lt;/strong&gt;等基础方面进行简单的探讨，希望能对大家的工作有所帮助~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="编码风格" scheme="http://aotu.io/tags/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="变量" scheme="http://aotu.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="UI松耦合" scheme="http://aotu.io/tags/UI%E6%9D%BE%E8%80%A6%E5%90%88/"/>
    
      <category term="错误处理" scheme="http://aotu.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
      <category term="创建对象" scheme="http://aotu.io/tags/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="可读性" scheme="http://aotu.io/tags/%E5%8F%AF%E8%AF%BB%E6%80%A7/"/>
    
      <category term="可维护性" scheme="http://aotu.io/tags/%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地在Storyboard中设置圆角</title>
    <link href="http://aotu.io/notes/2016/03/30/cornerRadius-in-Storyboard/"/>
    <id>http://aotu.io/notes/2016/03/30/cornerRadius-in-Storyboard/</id>
    <published>2016-03-29T16:56:03.000Z</published>
    <updated>2016-04-01T06:44:21.000Z</updated>
    
    <content type="html">&lt;p&gt;项目中经常遇到一些设计使用圆角，不得不说这样的设计经常能够为App的视图润色不少！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;通常做法&quot;&gt;&lt;a href=&quot;#通常做法&quot; class=&quot;headerlink&quot; title=&quot;通常做法&quot;&gt;&lt;/a&gt;通常做法&lt;/h3&gt;&lt;p&gt;对于代码党来说，很简单的加上一行代码就能够搞定：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;view&lt;span class=&quot;selector-class&quot;&gt;.layer&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.cornerRadius&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于 Storyboard 狂魔，一般情况下，很多人会先把视图拉一个 IBOutlet 然后再到 &lt;code&gt;awakeFromeNib:&lt;/code&gt; 或者 &lt;code&gt;viewDidLoad:&lt;/code&gt; 方法中去设置圆角，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; customView: &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       customView.layer.cornerRadius = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是对代码有一定洁癖的强迫症患者来说，这样的做法经常是要命的！实在无法忍受一个小小圆角都不能在IB中设置，需要另外单独加一行代码来完成，违背了低耦合，高内聚的原则。有人马上提出建议，那就使用IB的运行时属性（Runtime Attributes），有些新手可能对它还不太熟悉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mark2012.qiniudn.com/runtime_attributes.png&quot; alt=&quot;IB的运行时属性设置&quot;&gt;&lt;/p&gt;
&lt;p&gt;这的确也是个不错的方法，可以达到高内聚的效果。不过用过的人都知道，很容易就把 keyPath 拼写错，而且由于这个设置和其他属性的设置分开，可读性可以说很差很差。那有没有什么好的方法呢？&lt;/p&gt;
&lt;h3 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h3&gt;&lt;p&gt;Xcode6之后运行时属性升级到了 &lt;strong&gt;@IBInspectable&lt;/strong&gt; ，利用这个我们可以给 UIView 添加一个属性，然后就可以在IB中进行设置，例如我们想给 &lt;strong&gt;ViewController&lt;/strong&gt; 添加一个数值到IB中设置，在上述代码的最前面插入代码：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@IBInspectable &lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; customNumber&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;Int&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们就能在属性检查器上看到如图所示内容，很容易地对数值进行设置:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mark2012.qiniudn.com/custom_number.png&quot; alt=&quot;自定义属性设置&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;@IBInspectable&lt;/strong&gt; 还支持以下类型属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Point&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rect&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nil&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;回到正题，我们视图的圆角该怎么实现呢？也许你们马上想到了继承，实现一个 &lt;strong&gt;UIView&lt;/strong&gt; 的基类，基类中添加圆角的 &lt;strong&gt;@IBInspectable&lt;/strong&gt; 属性。但这样你马上嗅到了不好的味道，你所有想要使用该属性的视图都要继承自该基类，那岂不是更加麻烦！&lt;/p&gt;
&lt;p&gt;其实最好的解决方法你应该心里有数，如果说在 Object-C 中给已有的类添加方法，你肯定马上能想到 &lt;strong&gt;Category&lt;/strong&gt; ！不过可能有些人还没不清楚应该如何在 &lt;strong&gt;Category&lt;/strong&gt; 中添加属性。由于这里我们用的是 Swift ，稍后我们再说OC中应该如何实现。 Swift 中应该使用 &lt;strong&gt;extension&lt;/strong&gt; 来对 &lt;strong&gt;UIView&lt;/strong&gt; 进行扩展，并且我们需要添加 &lt;strong&gt;@IBInspectable&lt;/strong&gt; 来扩展属性，所以我们需要同时实现 &lt;strong&gt;setter &amp;amp; getter&lt;/strong&gt; ，创建一个命名为 &lt;code&gt;UIView+O2CornerRadius.swift&lt;/code&gt; 的文件，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; UIKit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extension &lt;span class=&quot;decorator&quot;&gt;UIView&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBInspectable &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;cornerRadius&lt;/span&gt;: &lt;span class=&quot;decorator&quot;&gt;CGFloat&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;decorator&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; layer.cornerRadius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// also  set(newValue)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;decorator&quot;&gt;set&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            layer.cornerRadius = newValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只需要如此简单地添加一个扩展，不需要 &lt;strong&gt;import&lt;/strong&gt; ，不必任何多余代码，我们就可以非常非常方便地在任意IB的属性检查器中对圆角进行设置了！这不就是我们梦寐以求的解耦吗？！！:)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mark2012.qiniudn.com/corner_radius.png&quot; alt=&quot;自定义圆角属性设置&quot;&gt;&lt;/p&gt;
&lt;p&gt;实际上， &lt;strong&gt;@IBInspectable&lt;/strong&gt; 是对运行时的一种扩展，你所有的设置都会在上述提到的运行时属性（Runtime Attributes）有所体现。&lt;/p&gt;
&lt;h3 id=&quot;接下来做什么？&quot;&gt;&lt;a href=&quot;#接下来做什么？&quot; class=&quot;headerlink&quot; title=&quot;接下来做什么？&quot;&gt;&lt;/a&gt;接下来做什么？&lt;/h3&gt;&lt;p&gt;我们还可以增加很多内容的扩展，例如阴影、边框、边框颜色等等！学会了这样的奇淫技巧，还不赶紧到你的项目中去实践！&lt;/p&gt;
&lt;p&gt;说说 Object-C 的代码实现，我们使用 &lt;strong&gt;Category&lt;/strong&gt; 同样需要同时实现 &lt;strong&gt;setter &amp;amp; getter&lt;/strong&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UIView+O2CornerRadius.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; UIView (O2CornerRadius)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, assign) IBInspectable CGFloat cornerRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//UIView+O2CornerRadius.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;O2CornerRadius&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setCornerRadius:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)cornerRadius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer.cornerRadius = cornerRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)cornerRadius&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer.cornerRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;项目中经常遇到一些设计使用圆角，不得不说这样的设计经常能够为App的视图润色不少！&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://aotu.io/cates/iOS/"/>
    
    
      <category term="iOS" scheme="http://aotu.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://aotu.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>前端开发与 HTTP/2 的羁绊——安利篇</title>
    <link href="http://aotu.io/notes/2016/03/17/http2-char/"/>
    <id>http://aotu.io/notes/2016/03/17/http2-char/</id>
    <published>2016-03-16T16:54:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;HTTP/2 是万维网（WWW）基础协议 HTTP 16年来的首次重大升级。共经历了18版草案（00-17），于2015年2月18日正式定稿，2015年5月14日 HTTP/2 正式版发布，正式版 HTTP/2 规格标准叫做 RFC7540 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧，我相信你一转身就忘了上面提到的这一长串你内容，特别是这个复杂的规范名称。恩~没关系，要了解 HTTP/2，还是先要了解它的新特性以及实现原理。&lt;/p&gt;
&lt;h2 id=&quot;一、首先你必须知道一点儿-HTTP-1-x&quot;&gt;&lt;a href=&quot;#一、首先你必须知道一点儿-HTTP-1-x&quot; class=&quot;headerlink&quot; title=&quot;一、首先你必须知道一点儿 HTTP/1.x&quot;&gt;&lt;/a&gt;一、首先你必须知道一点儿 HTTP/1.x&lt;/h2&gt;&lt;p&gt;作为一个前端小白，前些天我做了一个简单的活动，本地调试完后我把它放到服务器（假设域名为：jdc.jd.com）上，这时候你通过在客户端（浏览器）访问以下：jdc.jd.com/act/index.html，就可以看到我的活动页面了（当然，要经过一小段时间的等待）。&lt;/p&gt;
&lt;p&gt;那么客户端是如何取得服务端的这些资源的？它们之间的通信是怎样的？&lt;/p&gt;
&lt;p&gt;侧重讲讲三个过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP 连接：&lt;/strong&gt; 浏览器与服务器三次握手，建立 TCP 连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端请求：&lt;/strong&gt; 建立 TCP 连接后，客户端就会向服务器发送一个 HTTP 请求信息（比如请求 HTML 资源，我们暂且就把这个称为“ HTML 请求”）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器响应：&lt;/strong&gt; 服务器接收到请求后进行处理并发回一个 HTTP 响应信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，接下来还有浏览器解析渲染的过程~巴拉巴拉~我们才能最终看到页面~~&lt;/p&gt;
&lt;p&gt;着重看下 HTTP/1.0 和 HTTP/1.1 这三个的过程不同：&lt;/p&gt;
&lt;h3 id=&quot;HTTP-1-0-的通信&quot;&gt;&lt;a href=&quot;#HTTP-1-0-的通信&quot; class=&quot;headerlink&quot; title=&quot;HTTP/1.0 的通信&quot;&gt;&lt;/a&gt;HTTP/1.0 的通信&lt;/h3&gt;&lt;p&gt;在 HTTP/1.0 下，每完成一次请求和响应，TCP 连接就会断开。但我们知道，客户端发送一个请求只能请求一个资源，而我们的网站不可能只有单单一个 HTML 文件吧？至少还要有 CSS 吧？还要有图片吧？于是又要一次 TCP 连接，然后请求和响应。&lt;/p&gt;
&lt;p&gt;下图展示了 HTTP/1.0 请求一个 HTML 和一个 CSS 需要经历的两次 TCP 连接：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/1.png&quot; alt=&quot;[HTTP/1.0通信]&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;HTTP-1-1-的通信&quot;&gt;&lt;a href=&quot;#HTTP-1-1-的通信&quot; class=&quot;headerlink&quot; title=&quot;HTTP/1.1 的通信&quot;&gt;&lt;/a&gt;HTTP/1.1 的通信&lt;/h3&gt;&lt;p&gt;要知道，TCP 连接有 RTT（Round Trip Time，即往返时延）的，每请求一个资源就要有一次 RTT ，用户可是等不得这种慢节奏的响应的。于是到了 HTTP/1.1 ，TCP 可以持久连接了，也就是说，一次 TCP 连接要等到同域名下的所有资源请求/响应完毕了连接才会断开。恩！听起来情况好像好了很多，请求同域名下的 n 个资源，可以节约 (n-1)*RTT 的时间。&lt;/p&gt;
&lt;p&gt;下图展示了 HTTP/1.1 时请求一个 HTML 和一个 CSS 只需要经历一次 TCP 连接：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/2.png&quot; alt=&quot;[HTTP/1.1通信]&quot;&gt;&lt;/p&gt;
&lt;p&gt;但前面提到了，客户端发送一个请求只能请求一个资源，那么我们会产生如下疑问：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：为什么不一次发送多个请求？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上，HTTP/1.x 多次请求必须严格满足先进先出（FIFO）的队列顺序：发送请求，等待响应完成，再发送客户端队伍中的下一个请求。也就是说，每个 TCP 连接上只能同时有一个请求/响应。这样一来，服务器在完成请求开始回传到收到下一个请求之间的时间段处于空闲状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：有什么办法去改变吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“ HTTP 管道”技术实现了客户端向服务器并行发送多个请求。而服务器也是可以并行处理多个请求的。这么一来，不就可以多路复用了吗？但是， HTTP/1.x 有严格的串行返回响应机制，通过 TCP 连接返回响应时，就是必须 one by one ，前一个响应没有完成，下一个响应就不能返回。所以使用“ HTTP 管道”技术时，万一第一个响应时间很长，那么后面的响应处理完了也无法发送，只能被缓存起来，占用服务器内存，这就是传说中的“队首阻塞”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：既然一个 TCP 连接解决不了问题，那么可以开多个吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然一条通道（TCP 连接）通信效率低，那么就开多条通道呗！的确，HTTP/1.1 下，浏览器是支持同时打开多个 TCP 会话的（一般为6个）。一个 TCP 只能响应一个请求，那么六个 TCP 岂不就能达到六倍速？想想还有点儿小激动！但事情往往不是这么简单。开启多个 TCP 会话，无疑会给客户端和服务器都带来负担，比如缓存、CPU 时钟周期等，而且并行的 TCP 也会竞争带宽，并行能力也是受限制的，往往无法达到理想状态下的六倍速。&lt;/p&gt;
&lt;p&gt;可见，我们采取了许多方法，希望可以并行处理请求/响应，但都不能从根本上解决问题。况且，很多方法与 HTTP/1.x 的设计理念是背道而驰的，在 HTTP/1.x 下，却没有正确利用好 HTTP/1.x 的特性。&lt;/p&gt;
&lt;p&gt;于是， HTTP/2 带着提高性能的使命，应运而生。&lt;/p&gt;
&lt;h2 id=&quot;二、那么-HTTP-2-做了什么改变&quot;&gt;&lt;a href=&quot;#二、那么-HTTP-2-做了什么改变&quot; class=&quot;headerlink&quot; title=&quot;二、那么 HTTP/2 做了什么改变&quot;&gt;&lt;/a&gt;二、那么 HTTP/2 做了什么改变&lt;/h2&gt;&lt;p&gt;先对 HTTP/2 产生的影响有一个直观的认识：&lt;/p&gt;
&lt;p&gt;这是&lt;a href=&quot;https://http2.akamai.com/demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Akamai公司（全球最大的CDN服务商）的一个官方演示&lt;/a&gt;，HTTP/1.1 和 HTTP/2 请求300+张图片的对比：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/3.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;明显可以看出， HTTP/2 下加载时间为 HTTP/1.1 的 1/5 不到，那么 HTTP/2 到底为什么这么快？我们还是从它的新特性来进行全面的了解。&lt;/p&gt;
&lt;p&gt;以下着重介绍五个特性：二进制分帧层、多向请求与响应、优先级和依赖性、首部压缩、服务器推送。&lt;/p&gt;
&lt;h3 id=&quot;二进制分帧层（Binary-Framing-Layer）&quot;&gt;&lt;a href=&quot;#二进制分帧层（Binary-Framing-Layer）&quot; class=&quot;headerlink&quot; title=&quot;二进制分帧层（Binary Framing Layer）&quot;&gt;&lt;/a&gt;二进制分帧层（Binary Framing Layer）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;指的是位于套接字接口与应用可见的高层 HTTP API 之间的一个新机制：&lt;strong&gt;HTTP 的语义，包括各种动词、方法、首部，都不受影响，&lt;/strong&gt;不同的是传输期间对它们的&lt;strong&gt;编码方式&lt;/strong&gt;变了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在新引进的二进制分帧层上，HTTP/2 将所有传输的信息分割为更小的消息和帧，且都采用二进制格式的编码。如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/4.png&quot; alt=&quot;[二进制分帧]&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图上可以看到：在高层 HTTP API 和低层 TCP 连接中引入了一个二进制分帧层；在二进制分帧层上，HTTP/1.1 的一个 POST 请求（起始行、首部、实体正文），被分割成了更小的 HEADERS 帧和 DATA 帧。起始行、首部被分割到 HEADERS 帧，实体正文被分割到 DATA 帧。&lt;/p&gt;
&lt;p&gt;接下来，我们再深入地了解下这些被分割后的二进制帧是怎么工作的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP/2 同域名的所有通信都是在&lt;strong&gt;一个 TCP 连接&lt;/strong&gt;上完成，这个连接可以承载任意数量的&lt;strong&gt;双向数据流&lt;/strong&gt;。而每个数据流都是以&lt;strong&gt;消息&lt;/strong&gt;的形式发送的，消息由&lt;strong&gt;一个帧或多个帧&lt;/strong&gt;组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流：&lt;/strong&gt;已建立的连接上的双向字节流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息：&lt;/strong&gt;与逻辑消息对应的完整的一系列数据帧&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;帧：&lt;/strong&gt;HTTP/2 通信的最小单位，每个帧包含帧首部&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;好像很复杂的样子，咱们来捋一捋：&lt;/p&gt;
&lt;p&gt;TCP 连接在客户端和服务器间建立了一条运输的通道，可以双向通行，当一端要向另一端发送消息时，会先把这个消息拆分成几部分（帧），然后通过发起一个流对这些帧进行发送，最后在另一端将同一个流的帧重新组合。&lt;/p&gt;
&lt;p&gt;这个过程就好像我们在搬家的时候，会把一个桌子先拆散成零部件，然后通过几次的搬运，到了新家后，再把桌子重新拼装起来。&lt;/p&gt;
&lt;p&gt;下图展示了流、消息与帧的关系（注意到没，HEADERS 帧总是在最前面的）：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/5.png&quot; alt=&quot;[流、消息与帧]&quot;&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 规范一共规定了 10 种不同的帧， 其中最基础的两种分别对应于 HTTP/1.1 的 DATA 帧 和 HEADERS 帧 。&lt;/p&gt;
&lt;h3 id=&quot;多向请求与响应（多路复用）&quot;&gt;&lt;a href=&quot;#多向请求与响应（多路复用）&quot; class=&quot;headerlink&quot; title=&quot;多向请求与响应（多路复用）&quot;&gt;&lt;/a&gt;多向请求与响应（多路复用）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;多路复用允许同时通过单一的 TCP 连接发起&lt;strong&gt;多重的请求/响应消息&lt;/strong&gt;，客户端和服务器可以把 HTTP 消息分解为互不依赖的帧，然后乱序发送，最后再在另一端根据 &lt;strong&gt;Stream ID&lt;/strong&gt; 把它们重新组合起来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前面提到的一端发送消息会先对消息进行拆分，与此同时，也会给同一个消息拆分出来的帧带上一个编号（Stream ID），这样在另一端接收这些帧后就可以根据编号对它们进行组合。&lt;/p&gt;
&lt;p&gt;也正是有了这种编号的方式，当某一端发送消息时，可以发送多个消息拆分出来的多个帧（发起多个流），且这些帧可以乱序发送，因为这些帧都有自己的编号，它们之间互不影响。&lt;/p&gt;
&lt;p&gt;下图展示了单一的 TCP 连接上有多个请求/响应并行交换：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/6.png&quot; alt=&quot;[多路复用]&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图上可以看出，服务器向客户端发送 stream1 的多个 DATA 帧（说明 HEADERS 帧已发送完毕）与 stream3 的 HEADERS 帧和 DATA 帧 ，客户端正在向服务器发送 stream5 的 DATA 帧，可见，帧的发送是乱序的，且请求/响应是并行的。&lt;/p&gt;
&lt;p&gt;细心的你会发现，stream1 中有多个 DATA 帧，这是为什么呢？因为有 DATA 帧有长度的控制（2的14次方-1 字节，约 16383 个字节），应用数据过大时，会被拆分成多个 DATA 帧（还记得讲二进制分帧层展示的 HTTP/1.1 的请求被分割成更小的帧吗？DATA 帧就是用来携带应用数据的）。&lt;/p&gt;
&lt;h3 id=&quot;优先级和依赖性&quot;&gt;&lt;a href=&quot;#优先级和依赖性&quot; class=&quot;headerlink&quot; title=&quot;优先级和依赖性&quot;&gt;&lt;/a&gt;优先级和依赖性&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;新建流的终端可以在&lt;strong&gt;报头帧&lt;/strong&gt;中包含优先级信息来&lt;strong&gt;对流标记优先级&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;优先级的目的是允许终端表达它如何让对等端管理并发流时&lt;strong&gt;分配资源&lt;/strong&gt;。更重要的是，在发送容量有限时优先级能用来选择流来传输帧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP/2 中，流可以有一个优先级属性（即“权重”）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在 HEADERS 帧中包含优先级 priority 属性；&lt;/li&gt;
&lt;li&gt;可以单独通过 PRIORITY 帧专门设置流的优先级属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流的优先级用于发起流的终端（客户端/服务器）向对端（接收的一方）表达需要多大比重的资源支持，但这只是一个建议，不能强制要求对端一定会遵守。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;借助于 &lt;strong&gt;PRIORITY 帧&lt;/strong&gt;，客户端同样可以告知服务器当前的流依赖于其他哪个流。该功能让客户端能建立一个&lt;strong&gt;优先级“树”&lt;/strong&gt;，所有&lt;strong&gt;“子流”&lt;/strong&gt;会依赖于&lt;strong&gt;“父流”&lt;/strong&gt;的传输完成情况。&lt;/p&gt;
&lt;p&gt;不依赖任何流的流的流依赖为 &lt;strong&gt;0x0&lt;/strong&gt;。换句话说，不存在的流标识 0 组成了树的根。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们通过以下几个例子来理解下优先级“树”：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/9.png&quot; alt=&quot;[优先级和依赖性]&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一种情况：&lt;/strong&gt;流 A 和流 B 不依赖流，即为 0x0 ；流 A 的权重为 12 ，流 B 的权重为 4 ；则流 A 分配到的资源占比为 12/(12+4)= 12/16，流 B 分配到的资源占比为 4/(12+4)= 4/16。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二种情况：&lt;/strong&gt;流 D 为 0x0 ，流 C 依赖于流 D ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 也会被分配到全额资源（它是唯一依赖于流 D 的流，它的权重的大小此时并不重要，因为没有竞争的流）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三种情况：&lt;/strong&gt;流 D 为 0x0 ，流 C 依赖于流 D ，流 A 和 流 B 依赖于流 C ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 也会被分配到全额资源；等到流 C 关闭后，依赖于流 C 的流 A 和流 B 根据权重分配资源（3：1）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第四种情况：&lt;/strong&gt;流 D 为 0x0 ，流 C 和流 E 依赖于流 D ，流 A 和 流 B 依赖于流 C ；流 D 能被分配到全额资源，等到流 D 关闭后，依赖于流 D 的流 C 的流 E 和流 B 根据权重分配资源（1：1）；等到流 C 关闭后，依赖于流 C 的流 A 和流 B 根据权重分配资源（3：1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面说到，“可以单独通过 PRIORITY 帧专门设置流的优先级属性”，也就是说可以对原本没有优先级属性（包括依赖关系）的流进行设置，也可以对原本已有优先级属性的流进行修改。因此，优先级可以在传输过程中被动态的改变。&lt;/p&gt;
&lt;h3 id=&quot;首部压缩&quot;&gt;&lt;a href=&quot;#首部压缩&quot; class=&quot;headerlink&quot; title=&quot;首部压缩&quot;&gt;&lt;/a&gt;首部压缩&lt;/h3&gt;&lt;p&gt;HPACK 是专门为 HTTP/2 量身定制的压缩技术。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在服务器和客户端各维护一个&lt;strong&gt;“首部表”&lt;/strong&gt;，表中用索引代表&lt;strong&gt;首部名&lt;/strong&gt;，或者&lt;strong&gt;首部键 - 值对&lt;/strong&gt;，上一次发送两端都会记住已发送过哪些首部，下一次发送只需要传输差异的数据，相同的数据直接用索引表示即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体实现如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/7.png&quot; alt=&quot;[首部压缩]&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个过程比较容易理解：通过索引表的对应关系，来标记首部表中的不同信息。&lt;/p&gt;
&lt;p&gt;同一个域名下的请求/响应的首部往往有很多重复的信息，当客户端要向服务器发送某个请求时，通过查找索引表，发现该信息的首部已经发送过，此时服务器端的索引表也应该有对应的信息，则不需要再次发送；若查找发现部分首部信息不在索引表中，则发送该部分信首部息即可。&lt;/p&gt;
&lt;p&gt;如在上图的示例中，第二个请求只需要发送变化了的路径首部（:path），其他首部没有变化，就不用再发送了。&lt;/p&gt;
&lt;h3 id=&quot;服务器推送（server-Push）&quot;&gt;&lt;a href=&quot;#服务器推送（server-Push）&quot; class=&quot;headerlink&quot; title=&quot;服务器推送（server Push）&quot;&gt;&lt;/a&gt;服务器推送（server Push）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;服务器可以对一个客户端请求发送多个响应。也就是说，除了对最初请求的响应外，服务器还可以&lt;strong&gt;额外向客户端推送资源&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在了解“二进制分帧层”的时候我们提到，“HTTP/2 规范规定了10种不同的帧”，其中有一种名为“PUSH_PROMISE”，就是在服务器推送的时候发送的。当客户端解析帧时，发现它是一个 PUSH_PROMISE 类型，便会准备接收服务端要推送的流。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/http2-1/8.png&quot; alt=&quot;[服务器推送]&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，当服务器响应了 HTML 请求后，可以知道客户端接下来要发送 JS 请求、CSS 请求，于是服务器通过推送的方式（主动发起新流，而不是等客户端请求然后再响应），向客户端发出要约（PUSH_PROMISE）。当然，客户端可以选择缓存这个资源，也可以拒绝这个资源。&lt;/p&gt;
&lt;p&gt;这个过程有点类似于我们常用的资源内嵌的手段：将一个图片资源转为 base64 编码嵌入 CSS 文件中，当客户端发起 CSS 请求时，也会请求该图片。因此在响应 CSS 请求后，服务器会强制（客户端是无法拒绝的）向客户端发送图片响应。但内嵌资源是无法被单独缓存的，而服务器推送的资源是可以被缓存的。&lt;/p&gt;
&lt;p&gt;需要注意，服务器必须遵循请求-响应的循环，只能借着请求的响应来推送资源，也就是说，如果客户端没有发送请求，服务器是没法先手推送的。而且，如上图中 stream4 ，PUSH_PROMISE 帧必须在返回响应（DATA 帧）之前发送，因为万一客户端请求的恰好是服务器打算推送的资源，那传输过程就会混乱了。&lt;/p&gt;
&lt;p&gt;注：由客户端发起的流 Stream ID 为奇数，由服务器发起的流 Stream ID 为偶数，回顾上面的图就能发现啦！&lt;/p&gt;
&lt;h2 id=&quot;三、小结&quot;&gt;&lt;a href=&quot;#三、小结&quot; class=&quot;headerlink&quot; title=&quot;三、小结&quot;&gt;&lt;/a&gt;三、小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTTP/2 通过二进制分帧与多路复用机制，有效解决了 HTTP/1.x 下请求/响应延迟的问题&lt;/li&gt;
&lt;li&gt;新的首部压缩技术使 HTTP/1.x 首部信息臃肿的问题得到解决&lt;/li&gt;
&lt;li&gt;优先级和依赖性与服务器推送使得我们可以更有效地利用好这个单一的 TCP 连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见，HTTP/2 在 HTTP/1.1 的基础上有了一个较大的性能提升。这时候你会发现，我们针对 HTTP/1.x 的一些优化手段（如上文提到的资源内嵌）似乎有点不适用了。&lt;/p&gt;
&lt;p&gt;下一次的文章《前端开发与 HTTP/2 的羁绊——性能篇》，将和大家一起深入探讨 HTTP/2 下的性能优化问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;文章撰写参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书籍：&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000545/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《High Performance Browser Networking》(Ilya Grigorik)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译本：&lt;a href=&quot;http://www.ituring.com.cn/book/1194&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Web性能权威指南》（李松峰）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博文：&lt;a href=&quot;http://www.blogjava.net/yongboy/archive/2015/03/19/423611.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTTP/2笔记之流和多路复用》(聂永)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博文：&lt;a href=&quot;http://www.2cto.com/kf/201510/446824.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Web性能优化与Http2》（孙飞）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;博文：&lt;a href=&quot;https://imququ.com/post/header-compression-in-http2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTTP/2 头部压缩技术介绍》（屈光宇）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译本：&lt;a href=&quot;http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《HTTP/2.0中文翻译（FEX）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译本：&lt;a href=&quot;https://www.gitbook.com/book/ye11ow/http2-explained/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《http2讲解》（ye11ow）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图片来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;书籍：&lt;a href=&quot;http://chimera.labs.oreilly.com/books/1230000000545/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《High Performance Browser Networking》(Ilya Grigorik)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译本：&lt;a href=&quot;http://www.ituring.com.cn/book/1194&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Web性能权威指南》（李松峰）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如有错漏，欢迎斧正。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTTP/2 是万维网（WWW）基础协议 HTTP 16年来的首次重大升级。共经历了18版草案（00-17），于2015年2月18日正式定稿，2015年5月14日 HTTP/2 正式版发布，正式版 HTTP/2 规格标准叫做 RFC7540 。&lt;/
    
    </summary>
    
    
      <category term="HTTP/2" scheme="http://aotu.io/tags/HTTP-2/"/>
    
  </entry>
  
  <entry>
    <title>前端优化不完全指南</title>
    <link href="http://aotu.io/notes/2016/03/16/optimization/"/>
    <id>http://aotu.io/notes/2016/03/16/optimization/</id>
    <published>2016-03-16T15:26:12.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;篇幅可能有点长，我想先聊一聊阅读的方式，我希望你阅读的时候，能够把我当作你的竞争对手，你的梦想是超越我。你想超越我，就得了解我懂什么对吧，好，开始阅读~ ~ 哈哈哈 ~ ~ ~&lt;/p&gt;
&lt;p&gt;历时144000000毫秒出山的前端优化篇，若你问我有什么感悟？&lt;br&gt;那我告诉你，看到毫秒啊，火箭啊，这些与优化相关的词，都有莫名的亲切感。&lt;br&gt;本文主要从&lt;strong&gt;工作效率&lt;/strong&gt;、&lt;strong&gt;速度性能&lt;/strong&gt;、&lt;strong&gt;稳定性&lt;/strong&gt;、&lt;strong&gt;响应式&lt;/strong&gt;、&lt;strong&gt;兼容性&lt;/strong&gt;、&lt;strong&gt;搜索SEO&lt;/strong&gt;、&lt;strong&gt;信息无障碍&lt;/strong&gt;等方面进行讲解。&lt;br&gt;前端优化是一个让人技术提升的point，希望你也能从这里学到一些东西。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-工作效率&quot;&gt;&lt;a href=&quot;#1-工作效率&quot; class=&quot;headerlink&quot; title=&quot;1 工作效率&quot;&gt;&lt;/a&gt;1 工作效率&lt;/h2&gt;&lt;p&gt;你是否经常处于这样的场景：从早上忙到晚上八九点，一会与产品经理沟通，一会在部门群聊一下新奇的东西，一会被设计美眉纠缠住拖不了身，有时还开不了部门的会议因为页面急着上线，然后继续加班~~~&lt;/p&gt;
&lt;p&gt;怎么提高我们的工作效率？下面从四个方面讲解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间管理&lt;/li&gt;
&lt;li&gt;利用工具&lt;/li&gt;
&lt;li&gt;经验和阅历 &lt;/li&gt;
&lt;li&gt;使用新技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-1-时间管理&quot;&gt;&lt;a href=&quot;#1-1-时间管理&quot; class=&quot;headerlink&quot; title=&quot;1.1 时间管理&quot;&gt;&lt;/a&gt;1.1 时间管理&lt;/h3&gt;&lt;p&gt;凡是时间管理，都会联想到计划这个词。我们先看看别人家的月计划表和周计划表，之所以周计划表为空，是希望你能把它下载并打印出来，行动从计划开始：&lt;br&gt;月计划表：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;yuejihua&quot; class=&quot;yuejihua&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/月计划.jpg&quot; alt=&quot;月计划&quot;&gt;&lt;/p&gt;&lt;br&gt;周计划表：&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;zhoujihua&quot; class=&quot;zhoujihua&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/周计划.jpg&quot; alt=&quot;月计划&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;当然计划不要做得过于琐碎，且不要占用自己太多时间。做好计划之余，在执行过程中需要注意几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正确的时间点做正确的事，比如早上比较精神，可选择比较难的项目开展，可容易达到高效率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;专注一件事情，尽量不要被琐碎或其他事情影响，而且不要频繁地去看计划表，最好是做完一件再去看，否则容易焦虑导致无法专心&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-利用工具&quot;&gt;&lt;a href=&quot;#1-2-利用工具&quot; class=&quot;headerlink&quot; title=&quot;1.2 利用工具&quot;&gt;&lt;/a&gt;1.2 利用工具&lt;/h3&gt;&lt;p&gt;第一样工具，比如程序员杯子：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;gitmakebei&quot; class=&quot;gitmakebei&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/git马克杯.jpg&quot; alt=&quot;git马克杯&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;利用工具有什么好处呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少重复性工作。&lt;/li&gt;
&lt;li&gt;减少繁琐工作流程，一键式化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-2-1-编辑器&quot;&gt;&lt;a href=&quot;#1-2-1-编辑器&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 编辑器&quot;&gt;&lt;/a&gt;1.2.1 编辑器&lt;/h4&gt;&lt;p&gt;选择好一个前端编辑器是比较重要的。目前sublime、webstorm和vim是比较常见的，建议不使用Dreamweaver。&lt;br&gt;sublime目前还是不错的选择，可以安装插件，比如BracketHighlighter 高亮显示、JsFormat、Emmet html/CSS快速编辑以及DocBlockr插件，快速输入jsDoc注释等，还可以自定义代码段snippets。&lt;br&gt;无论你使用哪种编辑器，你需要的是&lt;strong&gt;熟悉这个编辑器并熟练它的快捷键&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-2-2-浏览器开发者工具&quot;&gt;&lt;a href=&quot;#1-2-2-浏览器开发者工具&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 浏览器开发者工具&quot;&gt;&lt;/a&gt;1.2.2 浏览器开发者工具&lt;/h4&gt;&lt;p&gt;作为前端人员，首选的浏览器当然是chrome。推荐阅读&lt;a href=&quot;http://web.jobbole.com/82558/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome开发者工具不完全指南&lt;/a&gt;一系列文章，它从一些基础的功能开始到它的一些高级性能分析器（Timeline、Profiles），熟悉chrome对我们的开发工作有很大的作用。&lt;/p&gt;
&lt;h4 id=&quot;1-2-3-其他常用工具&quot;&gt;&lt;a href=&quot;#1-2-3-其他常用工具&quot; class=&quot;headerlink&quot; title=&quot;1.2.3 其他常用工具&quot;&gt;&lt;/a&gt;1.2.3 其他常用工具&lt;/h4&gt;&lt;p&gt;切图工具：&lt;a href=&quot;http://jingyan.baidu.com/article/e73e26c0c9971524adb6a7a6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;photoshop cc切图之智能切图&lt;/a&gt;、 &lt;a href=&quot;http://www.cutterman.cn/v2/cutterman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cutterman&lt;/a&gt;&lt;br&gt;量色、测距工具：FastStone Capture、&lt;a href=&quot;http://www.getmarkman.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;马克鳗 - 设计稿标注&lt;/a&gt;&lt;br&gt;图片压缩：&lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tinypng&lt;/a&gt;、&lt;a href=&quot;http://zhitu.isux.us/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;智图&lt;/a&gt;&lt;br&gt;生成雪碧图：&lt;a href=&quot;http://www.spritebox.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spritebox&lt;/a&gt;、&lt;a href=&quot;http://www.cn.spritegen.website-performance.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Sprite Generator&lt;/a&gt;、cssgaga&lt;br&gt;调试工具：Fiddler 、weinre 、微信调试工具；&lt;/p&gt;
&lt;h4 id=&quot;1-2-4-前端工程化&quot;&gt;&lt;a href=&quot;#1-2-4-前端工程化&quot; class=&quot;headerlink&quot; title=&quot;1.2.4 前端工程化&quot;&gt;&lt;/a&gt;1.2.4 前端工程化&lt;/h4&gt;&lt;p&gt;凡是重复的，必须使用工具自动完成。&lt;br&gt;工具众多，我们就有一种想法，能不能有一种工具能帮我们自动生成雪碧图、 css压缩、图片压缩等等，然后就出现了前端工程化。前端工程化一般可分为五个步骤：&lt;br&gt;（1） 初始，生成基础目录结构和样式库。&lt;br&gt;（2） 开发，实时预览、预编译。&lt;br&gt;（3） 构建，预编译、合并、压缩。&lt;br&gt;（4） 发布，将构建后静态文件发布上线。&lt;br&gt;（5） 打包，资源路径转换，源码打包 。&lt;/p&gt;
&lt;p&gt;这里推荐一个工具&lt;a href=&quot;http://fis.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fis&lt;/a&gt;，解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题。还有凹凸实验室研发的&lt;a href=&quot;http://aotu.io/athena/&quot;&gt;athena&lt;/a&gt;，O2Team构建项目流程工具，可以生成相应目录和代码，同时对项目进行编译， 一次安装，到处运行。&lt;/p&gt;
&lt;h3 id=&quot;1-3-阅历和经验&quot;&gt;&lt;a href=&quot;#1-3-阅历和经验&quot; class=&quot;headerlink&quot; title=&quot;1.3 阅历和经验&quot;&gt;&lt;/a&gt;1.3 阅历和经验&lt;/h3&gt;&lt;p&gt;我所理解的程序员兼并聪明以及“懒惰”精神，推崇懒惰式开发，即把问题理解清楚，确保将要写的代码能真正的解决问题，这将会避免之后写出大量无用的代码，正所谓“懒”出效率。&lt;br&gt;我们的阅历和经验可以大大提高开发效率，思考代码的时间增加从而选出最优方案，因此写代码速度更快以及代码长度更短，对问题的透彻理解使调试代码的速度也更快。&lt;br&gt;根据阅历和经验，或借助其他人的，我们进行整理从而形成自己或团队的规范，这可大大提高我们的写码速度。&lt;/p&gt;
&lt;h3 id=&quot;1-4-使用新技术&quot;&gt;&lt;a href=&quot;#1-4-使用新技术&quot; class=&quot;headerlink&quot; title=&quot;1.4 使用新技术&quot;&gt;&lt;/a&gt;1.4 使用新技术&lt;/h3&gt;&lt;p&gt;使用新技术如何提高我们的工作效率。一贯我们都使用我们熟悉的技术去开发一个技术处理方案，毕竟学习新技术的时间成本还是存在的。但是还是不能忽略一些新技术的存在，一般新技术包含了一些很棒的新特性，可以更加方便的实现很多复杂的操作，提高开发人员的效率，比如ES6。&lt;strong&gt;用你的慧眼去积累新技术，会派上用场的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;2-速度性能&quot;&gt;&lt;a href=&quot;#2-速度性能&quot; class=&quot;headerlink&quot; title=&quot;2 速度性能&quot;&gt;&lt;/a&gt;2 速度性能&lt;/h2&gt;&lt;p&gt;为什么需要前端性能优化？性能优化可以从哪几个方面入手？&lt;br&gt;遇到一个页面，5秒还没加载完成，那个菊花转啊转，或者页面完全白屏，那简直把人逼疯了。从用户体验的角度看，前端性能优化是非常有必要的。网页最长加载时间一般不能超过3秒。&lt;br&gt;首先我们需要确定网页的性能指标，可量化的目标以及可持续跟踪的优化数据是性能优化工作得以持续进行的保障，同时也是源动力！比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首屏加载时长&lt;/li&gt;
&lt;li&gt;DOM加载时长&lt;/li&gt;
&lt;li&gt;页面白屏时长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们一般通过三种方式来检验我们的网页性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过浏览器开发者工具或浏览器插件、Fiddler、Charles等查看页面加载情况。原理是通过追踪HTTP请求与响应的时间，以图形的方式列出所有资源的下载情况。缺点是人为操作，难以实现批量测试与统计。&lt;/li&gt;
&lt;li&gt;在页面中引入额外的代码钩子来记录时间等相关数据。缺点是加重了开发者与测试人员的负担，还有可能因为检测代码本身的潜在问题影响页面的性能。如果好一点的话，会接入一个性能数据收集系统，采取并分析数据。&lt;/li&gt;
&lt;li&gt;使用第三方的工具如Page Speed、YSlow和WebPagetest，能够选择在不同浏览器和不同地域进行测试，并且给出各方面的评分以及提供一些优化建议。但某些服务需要排队等待，并且难以实现批量测试与统计。下面是使用WebPagetest测试京东首页的情况：&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;webpagetest&quot; class=&quot;webpagetest&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/webpagetest.jpg&quot; alt=&quot;webpagetest&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可喜可贺，W3C推出了一套&lt;strong&gt;&lt;a href=&quot;https://www.w3.org/wiki/Web_Performance/Publications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;性能API标准&lt;/a&gt;&lt;/strong&gt;，目的是简化开发者对网站性能进行精确分析与控制的过程，最终实现性能的提高。比如通过Navigation Timing记录的关键时间点来统计页面完成所用的时间，部分使用方法：    &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timing = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.performance.timing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domLoading  &lt;span class=&quot;comment&quot;&gt;//浏览器开始解析 HTML 文档第一批收到的字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domInteractive  &lt;span class=&quot;comment&quot;&gt;// 浏览器完成解析并且所有 HTML 和 DOM 构建完毕&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domContentLoadedEventStart &lt;span class=&quot;comment&quot;&gt;//DOM 解析完成后，网页内资源加载开始的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domContentLoadedEventEnd &lt;span class=&quot;comment&quot;&gt;// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domComplete &lt;span class=&quot;comment&quot;&gt;//网页上所有资源（图片等）下载完成,且准备就绪的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;持续追踪性能数据，要选择合适的页面性能测量工具或API，一旦选定后，不再更换，以保证历史数据的可参照性。&lt;/strong&gt;我们还要形成一种意识，达成性能联盟小组，对于重要的业务或者页面，一定要从性能的角度考虑问题，有理有据地拒绝有损于前端性能的业务需求或改动。&lt;/p&gt;
&lt;p&gt;人人都知道雅虎军规，那我就来个截图吧！&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;yahu35jungui&quot; class=&quot;yahu35jungui&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/雅虎35条军规.jpg&quot; alt=&quot;雅虎35条军规&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下，我们从服务端、网络、客户端三个方面来一一突破速度性能的提升。&lt;/p&gt;
&lt;h3 id=&quot;2-1-没事少烦我-服务端&quot;&gt;&lt;a href=&quot;#2-1-没事少烦我-服务端&quot; class=&quot;headerlink&quot; title=&quot;2.1 没事少烦我-服务端&quot;&gt;&lt;/a&gt;2.1 没事少烦我-服务端&lt;/h3&gt;&lt;h4 id=&quot;2-1-1-使用内容分发网络（Content-Delivery-Network，CDN）&quot;&gt;&lt;a href=&quot;#2-1-1-使用内容分发网络（Content-Delivery-Network，CDN）&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 使用内容分发网络（Content Delivery Network，CDN）&quot;&gt;&lt;/a&gt;2.1.1 使用内容分发网络（Content Delivery Network，CDN）&lt;/h4&gt;&lt;p&gt;通过在现有的Internet中增加一层新的网络架构，将网站的内容发布到最接近用户的 cache服务器内，通过DNS负载均衡的技术，&lt;strong&gt;判断用户来源就近访问cache服务器取得所需的内容&lt;/strong&gt;。深圳用户访问遥远的美国服务器，当然不理想了。把静态内容分布到CDN可以减少用户响应时间20%或更多。&lt;/p&gt;
&lt;h4 id=&quot;2-1-2-静态资源缓存，移动端离线缓存&quot;&gt;&lt;a href=&quot;#2-1-2-静态资源缓存，移动端离线缓存&quot; class=&quot;headerlink&quot; title=&quot;2.1.2 静态资源缓存，移动端离线缓存&quot;&gt;&lt;/a&gt;2.1.2 静态资源缓存，移动端离线缓存&lt;/h4&gt;&lt;p&gt;如果可以减少服务端的负担，在应用离线时可使用资源或加载资源更快，岂不乐哉？&lt;br&gt;缓存利用可包括：添加 Expires 头，配置 ETag，使 Ajax 可缓存等。其实，恰当的缓存设置可以大大的减少 HTTP请求，也可以节省带宽 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置 ETag：即If-None-Match: 上次 ETag 的内容。浏览器会发出请求询问服务端，资源是否过期；服务端发现,没有过期，直接返回一个状态码为 304、正文为空的响应，告知浏览器使用本地缓存；如果资源有更新，服务端返回状态码 200、Etag 和正文。这个过程被称之为 HTTP 的协商缓存，通常也叫做弱缓存。&lt;/li&gt;
&lt;li&gt;添加 Expires 头：服务端通过响应头告诉浏览器，在什么时间之前（Expires）或在多长时间之内（Cache-Control: Max-age=xxx），不要再请求服务器了。这个机制我们通常称之为 HTTP 的强缓存。一般会对 CSS、JS、图片等资源使用强缓存，而入口文件（HTML）一般使用协商缓存或不缓存。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppCache：&lt;/p&gt;
&lt;p&gt;  AppCache主要利用manifest 文本文件，告知浏览器被缓存的内容以及不缓存的内容。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;lixiancunchu&quot; class=&quot;lixiancunchu&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/离线存储.jpg&quot; alt=&quot;离线存储&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;  manifest 文件可分为三个部分：&lt;br&gt;  （1） CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存，等价于CACHE&lt;br&gt;  （2） NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存&lt;br&gt;  （3） FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面    &lt;/p&gt;
&lt;p&gt;  使用AppCache方案的步骤：&lt;br&gt;  （1） 整理出需要缓存的静态文件列表，如juqery.js和gb.css。&lt;br&gt;  （2） 配置服务器支持。&lt;br&gt;  （3） 确定内容更新机制和浏览器兼容方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;LocalStorage：用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-省着点用-网络&quot;&gt;&lt;a href=&quot;#2-2-省着点用-网络&quot; class=&quot;headerlink&quot; title=&quot;2.2 省着点用-网络&quot;&gt;&lt;/a&gt;2.2 省着点用-网络&lt;/h3&gt;&lt;h4 id=&quot;2-2-1-减少请求数&quot;&gt;&lt;a href=&quot;#2-2-1-减少请求数&quot; class=&quot;headerlink&quot; title=&quot;2.2.1 减少请求数&quot;&gt;&lt;/a&gt;2.2.1 减少请求数&lt;/h4&gt;&lt;p&gt;可通过以下方式减少请求数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小图片合并雪碧图；&lt;/li&gt;
&lt;li&gt;JS、CSS文件选择性合并；&lt;/li&gt;
&lt;li&gt;避免重复的资源请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;减少请求数对于速度优化来说最重要最有效的，特别是网络差的用户。一个完整的请求需要经过域名解析以及DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据的过程；每个请求都需要携带数据，因此每个请求都需要占用带宽；浏览器进行并发请求的请求数是有上限的。请求多了的情况，明显增加了网页的响应时间。一个页面由多个模块拼接而成，几个模块中请求了同样的资源时，就会导致资源的重复请求。&lt;/p&gt;
&lt;h4 id=&quot;2-2-2-减少文件大小（减少请求带宽）&quot;&gt;&lt;a href=&quot;#2-2-2-减少文件大小（减少请求带宽）&quot; class=&quot;headerlink&quot; title=&quot;2.2.2 减少文件大小（减少请求带宽）&quot;&gt;&lt;/a&gt;2.2.2 减少文件大小（减少请求带宽）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;压缩CSS、JS、图片；&lt;/li&gt;
&lt;li&gt;尽可能控制DOM节点数；&lt;/li&gt;
&lt;li&gt;精简css、 JavaScript，移除注释、空格、重复css和脚本。&lt;/li&gt;
&lt;li&gt;开启Gzip，Gzip的思想就是把文件先在服务器端进行压缩，且压缩率达到85%，然后再传输，传输完毕后浏览器会 重新对压缩过的内容进行解压缩，并执行。。好处在于Gzip的支持已经很好，且爬虫可识别，压缩率达到66%-85%显著减少了文件传输的大小。另外，gzip对pdf文件的压缩效果不大，而且会浪费CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-2-3-合理使用静态资源域名&quot;&gt;&lt;a href=&quot;#2-2-3-合理使用静态资源域名&quot; class=&quot;headerlink&quot; title=&quot;2.2.3 合理使用静态资源域名&quot;&gt;&lt;/a&gt;2.2.3 合理使用静态资源域名&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;域名的要求是短小且独立&lt;/strong&gt;。&lt;br&gt;短小可以减少头部开销，因为域名越短请求头起始行的 URI 就越短。之所以要求独立，因为独立域名不会共享主域的 Cookie，可以有效减小请求头大小，这个策略一般称之为 Cookie-Free Domain；另外一个原因是浏览器对相同域名的并发连接数限制，一般允许同域名并发 6~8 个连接，域名不是越多越好，每个域名的第一个连接都要经历 DNS 查询（DNS Lookup），导致会耗费一定的时间，控制域名使用在2-4个之间。另外注意：同一静态资源在不同页面被散列到不同子域下，会导致无法利用 HTTP 缓存。&lt;/p&gt;
&lt;h4 id=&quot;2-2-4-使用HTTP-2&quot;&gt;&lt;a href=&quot;#2-2-4-使用HTTP-2&quot; class=&quot;headerlink&quot; title=&quot;2.2.4 使用HTTP 2&quot;&gt;&lt;/a&gt;2.2.4 使用HTTP 2&lt;/h4&gt;&lt;p&gt;HTTP 2 相比 HTTP 1.1 的更新大部分集中于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：多路复用很好地解决如何让重要资源尽快加载这个问题。同域名下或者不同域但是同时满足同一个 IP以及使用同一个证书的这两个条件中的所有通信都在&lt;strong&gt;单个连接&lt;/strong&gt;上完成，此连接上同时打开任意数量的双向数据流（ HTTP 1.1 有连接数限制）。使用多域名加上相同的 IP 和证书部署 Web 服务有特殊的意义：让支持 HTTP/2 的终端只建立一个连接，用上 HTTP/2 协议带来的各种好处；而只支持 HTTP/1.1 的终端则会建立多个连接，达到同时更多并发请求的目的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEAD 压缩&lt;/strong&gt;：HTTP/2 将请求和响应数据分割为更小的帧，并对它们采用二进制编码（ Binary Framing ）。在 HTTP/1 中，HTTP 请求和响应都是由「状态行、请求 / 响应头部、消息主体」三部分组成，状态行和头部却没有经过任何压缩，直接以纯文本传输。如下图的比较：&lt;br&gt; &lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;http2&quot; class=&quot;http2&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/http2.png&quot; alt=&quot;http2&quot;&gt;&lt;/p&gt;&lt;br&gt;在 HTTP/2 中，每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求优先级&lt;/strong&gt;：服务器可以根据流的优先级，控制资源分配(CPU、内存、带宽)，而在响应数据准备好之后，优先将最高优先级的帧发送给客户端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器推送&lt;/strong&gt;：启动Server Push，意味着服务端可以在发送页面HTML时主动推送其它资源，有自己独立的URL，可以被浏览器缓存；如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-2-学会持家，让家变得简洁漂亮-客户端&quot;&gt;&lt;a href=&quot;#2-2-学会持家，让家变得简洁漂亮-客户端&quot; class=&quot;headerlink&quot; title=&quot;2.2 学会持家，让家变得简洁漂亮-客户端&quot;&gt;&lt;/a&gt;2.2 学会持家，让家变得简洁漂亮-客户端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用外链CSS和JS，CSS放头，JS放尾，防止阻塞以减少对并发下载的影响，尽早刷新文档的输出。&lt;/li&gt;
&lt;li&gt;html的代码优化，如：&lt;ul&gt;
&lt;li&gt;避免空的图片src；&lt;/li&gt;
&lt;li&gt;协议自适应，减少html文件大小，将&lt;a href=&quot;https://和http://都替换成//。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://和http://都替换成//。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;css的代码优化，如：&lt;ul&gt;
&lt;li&gt;建议使用类选择器，访问比较快；&lt;/li&gt;
&lt;li&gt;不建议使用很长的base64；&lt;/li&gt;
&lt;li&gt;避免CSS表达式；&lt;/li&gt;
&lt;li&gt;避免使用Filters。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;js的代码优化，如：&lt;ul&gt;
&lt;li&gt;避免使用eval和with；&lt;/li&gt;
&lt;li&gt;减少作用域链查找；&lt;/li&gt;
&lt;li&gt;减少DOM访问，尽量缓存DOM；&lt;/li&gt;
&lt;li&gt;充分利用事件委托；&lt;/li&gt;
&lt;li&gt;减少Repaint（重绘）和Reflow（重排）最好通过批量更新元素减少重排次数，如设置类class统一更新样式。&lt;/li&gt;
&lt;li&gt;元素将会触发多次页面重排的情况下使用 DOM fargment 在内存中创建完整的 DOM 节点，然后再一次性添加到 DOM 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图片格式的选择：&lt;ul&gt;
&lt;li&gt;颜色较为丰富的图片而且文件比较大的（40KB - 200KB）或者有内容的图片优先考虑 jpg；图标等颜色比较简单、文件体积不大、起修饰作用的图片，优先考虑使用 PNG8 格式；图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式。&lt;/li&gt;
&lt;li&gt;条件允许的，使用新格式WEBP和BPG。&lt;/li&gt;
&lt;li&gt;用SVG和ICONFONT代替简单的图标。&lt;/li&gt;
&lt;li&gt;用&lt;a href=&quot;https://isux.tencent.com/font-spider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字蛛&lt;/a&gt;来代替艺术字体切图，它可剔除没有使用的字符，从而解决中文字体过大的问题，并编码成跨平台兼容的格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合理分配资源加载时间，按需加载，包括CSS、JS文件以及图片、业务模块等。&lt;br&gt;根据我们网页最初加载需要的最小内容集推断其他内容延迟加载；无条件提前加载公共内容或根据用户行为推断提前加载某些内容，如根据搜索框输入的文字来判断加载的内容。加载机制如下：&lt;ul&gt;
&lt;li&gt;预加载&lt;/li&gt;
&lt;li&gt;Dom Ready后加载&lt;/li&gt;
&lt;li&gt;onLoad后加载&lt;/li&gt;
&lt;li&gt;滚动加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少DNS 查询：DNS 查询一般需要几毫秒到几百毫秒，移动环境下会更慢。我们可以预先读取DNS，减少用户等待时间。&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;dns_prefetch&quot; class=&quot;dns_prefetch&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/dns_prefetch.jpg&quot; alt=&quot;dns_prefetch&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-稳定性&quot;&gt;&lt;a href=&quot;#3-稳定性&quot; class=&quot;headerlink&quot; title=&quot;3 稳定性&quot;&gt;&lt;/a&gt;3 稳定性&lt;/h2&gt;&lt;p&gt;稳定性的第一要求是可用。最起码的要求是页面得出来，要不然没法用了。&lt;br&gt;其次讲究的是页面的可维护性，假如页面挂了，多久可以恢复过来，另外考虑页面挂的期间是否可以采取静态页面处理等方式。&lt;br&gt;页面的稳定性其实和前端安全挂钩，即使页面可以出来了，但是不能保证不会被黑掉，下文从前端安全的方面讲解。&lt;/p&gt;
&lt;h3 id=&quot;3-1-常见攻击：&quot;&gt;&lt;a href=&quot;#3-1-常见攻击：&quot; class=&quot;headerlink&quot; title=&quot;3.1 常见攻击：&quot;&gt;&lt;/a&gt;3.1 常见攻击：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;XSS (Cross Site Script) ，跨站脚本攻击，往Web页面里插入恶意html代码。特点是攻击者的代码必须能获取用户浏览器端的执行权限，要杜绝此类攻击出现可以在入口和出口进行严格的过滤。&lt;br&gt;  三种类型：&lt;br&gt;  （1） 反射型XSS：一次性；将包含注入脚本的恶意链接发送给受害者。&lt;br&gt;  （2） 持久型XSS：用户输入的数据“存储”在服务器端，比如一条包含XSS代码的留言。&lt;br&gt;  （3） DOM XSS：使用一些eval等有输出的语句意味着多了一份被XSS的风险。&lt;/p&gt;
&lt;p&gt;  应对策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当恶意代码值被作为某一标签的内容显示：在不需要html输入的地方对html 标签及一些特殊字符( ” &amp;lt; &amp;gt; &amp;amp; 等等 )做过滤，将其转化为不被浏览器解释执行的字符。&lt;/li&gt;
&lt;li&gt;当恶意代码被作为某一标签的属性显示，通过用 “将属性截断来开辟新的属性或恶意方法：属性本身存在的 单引号和双引号都需要进行转码；对用户输入的html 标签及标签属性做白名单过滤，也可以对一些存在漏洞的标签和属性进行专门过滤。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSRF(Cross Site Request Forgery)，跨站点伪造请求，通过伪造连接请求在用户不知情的情况下，让用户以自己的身份来完成攻击者需要达到的一些目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cookie劫持，通过获取页面的权限，在页面中写一个简单的到恶意站点的请求，并获取用户的cookie登录某些站点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于crsf 和cookie 劫持的策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 referer、token 或者 验证码 来检测用户提交。&lt;/li&gt;
&lt;li&gt;尽量不要在页面的链接中暴露用户隐私信息。&lt;/li&gt;
&lt;li&gt;对于用户修改删除等操作最好都使用post 操作 。&lt;/li&gt;
&lt;li&gt;避免全站通用的cookie，严格设置cookie的域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-2-数据通道安全&quot;&gt;&lt;a href=&quot;#3-2-数据通道安全&quot; class=&quot;headerlink&quot; title=&quot;3.2 数据通道安全&quot;&gt;&lt;/a&gt;3.2 数据通道安全&lt;/h3&gt;&lt;p&gt;国内的众多网站都没有实现全站HTTPS。这是目前为止最重要的一步，所有的数据在发送之前就会被加密，攻击者无法查看或篡改数据包的内容。HTTPS可以理解为HTTP+SSL/TLS，通过数据加密、校验数据完整性和身份认证三种机制来保障安全。HTTPS的缺点是网站在加上TLS证书时，可能导致RTT往返时延增加，并且 HTTPS通信过程的非对称和对称加解密计算会产生更多的服务器性能和时间上的消耗，但是这是可以优化的，这里就不细说了。&lt;/p&gt;
&lt;h3 id=&quot;3-3浏览器安全&quot;&gt;&lt;a href=&quot;#3-3浏览器安全&quot; class=&quot;headerlink&quot; title=&quot;3.3浏览器安全&quot;&gt;&lt;/a&gt;3.3浏览器安全&lt;/h3&gt;&lt;h4 id=&quot;3-3-1-同源策略&quot;&gt;&lt;a href=&quot;#3-3-1-同源策略&quot; class=&quot;headerlink&quot; title=&quot;3.3.1 同源策略&quot;&gt;&lt;/a&gt;3.3.1 同源策略&lt;/h4&gt;&lt;p&gt;首先了解一下同源策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源指的是有相同的HOST、相同的协议、相同的端口。&lt;/li&gt;
&lt;li&gt;同源策略以源为单位，把资源天然分隔，保护了用户的信息安全。&lt;/li&gt;
&lt;li&gt;绕过同源策略让javascript访问其他源的资源的方法，如：JSONP、CORS、flash等。&lt;/li&gt;
&lt;li&gt;同源策略不是绝对安全的，面对很多攻击是无能为力的，比如XSS，因为此时攻击者就在同源之内。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不建议使用JSONP，因为JSONP通常在脚本中写一个回调函数，然后把回调函数的名字写在请求的URL中，因此如果请求数据的服务器被黑了，那么黑客就能在返回的数据中植入恶意代码，从而窃取用户的隐私信息。&lt;/p&gt;
&lt;p&gt;跨域资源共享CORS允许资源提供方在响应头中加入一个特殊的标记，使你能通过XHR来获取、解析并验证数据。这样就能避免恶意代码在你的应用中执行。在响应头中加入的标记如下：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Access&lt;/span&gt;-Control-Allow-Origin: allowed origins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果对Access–Control-Allow-Origin设置为*其实是比较危险的，如果没有携带会话认证意味着信息被公开在全网，建议设置具体的域名，而且跨域的时候记得带上session id；严格审查请求信息，比如请求参数，还有http头信息，因为 http头可以伪造。&lt;/p&gt;
&lt;h4 id=&quot;3-3-2-CSP-Content-Security-Policy&quot;&gt;&lt;a href=&quot;#3-3-2-CSP-Content-Security-Policy&quot; class=&quot;headerlink&quot; title=&quot;3.3.2 CSP(Content Security Policy)&quot;&gt;&lt;/a&gt;3.3.2 CSP(Content Security Policy)&lt;/h4&gt;&lt;p&gt;CSP指定网站上所有脚本和图片等资源的源站点，也能阻止所有内联（inline）的脚本和样式。即使有人在页面评论或者留言中嵌入了脚本标签，这些脚本代码也不会被执行。可通过两种方式设置，如果 HTTP 头与 Meta 定义同时存在，则优先采用 HTTP 头中的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 HTTP 头，比如只允许脚本从本源加载：Content-Security-Policy: script-src ‘self’，其中script-src ‘self’是策略。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过HTML的Meta标签，比如只允许脚本从本源加载：&lt;/p&gt;
  &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Content-Security-Policy&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;script-src &#39;self&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;script-src – 设置可以接受的JavaScript代码的源站点&lt;/li&gt;
&lt;li&gt;style-src – 设置可以接受的CSS样式代码的源站点&lt;/li&gt;
&lt;li&gt;connect-src – 定义浏览器可以通过XHR、WebSocket或者 EventSource访问哪些站点&lt;/li&gt;
&lt;li&gt;font-src – 设置可以接受的字体文件的源站点&lt;/li&gt;
&lt;li&gt;frame-src – 定义浏览器可以通过iframe访问哪些站点&lt;/li&gt;
&lt;li&gt;img-src – 设置可以接受的图片的源站点&lt;/li&gt;
&lt;li&gt;media-src – 设置可以接受的音频和视频文件的源站点&lt;/li&gt;
&lt;li&gt;object-src – 设置可以接受的Flash和其它插件的源站点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;br&gt;默认情况下，所有的内联JavaScript脚本都不会被执行，因为浏览器无法区分自己的内联脚本和黑客注入的脚本。&lt;br&gt;CSP还会默认阻止所有eval()风格的代码的执行，包括setInterval/setTimeout中的字符串和类似于new Function(‘return false’)之类的代码。&lt;/p&gt;
&lt;h4 id=&quot;3-3-3-iframe-沙箱环境&quot;&gt;&lt;a href=&quot;#3-3-3-iframe-沙箱环境&quot; class=&quot;headerlink&quot; title=&quot;3.3.3 iframe 沙箱环境&quot;&gt;&lt;/a&gt;3.3.3 iframe 沙箱环境&lt;/h4&gt;&lt;p&gt;利用iframe进行跨源：HTML5为iframe提供了安全属性 sandbox，iframe的能力将会被限制。&lt;/p&gt;
&lt;h4 id=&quot;3-3-4-Secure和HttpOnly属性&quot;&gt;&lt;a href=&quot;#3-3-4-Secure和HttpOnly属性&quot; class=&quot;headerlink&quot; title=&quot;3.3.4 Secure和HttpOnly属性&quot;&gt;&lt;/a&gt;3.3.4 Secure和HttpOnly属性&lt;/h4&gt;&lt;p&gt;Secure能确保cookie的内容只能通过SSL连接进行传输。Secure和HttpOnly属性告诉浏览器cookie的内容只能分别通过HTTP(S)协议进行访问，从而避免了被轻易窃取，比如禁止从JavaScript中的document.cookie访问，因此cookie在浏览器document中不可见了。如果单独使用的话，无法全面抵御跨站点脚本攻击，通常和其他技术组合使用。使用方法如下：&lt;br&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Set-Cookie: &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;; &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;&lt;/span&gt;] [&lt;span class=&quot;string&quot;&gt;; expires=&amp;lt;date&amp;gt;&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;; domain=&amp;lt;domain_name&amp;gt;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;; path=&amp;lt;some_path&amp;gt;&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;; secure&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;; HttpOnly&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-3-5-其他安全相关的HTTP-头&quot;&gt;&lt;a href=&quot;#3-3-5-其他安全相关的HTTP-头&quot; class=&quot;headerlink&quot; title=&quot;3.3.5 其他安全相关的HTTP 头&quot;&gt;&lt;/a&gt;3.3.5 其他安全相关的HTTP 头&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;X-Content-Type-Options 告诉浏览器相信此服务器下发的资源的类型，防止类型嗅探攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HPKP(Public Key Pinning) Public Key Pinning 是一个response 头，用来检测一个证书的公钥是否发生了改变，防止中间人攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HSTS (HTTP Strict-Transport-Security) 强制使用TSL作为数据通道。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-4-HTML5-对web安全的影响&quot;&gt;&lt;a href=&quot;#3-4-HTML5-对web安全的影响&quot; class=&quot;headerlink&quot; title=&quot;3.4 HTML5 对web安全的影响&quot;&gt;&lt;/a&gt;3.4 HTML5 对web安全的影响&lt;/h3&gt;&lt;p&gt;html5有很多新的特性能力，然而能力越大，被攻破后的危险就越大。&lt;br&gt;HTML5 对xss的影响主要体现在:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;攻击面更大，html5带来更多的标签和更多的属性如&lt;code&gt;&amp;lt;video&amp;gt;,&amp;lt;audio&amp;gt;,&amp;lt;canvas&amp;gt;&lt;/code&gt;等；&lt;/li&gt;
&lt;li&gt;危害更大，HTML5更多的资源可以被xss利用。黑客可以利用浏览器的一切权限，比如本地存储、GEO、服务器推送机制WebSocket，js多线程执行Webworker等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如localstorage只能通过js设置和获取，导致的结果是不能像cookie一样设置httponly等属性，所以localstorage中不能存放敏感信息，最好能够在服务端进行加密，可以配合CORS来获取网站的localstorage的信息。&lt;/p&gt;
&lt;h2 id=&quot;4-响应式&quot;&gt;&lt;a href=&quot;#4-响应式&quot; class=&quot;headerlink&quot; title=&quot;4 响应式&quot;&gt;&lt;/a&gt;4 响应式&lt;/h2&gt;&lt;p&gt;响应式布局简而言之，就是一个网站能够兼容多个终端，可以为不同终端的用户提供更加舒适的界面和更好的用户体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于栅格布局规划响应式设计，每个模块尽可能严格遵循栅格布局，符合栅格的小模块能很灵活的适应多个分辨率的展示。&lt;/li&gt;
&lt;li&gt;拥抱flexbox。&lt;/li&gt;
&lt;li&gt;使用动态的字体大小单位+rem单位使用。&lt;/li&gt;
&lt;li&gt;使用CSS3 mediaQuery 技术响应用户设备。&lt;/li&gt;
&lt;li&gt;利用百分比。&lt;/li&gt;
&lt;li&gt;对低版本浏览器使用JS动态响应。&lt;/li&gt;
&lt;li&gt;一套“自适应”素材兼容各种分辨率，提升页面性能，比如自适应的图片/视频素材。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如&lt;a href=&quot;http://aotu.io/notes/&quot;&gt;凹凸实验室博客&lt;/a&gt;页面在PC端、iPad、手机端的排版：&lt;br&gt;PC端：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;凹凸实验室1&quot; class=&quot;凹凸实验室1&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/凹凸实验室1.jpg&quot; alt=&quot;凹凸实验室1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;iPad：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;凹凸实验室2&quot; class=&quot;凹凸实验室2&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/凹凸实验室2.jpg&quot; alt=&quot;凹凸实验室2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;手机端：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;凹凸实验室3&quot; class=&quot;凹凸实验室3&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/凹凸实验室3.jpg&quot; alt=&quot;凹凸实验室3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-兼容性&quot;&gt;&lt;a href=&quot;#5-兼容性&quot; class=&quot;headerlink&quot; title=&quot;5 兼容性&quot;&gt;&lt;/a&gt;5 兼容性&lt;/h2&gt;&lt;p&gt;估计很多人对这句话都有体会：IE虐我千百遍，我待IE如初恋。当然，除了 IE 上有兼容性问题，其他浏览器比如 Android 上的低版本浏览器也有较多问题。&lt;br&gt;是否继续保持对低端浏览器的兼容性，我们可以用数据跟产品经理或者老板说话，减少我们的工作量，最好在项目之前就定下来支持最低支持的版本是什么，然后设计一个对应兼容方案。以下是百度统计的2015年的浏览器市场份额数据：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;浏览器市场份额报告_2015.01-2015.12&quot; class=&quot;浏览器市场份额报告_2015.01-2015.12&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/浏览器市场份额报告_2015.01-2015.12.jpg&quot; alt=&quot;浏览器市场份额报告_2015.01-2015.12&quot;&gt;&lt;/p&gt;
&lt;p&gt;兼容性的原则：&lt;strong&gt;渐进增强与平稳退化&lt;/strong&gt;。就是说，在低级浏览器能够保证其可用性和可访问性；渐进增强，在保证代码、页面在低级浏览器中的可用性及可访问性的基础上，逐步增加功能及用户体验。&lt;br&gt;如果出现兼容性问题了，怎么处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认触发场景，什么浏览器、版本、什么情况下会出现这个问题，做到稳定复现。&lt;/li&gt;
&lt;li&gt;找到问题原因，为什么会出现这样的问题（自己琢磨、网上搜、问同事）。&lt;/li&gt;
&lt;li&gt;确定解决办法：参考现成的规范，比如某些属性不能使用以及一些hack的处理。&lt;/li&gt;
&lt;li&gt;积累兼容性处理方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;淘宝首页在兼容性上做了一个小创新：Html钩子&lt;br&gt;在html上加上操作系统、浏览器内核、浏览器类型、CSS3动画支持、IE各版本类，好处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;渐进增强 可以实现不同浏览器下差异化体验。&lt;/li&gt;
&lt;li&gt;能快速定位并修复某个浏览器下的特定bug。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;淘宝首页html钩子：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;淘宝首页浏览器类&quot; class=&quot;淘宝首页浏览器类&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/淘宝首页浏览器类.png&quot; alt=&quot;淘宝首页浏览器类&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;兼容性问题是老生常谈的问题了，团队之间共同努力形成一个bug兼容性积累文档，是最好不过的了。&lt;/p&gt;
&lt;h2 id=&quot;6-搜索SEO&quot;&gt;&lt;a href=&quot;#6-搜索SEO&quot; class=&quot;headerlink&quot; title=&quot;6 搜索SEO&quot;&gt;&lt;/a&gt;6 搜索SEO&lt;/h2&gt;&lt;h2 id=&quot;6-1-语义化&quot;&gt;&lt;a href=&quot;#6-1-语义化&quot; class=&quot;headerlink&quot; title=&quot;6.1 语义化&quot;&gt;&lt;/a&gt;6.1 语义化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标签语义化对搜索引擎友好，良好的结构和语义容易被搜索引擎抓取。&lt;/li&gt;
&lt;li&gt;善用标题h1，h2，h3，h4，h5，h6，特别是h1和h2；H(x)标签中使用关键字，可提升排名。同时设置 rel=“nofollow”避免权重流失。&lt;/li&gt;
&lt;li&gt;使用 HTML5 中的 Microdata 对 Web 页面上已经存在的数据提供附加的语义。Microdata 由名字 / 值（name/value）对组成，每一个词汇表定义一组命名的属性。对 Microdata 的支持可以影响搜索结果的显示，使得显示结果更加丰富，虽然不能影响搜索结果的排名，但是网站的流量可能会有所增加。类似的技术还有资源描述框架RDF、微格式Microformat 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-2-衡量站点关键词优化&quot;&gt;&lt;a href=&quot;#6-2-衡量站点关键词优化&quot; class=&quot;headerlink&quot; title=&quot;6.2 衡量站点关键词优化&quot;&gt;&lt;/a&gt;6.2 衡量站点关键词优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;站点内容以及关键词的选择。&lt;/li&gt;
&lt;li&gt;描述标签、关键词标签、代替属性。&lt;/li&gt;
&lt;li&gt;长尾关键词：非目标关键词但也可以带来搜索流量的关键词；例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装、户外运动装等。长尾关键词基本属性是：可延伸性，针对性强，范围广。&lt;/li&gt;
&lt;li&gt;关键词的分布情况。&lt;/li&gt;
&lt;li&gt;关键词密度、看重：合理的关键字密度可获得较高的排名位置，密度过大会起到相反的效果。一般说来，在大多数的搜索引擎中，关键词密度在2%~8%是一个较为适当的范围，有利于网站在搜索引擎中排名。&lt;/li&gt;
&lt;li&gt;是否存在作弊行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-3-链接&quot;&gt;&lt;a href=&quot;#6-3-链接&quot; class=&quot;headerlink&quot; title=&quot;6.3 链接&quot;&gt;&lt;/a&gt;6.3 链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优化文件目录结构和URL。URL应该有语义性，简短易懂。&lt;/li&gt;
&lt;li&gt;通过推广暴露自己的链接，增加信任度。链接分为外向链接和内向（反向）链接，外向链接就是从本站点到其他站点，内向链接就是从其他站点到我的站点，可以尝试使用&lt;a href=&quot;http://www.backlinkpro.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反向链接生成器&lt;/a&gt;。或者通过写软文、发布分类信息、发布博客文章来推广自己的网站。&lt;/li&gt;
&lt;li&gt;锚文本 ：把关键词做一个链接，指向别的网页，这种形式的链接就叫作锚文本。搜索引擎可以根据指向某一个网页的链接的锚文本描述来判断该网页的内容属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-4-良好的网站导航和sitemap&quot;&gt;&lt;a href=&quot;#6-4-良好的网站导航和sitemap&quot; class=&quot;headerlink&quot; title=&quot;6.4 良好的网站导航和sitemap&quot;&gt;&lt;/a&gt;6.4 良好的网站导航和sitemap&lt;/h2&gt;&lt;p&gt;网站需要有一个良好的导航，控制根目录和各子目录的关键，通过sitemap可以帮助网站主了解网站结构，也方便搜索引擎收录整个站点。&lt;/p&gt;
&lt;h2 id=&quot;7-其他优化&quot;&gt;&lt;a href=&quot;#7-其他优化&quot; class=&quot;headerlink&quot; title=&quot;7 其他优化&quot;&gt;&lt;/a&gt;7 其他优化&lt;/h2&gt;&lt;h3 id=&quot;7-1-信息无障碍&quot;&gt;&lt;a href=&quot;#7-1-信息无障碍&quot; class=&quot;headerlink&quot; title=&quot;7.1 信息无障碍&quot;&gt;&lt;/a&gt;7.1 信息无障碍&lt;/h3&gt;&lt;p&gt;信息无障碍一般可以从以下几点入手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加landmark角色，在页面主要操作区域（搜索框、登录框、列表内容）添加“role”标签加以说明。landmark值一般有：banner（banner）、complementary（辅助内容区）、contentinfo（网站信息和版权）、form（表单）、main（主内容区）、navigation（导航区）、search（搜索区），如：&lt;br&gt; &lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;role&quot; class=&quot;role&quot; src=&quot;/img/post/wangcainuan/2016-03-16-optimization/role.jpg&quot; alt=&quot;role&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;提供文字替代方案。比如给图片或其他元素提供适当的alt属性或者title属性的值。&lt;/li&gt;
&lt;li&gt;表单使用label标签。&lt;/li&gt;
&lt;li&gt;使用heading做信息架构。读屏软件提供了快捷键切换heading，相关用户可通过读屏软件了解我们的网站信息架构。&lt;/li&gt;
&lt;li&gt;给页面里重要区块和功能添加accesskey，可以快速定位。&lt;/li&gt;
&lt;li&gt;触发界面转换需设置焦点。比如，对于浮层需要注意避免“Tab”焦点中断。&lt;/li&gt;
&lt;li&gt;考虑到老年眼睛老花，因此需要保证字体够大，或者网站可缩放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可参考&lt;a href=&quot;http://www.qq.com/demo/accessibility.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;无障碍阅读&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-2-微动画&quot;&gt;&lt;a href=&quot;#7-2-微动画&quot; class=&quot;headerlink&quot; title=&quot;7.2 微动画&quot;&gt;&lt;/a&gt;7.2 微动画&lt;/h3&gt;&lt;p&gt;通过前端动画技术给页面进行优化，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品图片hover效果&lt;/li&gt;
&lt;li&gt;小图标旋转效果&lt;/li&gt;
&lt;li&gt;购物车微动画&lt;/li&gt;
&lt;li&gt;loading动画，当加载页面需要一定时间，特别是移动端，可以通过有趣的loading动画吸引用户，这里有一些有趣的&lt;a href=&quot;http://www.instantshift.com/2016/01/22/free-html5-css3-loaders-preloaders/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;loading动画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-3-requireJs&quot;&gt;&lt;a href=&quot;#7-3-requireJs&quot; class=&quot;headerlink&quot; title=&quot;7.3 requireJs&quot;&gt;&lt;/a&gt;7.3 requireJs&lt;/h3&gt;&lt;p&gt;requireJs框架特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端设计及开发人员统一代码规范。&lt;/li&gt;
&lt;li&gt;按需加载。&lt;/li&gt;
&lt;li&gt;AMD规范：以简单而优雅的方式统一了JavaScript的模块定义和加载机制，降低了学习和使用各种框架的门槛，能够以一种统一的方式去定义和使用模块，提高开发效率，降低了应用维护成本。&lt;/li&gt;
&lt;li&gt;与Grunt结合可实现一站式工作流。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-4-多标签状态同步&quot;&gt;&lt;a href=&quot;#7-4-多标签状态同步&quot; class=&quot;headerlink&quot; title=&quot;7.4 多标签状态同步&quot;&gt;&lt;/a&gt;7.4 多标签状态同步&lt;/h3&gt;&lt;p&gt;场景如下：&lt;br&gt;页面一：去一个网站买东西，未登录状态下，进入首页；&lt;br&gt;页面二：然后新窗口打开任意页面，登录并成功返回。&lt;br&gt;再次访问页面一，发现页面还是未登录状态，实际上用户已经登录了，这种体验是很差的。我们是不是有什么办法可以实现多标签状态同步呢？有的，利用Page Visibility：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面可见性API就是表示网页可见还是不可见的。页面可见性API有两个属性，一个事件，如下：&lt;ul&gt;
&lt;li&gt;document.hidden: Boolean值，表示当前页面可见还是不可见&lt;/li&gt;
&lt;li&gt;document.visibilityState: 返回当前页面的可见状态，状态值有hidden、visible、prerender、preview。&lt;/li&gt;
&lt;li&gt;visibilitychange: 当可见状态改变时候触发的事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器支持：IE10+、Chrome、FireFox。&lt;/li&gt;
&lt;li&gt;多标签状态同步demo: &lt;a href=&quot;http://www.zhangxinxu.com/study/201211/page-visibility-api-login-same-step-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页可见性API与登录同步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-5-个性化推荐&quot;&gt;&lt;a href=&quot;#7-5-个性化推荐&quot; class=&quot;headerlink&quot; title=&quot;7.5 个性化推荐&quot;&gt;&lt;/a&gt;7.5 个性化推荐&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTML5 Geolocation API获得用户的地理位置，进行基于地理位置的运营。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-参考&quot;&gt;&lt;a href=&quot;#8-参考&quot; class=&quot;headerlink&quot; title=&quot;8 参考&quot;&gt;&lt;/a&gt;8 参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/9bc4951c9d80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;能提高前端工作效率的那些事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/cSKQveSBNY4yH&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于Gulp的前端自动化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/cSKQveSBEu3e5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;繁星网的前端性能优化之路&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/lei2007/archive/2013/08/16/3262897.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端性能优化—-yahoo前端性能团队总结的35条黄金定律&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/cSKQveSBEudR2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端性能数据之采集和分析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2015/06/web-performance-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web性能API——帮你分析Web前端性能&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zhihu.com/question/20984284&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端工程师如何系统地整理和累积兼容性相关的知识？&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://isux.tencent.com/play-with-html5-optimize.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;玩转HTML5移动页面(优化篇)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com/post/http2-and-wpo-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 与 WEB 性能优化（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com/post/http2-and-wpo-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 与 WEB 性能优化（二）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com/post/http2-and-wpo-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 与 WEB 性能优化（三）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com/post/header-compression-in-http2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 头部压缩技术介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.imweb.io/topic/568958714c44bcc56092e409&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从零开始学web安全（1）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.wilddog.com/?p=290&amp;amp;utm_source=baidu.keywords&amp;amp;utm_medium=cpc&amp;amp;utm_content=blog&amp;amp;utm_campaign=orangemarch#more-290&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于Web安全，99%的网站都忽略了这些&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jb51.net/web/24351.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网页前端常见的攻击方式和预防攻击的方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000382944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web客户端安全性最佳实践&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003756563&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5 安全问题解析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://isux.tencent.com/ten-steps-enhance-web-accessibility.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10步大幅提升网站可访问性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/11/page-visibility-api-introduction-extend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Page Visibility(页面可见性)API介绍、微拓展&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;篇幅可能有点长，我想先聊一聊阅读的方式，我希望你阅读的时候，能够把我当作你的竞争对手，你的梦想是超越我。你想超越我，就得了解我懂什么对吧，好，开始阅读~ ~ 哈哈哈 ~ ~ ~&lt;/p&gt;
&lt;p&gt;历时144000000毫秒出山的前端优化篇，若你问我有什么感悟？&lt;br&gt;那我告诉你，看到毫秒啊，火箭啊，这些与优化相关的词，都有莫名的亲切感。&lt;br&gt;本文主要从&lt;strong&gt;工作效率&lt;/strong&gt;、&lt;strong&gt;速度性能&lt;/strong&gt;、&lt;strong&gt;稳定性&lt;/strong&gt;、&lt;strong&gt;响应式&lt;/strong&gt;、&lt;strong&gt;兼容性&lt;/strong&gt;、&lt;strong&gt;搜索SEO&lt;/strong&gt;、&lt;strong&gt;信息无障碍&lt;/strong&gt;等方面进行讲解。&lt;br&gt;前端优化是一个让人技术提升的point，希望你也能从这里学到一些东西。&lt;br&gt;
    
    </summary>
    
    
      <category term="工作效率" scheme="http://aotu.io/tags/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
      <category term="速度性能" scheme="http://aotu.io/tags/%E9%80%9F%E5%BA%A6%E6%80%A7%E8%83%BD/"/>
    
      <category term="安全性" scheme="http://aotu.io/tags/%E5%AE%89%E5%85%A8%E6%80%A7/"/>
    
      <category term="响应式" scheme="http://aotu.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="兼容性" scheme="http://aotu.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="搜索SEO" scheme="http://aotu.io/tags/%E6%90%9C%E7%B4%A2SEO/"/>
    
      <category term="信息无障碍" scheme="http://aotu.io/tags/%E4%BF%A1%E6%81%AF%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
    
      <category term="前端优化" scheme="http://aotu.io/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>某超长文档的探索之路</title>
    <link href="http://aotu.io/notes/2016/03/16/jcloud-sum/"/>
    <id>http://aotu.io/notes/2016/03/16/jcloud-sum/</id>
    <published>2016-03-15T16:18:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;所谓的文档, 大概就是指那种洋洋洒洒写了不下几万字, 最后没有多少人会看完的东西. 对, 比技术不一定, 但比字数谁都赢不了我! &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这次京东云改版的项目, 除了需要搭建一个放置京东云文档的平台, 还包括了文档录入的工作. 之前使用&lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/a&gt;做过&lt;a href=&quot;http://aotu.io/halojs/&quot;&gt;&lt;strong&gt;HaloJS&lt;/strong&gt;&lt;/a&gt;的文档平台, 在文档录入的时候并没有碰到太多问题. 本以为搭建文档页面也就仅此而已, 直到碰到了长达104页的doc文档…&lt;/p&gt;
&lt;h3 id=&quot;搭建框架&quot;&gt;&lt;a href=&quot;#搭建框架&quot; class=&quot;headerlink&quot; title=&quot;搭建框架&quot;&gt;&lt;/a&gt;搭建框架&lt;/h3&gt;&lt;p&gt;不同于其他零散的页面, 文档页面是一整个系列的, 具有相同的页面结构. 页面头部, 底部, 导航等组件. 如果像平时制作静态页面那样每个页面都从一个空白的模板html文件开始下手, 在开发量达到一定程度的时候, 页面整体的维护就会非常困难. 首先是无法很痛快地进行某些公共模块的修改: 就算只是在底部加多一个链接, 或者在导航中删除一个条目, 我们都需要对每个页面都进行手动修改. 另外, 页面的资源管理会越来越难. 每个页面都需要引用整体页面的样式文件与脚本文件, 还都有页面私有的样式文件, 脚本文件, 还有图片文件等. 如果这些资源共用一个文件夹, 有时候就会面临文件命名的难题. &lt;/p&gt;
&lt;p&gt;如上面说, 文档页面可谓是重复工作最严重的一种页面. 好在搭建框架的小伙伴非常给力, 使用了同样很给力的开源的前端工程化开发工具&lt;a href=&quot;https://github.com/o2team/athena&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Athena&lt;/a&gt;,自带支持代码热更新的预览服务, 自带压缩代码, 编译sass/less的工具, 自带上传sftp的工具等等. 而对于这个需求来说, 最好用的莫过于ejs模板语法的支持了. 有了模板, 公共的组件在不同页面都可以随意引用, 工作量减少了非常多. &lt;/p&gt;
&lt;p&gt;每个页面都由组件组成, 平时写页面的时候只需要点名引用需要的组件. 搭建完成后, 使用Athena工具的build命令, 就可以将页面的静态文件输出. 对于这批文档的页面, 每个页面会被拆分为头部组件, 底部组件, 导航组件. 如果开发过程中某个组件产生变化, 只需要直接修改组件, 再重新运行build命令, 就可以使每个引用了这个组件的页面都一起变过来, 可谓十分方便.&lt;/p&gt;
&lt;h3 id=&quot;录入文档&quot;&gt;&lt;a href=&quot;#录入文档&quot; class=&quot;headerlink&quot; title=&quot;录入文档&quot;&gt;&lt;/a&gt;录入文档&lt;/h3&gt;&lt;p&gt;录入文档可能是这一整个需求最痛苦的工作了. 一百多页A4纸大小的DOC文档, 还需要依据设计稿重新设置样式, 是十分机械化的工作. 在这里, 我的小伙伴将文档中的不同样式建立为不同的组件, 比如一级标题组件, 或是二级标题组件等等. 这些组件使用起来就像下面这样:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;widget.load&lt;/span&gt;(&#39;&lt;span class=&quot;attr&quot;&gt;doc_mod_list3&lt;/span&gt;&#39;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;title1:&lt;/span&gt; &#39;操作指南&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;item1:&lt;/span&gt; [&#39;挂载云硬盘&#39;,&#39;绑定公网&lt;span class=&quot;attr&quot;&gt;IP&lt;/span&gt;&#39;,&#39;常见问题&#39;,&#39;主机数量&#39;,&#39;监控报警&#39;,&#39;删除云主机&#39;,&#39;绑定监控报警&#39;,&#39;重置密码&#39;,&#39;制作镜像&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;title2:&lt;/span&gt; &#39;常见问题&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;item2:&lt;/span&gt; [&#39;主机数量&#39;,&#39;监控报警&#39;,&#39;删除云主机&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;item3show:&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;) %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;组件本身是一个ejs模板:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title1&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attr&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;0;i&amp;lt;item1.length;i++)&lt;/span&gt; &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;item1&lt;/span&gt;[&lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;] %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_lmore&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;更多&amp;amp;gt;&amp;amp;gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title2&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attr&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;0;i&amp;lt;item2.length;i++)&lt;/span&gt; &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;item2&lt;/span&gt;[&lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;] %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_lmore&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;更多&amp;amp;gt;&amp;amp;gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;attr&quot;&gt;item3show&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;true&lt;/span&gt;) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_title&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title3&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_link&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;attr&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;0;i&amp;lt;item3.length;i++)&lt;/span&gt; &amp;#123; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;item3&lt;/span&gt;[&lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;] %&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_list3_lmore&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;更多&amp;amp;gt;&amp;amp;gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来, 我们写页面的工作, 变成了写ejs组件, 再用widget.load函数加载自定义的组件, 用getCSS/getJS函数调用对应的css/js文件资源. 把页面中比较通用, 复杂的组件拆分出来, 有利于将页面模块化, 代码复用可以更爽快.&lt;/p&gt;
&lt;h4 id=&quot;思考&quot;&gt;&lt;a href=&quot;#思考&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h4&gt;&lt;p&gt;具体到这个项目, 文档录入是个非常痛苦的活. 按照目前的方案, 文档里面的一级标题, 二级标题, 正文, 图片等, 都是由组件构成, 像&lt;code&gt;&amp;lt;h3 class=“xxxx”&amp;gt;xxxx&amp;lt;/h3&amp;gt;&lt;/code&gt;这样的简单代码, 也被做成了组件. 个人认为这样的做法不太科学. 这种太过细小的组件反而使录入文档变成了十分痛苦的事情. 上面所说的情况, 一个标签可以解决的问题, 变成引用组件的工作后, 代码量并没有多少差别:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 声明组件 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;doc_mod_title3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 使用组件 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;widget.load&lt;/span&gt;(&#39;&lt;span class=&quot;attr&quot;&gt;doc_mod_title3&lt;/span&gt;&#39;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;title:&lt;/span&gt; &#39;京东云入门手册&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;) %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;左边是引用组件的写法, 右边是组件内部的代码. 可以看见, &lt;strong&gt;过度模块化导致了细小组件的产生&lt;/strong&gt;. 这里应该有更加方便的做法. &lt;/p&gt;
&lt;p&gt;Python中有个第三方模块docx2html, 实现了将docx文件转化为html代码的功能, 并且转化完的代码十分纯净, 只有html结构与内容, 不带样式, 很适合在导出后再重置样式. 针对这个项目, 我们可以做个小改造, 每个页面依然由头部, 导航还有底部组成, 而文档内容则可以定义一个css类&lt;code&gt;doc_mod_content&lt;/code&gt;, 表示其中是文档的内容, 而文档的各种样式, 则写在这个类的后代选择器上. 如果标签的种类无法满足区分特定节点的需要, 还可以通过编辑器的搜索替换功能去批量添加特定的类. 这样的话, 首先是少去了开发组件的工作, 文档的录入也会轻松很多. 遗憾的是, 由于时间紧迫, 这个需求并没有使用这种方式. 过后有机会可以尝试. 文档录入本来就该是个轻松的活. &lt;/p&gt;
&lt;h3 id=&quot;导航优化&quot;&gt;&lt;a href=&quot;#导航优化&quot; class=&quot;headerlink&quot; title=&quot;导航优化&quot;&gt;&lt;/a&gt;导航优化&lt;/h3&gt;&lt;p&gt;对于普通的页面, 侧导航跟页面主体并不需要分开, 直接放置即可, 就像hexo的&lt;a href=&quot;https://hexo.io/api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档页面&lt;/a&gt;一样. 但前面说过, 文档页是非常长的. 对于这种超长的页面, 使用上述的实现方式, 有可能会出现滚动到页面内容中间, 看不见导航的窘迫局面. &lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-03-15/hexo.png&quot; alt=&quot;看不见导航的窘迫局面&quot;&gt;&lt;/p&gt;
&lt;p&gt;看见这种情况, 产品的小伙伴就该找我们了. 重构哥哥, 我想让导航始终在视野里面. 你能实现不?&lt;br&gt;Of Course! 只需要把导航栏设置为position: fixed就ok了. 不过对于这种页面中同时还存在头部与底部的页面, 会比较麻烦. 跟交互的童鞋商量过后, 我们把方案确定了下来. 具体而言, 侧导航共有三种状态:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导航条尚未滚动到页面顶部的状态, &lt;code&gt;position: static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导航条滚动到超出页面顶部的位置, &lt;code&gt;position: fixed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导航条底部与页面内容的底部对齐, &lt;code&gt;position: absolute; bottom: 0&lt;/code&gt;,  或者使用JS控制导航条的底部对齐页面内容底部. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再具体一点说, 这三种状态的触发条件分别是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面滚动距离 &amp;lt; 导航距离顶部的距离&lt;/li&gt;
&lt;li&gt;页面滚动距离 &amp;gt; 导航距离顶部的距离 &amp;amp;&amp;amp; 页面滚动距离 &amp;lt; 内容的高度 + 内容距离顶部的距离 - 导航条的高度 + 导航条的滚动距离&lt;/li&gt;
&lt;li&gt;剩下的情况. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就算如此, 这样的实现还是会有一些问题存在, 比如在跳转到某个页面之后, 导航的高亮条目不一定会在视野中, 这会导致在不同页面间跳转的过程中, 导航条不固定, 找不到高亮条目的尴尬. &lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-03-15/out_of_view.png&quot; alt=&quot;当前条目”API网关”不在页面可视范围内&quot;&gt;&lt;/p&gt;
&lt;p&gt;在当前实现方式下, 并没有特别好的办法能解决这种情况. 不同页面的长度不是相同的, 导航的位置跟页面的位置关系处于上面三种状态中的哪一种也是难以预测的, 就更没办法将导航移入视野中了. 说到底, 这种情况都是由于页面和导航太长导致的. &lt;a href=&quot;http://www.qcloud.com/product/cvm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯云&lt;/a&gt;的文档页面也是这样处理的. &lt;/p&gt;
&lt;h4 id=&quot;思考-1&quot;&gt;&lt;a href=&quot;#思考-1&quot; class=&quot;headerlink&quot; title=&quot;思考&quot;&gt;&lt;/a&gt;思考&lt;/h4&gt;&lt;p&gt;那么, 在不缩短页面导航的情况下, 有没有办法做好这样的页面的效果呢? 答案是有的, 并且不止一种. &lt;/p&gt;
&lt;p&gt;首先, 有一种比较折中的方案(当然, 要先问问产品的小伙伴同不同意), 把导航中的高亮条目抽出来放到导航的第一位. 参考各种基于JSDoc3的文档页面. 下面是&lt;a href=&quot;http://pixijs.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PIXI&lt;/a&gt;的文档: &lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-03-15/pixi.png&quot; alt=&quot;不同页面的导航顺序是不一样的&quot;&gt;&lt;/p&gt;
&lt;p&gt;放到项目中的话, 这种办法大有曲线救国的味道: 不惜修改几十个页面中的导航顺序来达成高亮条目的固定. 这种机械化的工作, 做起来已经很累人. 如果做完后产品的小伙伴对效果不满意…. 是的, 还得几十个页面一个一个的改回来. 当然, 我们也可以预先把老版本备份一下, 不满意了就直接覆盖文件完事. 这一切做起来是那么的麻烦. 但如果是搭配着&lt;a href=&quot;https://github.com/o2team/athena&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Athena&lt;/a&gt;工具使用, 就简单多了. 导航栏组件中用数组menu来储存导航栏条目信息, 只需要用forEach就可以输出所有的菜单项. 如果要将高亮条目与第一项对调, 只需要一句话就完事:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// var menu, curIdx;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;menu.unshift(menu.splice(curIdx&lt;span class=&quot;comment&quot;&gt;/*高亮条目的索引*/&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// menu.forEach(function (val, idx) &amp;#123;...&amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是不是有点爽?&lt;/p&gt;
&lt;p&gt;上面这种方法, 说实话是有点不完美的. 用户当然不希望侧导航的位置一直不固定. 在这里, 我们可以使用页面局部刷新技术来规避这个问题. 如果能够在跳转到其他文档的时候不刷新页面, 而是在脚本中通过异步请求获取到新的文档的内容. 这个内容可以是json, 也可以是一个html文档, 甚至是一个html片段. 过后我们再将其用合适的姿势展示在右侧内容区. 结果上看, 页面仅仅是刷新了内容区, 导航位置不会改变, 比起之前的版本, 效率还会更高. &lt;/p&gt;
&lt;h3 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h3&gt;&lt;p&gt;这个项目做下来, 最后还是留下了一些遗憾的地方. 迫于时间, 感觉手头还有很多的技术没用上, 或者还有许多的方案没实现. 要做好一个项目, 还是需要从项目一开始就与产品, 交互, 视觉等业务上游团队保持良好的沟通, 对整个项目拥有相当的了解, 闭门造车不可取, &lt;strong&gt;用户体验&lt;/strong&gt;才是王道. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的文档, 大概就是指那种洋洋洒洒写了不下几万字, 最后没有多少人会看完的东西. 对, 比技术不一定, 但比字数谁都赢不了我! &lt;/p&gt;
    
    </summary>
    
    
      <category term="jcloud" scheme="http://aotu.io/tags/jcloud/"/>
    
      <category term="sum" scheme="http://aotu.io/tags/sum/"/>
    
  </entry>
  
  <entry>
    <title>让图片加载这件事儿变得更美好</title>
    <link href="http://aotu.io/notes/2016/03/09/img-loading-optimization-in-mobile/"/>
    <id>http://aotu.io/notes/2016/03/09/img-loading-optimization-in-mobile/</id>
    <published>2016-03-08T17:38:02.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;如果你问我构建触屏页面的过程中有什么困难的？&lt;br&gt;我可以拍着胸口跟可以跟你讲，有三大问题！那就是图片、图片、图片。&lt;br&gt;尤其是面对活动运营侧的需求的时候，连妈妈都要问我为什么要跪着做需求。&lt;br&gt;一个萝卜一个坑，总有一个萝卜适合你的坑。今天就来让图片加载这件事儿变得更美好，让用户跪倒你的石榴裙(牛仔裤)下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;图片优化的一般方法&quot;&gt;&lt;a href=&quot;#图片优化的一般方法&quot; class=&quot;headerlink&quot; title=&quot;图片优化的一般方法&quot;&gt;&lt;/a&gt;图片优化的一般方法&lt;/h2&gt;&lt;p&gt; 在本文正式开始之前，笔者先提提图片优化的一般方法，了解图片优化的方法有助于理解后面图片加载实现形式的多样化。&lt;br&gt; 一般常见的图片优化方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少文件体积大小&lt;/li&gt;
&lt;li&gt;减少图片资源请求数(合并HTTP请求)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;减少图片文件体积大小&quot;&gt;&lt;a href=&quot;#减少图片文件体积大小&quot; class=&quot;headerlink&quot; title=&quot;减少图片文件体积大小&quot;&gt;&lt;/a&gt;减少图片文件体积大小&lt;/h3&gt;&lt;p&gt;可以从&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩优化图片大小&lt;/li&gt;
&lt;li&gt;采用合适的图片格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个途径来进行对体积大小的优化。&lt;br&gt;这里推荐阅读&lt;a href=&quot;http://cabbit.me/web-image-optimization/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Web性能优化：图片优化》&lt;/a&gt;，博主在文中讨论如何更优地选择图片的恰当格式以及推荐了优化图片大小的工具。&lt;/p&gt;
&lt;h3 id=&quot;减少图片资源请求数-合并HTTP请求&quot;&gt;&lt;a href=&quot;#减少图片资源请求数-合并HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;减少图片资源请求数(合并HTTP请求)&quot;&gt;&lt;/a&gt;减少图片资源请求数(合并HTTP请求)&lt;/h3&gt;&lt;p&gt;减少图片资源请求数(合并HTTP请求)的途径除了最为普遍的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合成雪碧图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用DataURL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里特别提下，采用DataURL这种方式将图片被转换成base64编码的字符串形式的，如果单纯地“嵌”入HTML中是不会被缓存的，但是加在CSS或JS文件中，通过缓存CSS或JS则达到了间接缓存以base64编码的图片。&lt;br&gt;这里推荐一个将图片转换成Base64编码的字符串的在线工具： &lt;a href=&quot;http://dataurl.net/#dataurlmaker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DataURLMaker在线工具&lt;/a&gt;&lt;br&gt;因为本文的重点不在于讨论图片优化的内容，所以这里就简单总结下对图片进行优化的方法，对于更详细的内容，笔者则按下不表了。&lt;br&gt;对于触屏页面中常见的的图片资源加载方式，笔者归纳为三类：正常加载、预加载、懒加载。&lt;/p&gt;
&lt;h2 id=&quot;正常加载&quot;&gt;&lt;a href=&quot;#正常加载&quot; class=&quot;headerlink&quot; title=&quot;正常加载&quot;&gt;&lt;/a&gt;正常加载&lt;/h2&gt;&lt;p&gt;所谓正常加载，则是开发者不采用人为地方式去干扰，按照浏览器正常加载的方式去加载渲染页面。&lt;br&gt;适合采用正常加载的方式的情景是图片数量较少以及图片体积较小，对触屏页面呈现的用户体验不影响或影响较少。&lt;br&gt;但是在现有的大环境中，限制于网络宽带等客观的因素，而且触屏页面的华丽炫目的设计都需要依靠图片，单纯的CSS是无法满足要求的，对图片的应用还是有一定量。&lt;br&gt;所以，能够毫无顾忌地采用正常加载的方式的案例还是比较少的，目前笔者暂时是没有见过。&lt;/p&gt;
&lt;h2 id=&quot;预加载&quot;&gt;&lt;a href=&quot;#预加载&quot; class=&quot;headerlink&quot; title=&quot;预加载&quot;&gt;&lt;/a&gt;预加载&lt;/h2&gt;&lt;p&gt;在触屏页面处理中最为常见的可以是说预加载，几乎每个触屏页面的案例都使用到了这种方式。&lt;br&gt;为了完整地呈现页面给用户，开发者会通过一定的技术预先加载图片资源（以及页面其它资源），等加载渲染完毕再把页面呈现给用户。&lt;br&gt;而根据这个预加载的过程是否有明显的进度提示，笔者把常见的预加载方式划分为两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显性预加载&lt;/li&gt;
&lt;li&gt;隐性预加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;显性预加载&quot;&gt;&lt;a href=&quot;#显性预加载&quot; class=&quot;headerlink&quot; title=&quot;显性预加载&quot;&gt;&lt;/a&gt;显性预加载&lt;/h3&gt;&lt;p&gt;显性预加载指的则是处于预加载过程时页面有明确的加载提示，比如进度条或者是Loading图标。&lt;br&gt;譬如，我厂的触屏页面案例《点燃你心中的野兽》，在预加载过程提示加载的进度，让用户有个心理预期，减少等待的烦躁感。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下截图来源自京东的&lt;a href=&quot;http://wqs.jd.com/promote/CH77/2015/paper/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《点燃你心中的野兽》&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:inline-block;max-width:200px;max-height:200px;width:100%;&quot; src=&quot;/img/post/Tingglelaoo/20160302/yeshou.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:block;width:100%;max-width:320px;margin:0 auto;&quot; src=&quot;/img/post/Tingglelaoo/20160302/paper.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个案例下的预加载处理技术是，先把页面DOM结构放入JS模版中，预加载完成后再把页面从JS模版拎出来，页面渲染完后能够完整地呈现页面给用户。&lt;br&gt;其中，图片资源相关预加载处理代码段为：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PreLoad.prototype.image = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       b.src = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过创建image元素，设置其src，就简单方便可以预先发起HTTP请求，实现预加载图片。&lt;br&gt;除了对png/jpg等格式图片能够利用以上方法实现预加载，对于DataURL转换图片为base64编码的字符串也能够实现预加载。&lt;br&gt;  在Adidas的《罗斯·决不凋谢》中，利用DataURL协议将图片转换成base64编码的字符串写入JS中，预加载JS文件完成后通过JS来进行内联在DOM元素中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下截图来自案例&lt;a href=&quot;http://drose6.adidasevent.com/]&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Adidas：罗斯·决不凋谢》&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:inline-block;max-width:200px;max-height:200px;width:100%;&quot; src=&quot;/img/post/Tingglelaoo/20160302/rose.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:block;width:100%;max-width:320px;margin:0 auto;&quot; src=&quot;/img/post/Tingglelaoo/20160302/drose6.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里贴出该案例中部分预加载处理代码代码，有兴趣的可以详见0.main.js、2.main.js、3.main.js处深入研究。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下为Chrome Dev Tool 对案例资源查看的界面截图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:block;width:100%;&quot; src=&quot;/img/post/Tingglelaoo/20160302/drose6-code.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然，业界有一种说法是不建议在移动端开发中使用DataURL转换图片为base64编码的做法，因为对大量的base64图片解码比较损耗内存和性能，但是使用base64在一定条件下是有助于页面加载速度提升，具体的原由可以前往&lt;a href=&quot;http://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/&quot;&gt;《图片资源Base64化在H5页面里有用武之地吗？》&lt;/a&gt;阅读。&lt;/p&gt;
&lt;h3 id=&quot;隐性预加载&quot;&gt;&lt;a href=&quot;#隐性预加载&quot; class=&quot;headerlink&quot; title=&quot;隐性预加载&quot;&gt;&lt;/a&gt;隐性预加载&lt;/h3&gt;&lt;p&gt;除了明确的预加载提示，还有一种是通过推进触屏页面进度的趣味互动的方式，笔者称之此种类似的情况为隐性预加载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;截图来自案例&lt;a href=&quot;http://evt.dianping.com/market/20151207/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《大众点评：阿惠故事1 - 吃饭别带姥爷》&lt;/a&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:inline-block;max-width:200px;max-height:200px;width:100%;&quot; src=&quot;/img/post/Tingglelaoo/20160302/ahui.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:block;width:100%;max-width:640px;margin:0 auto;&quot; src=&quot;/img/post/Tingglelaoo/20160302/hui-loading.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;在大众点评的《阿惠故事1 - 吃饭别带姥爷》的预加载中，先是显性预加载(钱币小图标Loding)快速地呈现部分画面(截图右部分)给用户，再通过互动(向上滑动数钱)来继续分段加载资源。这样的做法一改用户往日沉闷的等待，能够给予用户更好的体验。&lt;/p&gt;
&lt;p&gt;还有一个比较特别的案例是大众点评和欧莱雅合作的《好年从头开始》，笔者也将之归纳为隐性预加载。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;截图来源于案例&lt;a href=&quot;http://evt.dianping.com/midas/160108-loreal/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《大众点评：好年从头开始》&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:inline-block;max-width:200px;max-height:200px;width:100%;&quot; src=&quot;/img/post/Tingglelaoo/20160302/oulaiya.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img style=&quot;display:block;width:100%;max-width:640px;margin:0 auto;&quot; src=&quot;/img/post/Tingglelaoo/20160302/head-loading.png&quot; alt=&quot;示例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这里，开发者先预加载了部分图片以呈现首屏画面给用户，同时图片预加载依然在进行，当用户触发的页面内的图片资源还未加载完时则会显示进度条，加载完毕则可以进入下一个画面。&lt;/p&gt;
&lt;p&gt;笔者觉得采用这种方式的原因有二，第一，页面内容需要加载的资源过多，若等待全部加载完毕所需时间耗费过长，容易导致流失用户；第二，页面内容足够吸引，即时在交互过程中插入等待过程，用户也愿意去等待。&lt;/p&gt;
&lt;h2 id=&quot;懒加载&quot;&gt;&lt;a href=&quot;#懒加载&quot; class=&quot;headerlink&quot; title=&quot;懒加载&quot;&gt;&lt;/a&gt;懒加载&lt;/h2&gt;&lt;p&gt;懒加载，又称为延迟加载、按需加载。指的是图片在页面渲染的时候先不加载，页面渲染完成后在指定动作触发后再加载图片。&lt;br&gt;这种方式通常比较合适于篇幅较长的页面，并且图片内容的重要性低于页面信息内容，能够快速地先将重要的页面信息呈现给用户。&lt;br&gt;譬如，这种方式则应用于电商商品信息集合页面，同时也常用于文章阅读的情景下。除了在移动端的应用场景之外，在PC端懒加载也是应用最广泛的一种图片加载优化方式。&lt;br&gt;最为常见的一种懒加载技术是以可见距离作为触发点。当页面滑动到屏幕可见区域时，则进行加载图片。实现的原理是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先将图片的实际src，记录在data-set属性中。&lt;/li&gt;
&lt;li&gt;监听屏幕滚动，计算图片的Y坐标，并计算可视区域的高度height，当Y小于等于(height+scrollTop)时，图片的src的值用data-src的来替换，从而来实现图片的懒加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体可以前往&lt;a href=&quot;http://jdc.jd.com/h5/case/maga.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拇指期刊&lt;/a&gt;点击文章阅读体验喔。&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;&gt;&lt;/a&gt;写在最后&lt;/h2&gt;&lt;p&gt;  希望这篇文章能够带给读者一些启发。并不是某一种案例只使用一种加载方式。同时，也不是触屏页面的加载方式仅限于以上方法之一。&lt;br&gt;  这里仅是列举并讨论常见的加载方式，凡事讲究实践出真知，在实践的时候必然会有更加切合具体案例的好方法。&lt;br&gt;  Keep Moving，在触屏页面的开发中，兴许还有更多更优秀的图片资源加载方式等着我们去发掘。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 文中案例搜集均来源于&lt;a href=&quot;http://www.digitaling.com/projects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数英网&lt;/a&gt;:)&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果你问我构建触屏页面的过程中有什么困难的？&lt;br&gt;我可以拍着胸口跟可以跟你讲，有三大问题！那就是图片、图片、图片。&lt;br&gt;尤其是面对活动运营侧的需求的时候，连妈妈都要问我为什么要跪着做需求。&lt;br&gt;一个萝卜一个坑，总有一个萝卜适合你的坑。今天就来让图片加载这件事儿变得更美好，让用户跪倒你的石榴裙(牛仔裤)下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Images" scheme="http://aotu.io/tags/Images/"/>
    
      <category term="Load" scheme="http://aotu.io/tags/Load/"/>
    
      <category term="optimize" scheme="http://aotu.io/tags/optimize/"/>
    
      <category term="Mobile" scheme="http://aotu.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>图片资源Base64化在H5页面里有用武之地吗？</title>
    <link href="http://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/"/>
    <id>http://aotu.io/notes/2016/03/04/can-we-use-base64-in-h5-webapps/</id>
    <published>2016-03-03T17:45:03.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;将图片资源转至base64格式后可直接放入页面作为首屏直出，也可以放入css文件中，减少请求，以加快首屏的呈现速度。&lt;br&gt;不过图片base64化，将带来一个臃肿的html或css文件，是否会影响页面的渲染性能，浏览器又支持如何呢？&lt;/p&gt;
&lt;h3 id=&quot;如何统计？&quot;&gt;&lt;a href=&quot;#如何统计？&quot; class=&quot;headerlink&quot; title=&quot;如何统计？&quot;&gt;&lt;/a&gt;如何统计？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过Navigation Timing记录的关键时间点来统计页面完成所用的时间，并通过Chrome开发工具来跟踪细节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timing = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.performance.timing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domLoading  &lt;span class=&quot;comment&quot;&gt;//浏览器开始解析 HTML 文档第一批收到的字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domInteractive  &lt;span class=&quot;comment&quot;&gt;//  浏览器完成解析并且所有 HTML 和 DOM 构建完毕timing.domContentLoadedEventStart //DOM 解析完成后，网页内资源加载开始的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domContentLoadedEventEnd &lt;span class=&quot;comment&quot;&gt;//DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timing.domComplete &lt;span class=&quot;comment&quot;&gt;//网页上所有资源（图片等） 下载完成,且准备就绪的时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;以上定义来自&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp?hl=zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chrome官方文档&lt;/a&gt;，在其它环境下也许会有差异，从测试结果看，下面的build时间在android+微信环境中一直是0，对此可能是因为渲染机制差别，此处不做深入测试。除osx+chrome之外环境的数据仅作参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;build = timing.domComplete - timing.domContentLoadedEventStart &lt;span class=&quot;comment&quot;&gt;//间隔记录网页内资源加载和呈现时间。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;complete = timing.domComplete - timing.domLoading &lt;span class=&quot;comment&quot;&gt;//页面接收到数据开始到呈现完毕的总时间。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;场景1，内嵌至css文件中&quot;&gt;&lt;a href=&quot;#场景1，内嵌至css文件中&quot; class=&quot;headerlink&quot; title=&quot;场景1，内嵌至css文件中&quot;&gt;&lt;/a&gt;场景1，内嵌至css文件中&lt;/h2&gt;&lt;h4 id=&quot;1、原生引入图片链接做背景图&quot;&gt;&lt;a href=&quot;#1、原生引入图片链接做背景图&quot; class=&quot;headerlink&quot; title=&quot;1、原生引入图片链接做背景图&quot;&gt;&lt;/a&gt;1、原生引入图片链接做背景图&lt;/h4&gt;&lt;p&gt;一张大小为&lt;strong&gt;50kb&lt;/strong&gt;的&lt;strong&gt;jpg格式&lt;/strong&gt;图片，应用到9x15=135个dom做背景图，模拟雪碧图的模式，多个节点引用同一张图片做背景，（示例）如图。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455676041355.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;code&gt;测试环境&lt;/code&gt;：Mac OS X EI Capitan 10.xx + Chrome 48.xx&lt;br&gt;&lt;code&gt;其它辅助测试机器&lt;/code&gt;：  iPhone 6 plus iOS 9.xx； 魅族Note Android 4.xx&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际使用过程中，其它版本和机型的Android手机还有待测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关闭缓存状态下，build:150ms | complete: 200ms（总时间受网络状态等因素影响，数据做比较用）&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455624301638.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;开启缓存状态下，build: 7ms |  complete: 59ms（包括以下稳定状态下多次测试的平均值，截图为最接近平均值的状态，默认数据来自Mac+Chrome[48.XX版本]）&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455624345624.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;测试环境&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;build(单位:ms)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;complete(单位:ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;OS X+Chrome&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;iOS+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;OS X+Safari&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Android+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;2、引入base64格式图片做背景图&quot;&gt;&lt;a href=&quot;#2、引入base64格式图片做背景图&quot; class=&quot;headerlink&quot; title=&quot;2、引入base64格式图片做背景图&quot;&gt;&lt;/a&gt;2、引入base64格式图片做背景图&lt;/h4&gt;&lt;p&gt;将上面50kb大小的jpg图片转换为base64格式，加在css文件中。&lt;/p&gt;
&lt;p&gt;关闭缓存状态下，build:80ms | complete: 280ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455629551042.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;开启缓存状态下，build: 160ms |  complete: 210ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455629572545.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;测试环境&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;build(单位:ms)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;complete(单位:ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;OS X+chrome&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;160&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;210&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;iOS+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;35&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;OS X+Safari&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Android+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;3、调整图片体积&quot;&gt;&lt;a href=&quot;#3、调整图片体积&quot; class=&quot;headerlink&quot; title=&quot;3、调整图片体积&quot;&gt;&lt;/a&gt;3、调整图片体积&lt;/h4&gt;&lt;p&gt;调整上面图片的（压缩品质）体积，base64化后，对应的css文件大小也跟着改变&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;图片大小&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;10kb&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;20kb&lt;/th&gt;
&lt;th&gt;45kb&lt;/th&gt;
&lt;th&gt;100kb&lt;/th&gt;
&lt;th&gt;180kb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;对应css文件大小&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;27kb&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;42kb&lt;/td&gt;
&lt;td&gt;76kb&lt;/td&gt;
&lt;td&gt;150kb&lt;/td&gt;
&lt;td&gt;260kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Rendering时间&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;30ms&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;46ms&lt;/td&gt;
&lt;td&gt;81ms&lt;/td&gt;
&lt;td&gt;156ms&lt;/td&gt;
&lt;td&gt;258ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/data1.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;4、调整引用次数&quot;&gt;&lt;a href=&quot;#4、调整引用次数&quot; class=&quot;headerlink&quot; title=&quot;4、调整引用次数&quot;&gt;&lt;/a&gt;4、调整引用次数&lt;/h4&gt;&lt;p&gt;50kb大小的图片，base64化后，调整引用图片做背景图的dom的个数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;引用次数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;10&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;20&lt;/th&gt;
&lt;th&gt;50&lt;/th&gt;
&lt;th&gt;100&lt;/th&gt;
&lt;th&gt;135&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Rendering时间&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15ms&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19ms&lt;/td&gt;
&lt;td&gt;44ms&lt;/td&gt;
&lt;td&gt;74ms&lt;/td&gt;
&lt;td&gt;83ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/data2.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;分析和小结：&quot;&gt;&lt;a href=&quot;#分析和小结：&quot; class=&quot;headerlink&quot; title=&quot;分析和小结：&quot;&gt;&lt;/a&gt;分析和小结：&lt;/h4&gt;&lt;p&gt;在OSX+Chrome环境下，将50kb的图片base64后放入样式中，build过程拉长了约20倍，使用Timeline工具可以看到，计算样式阻塞了整个过程。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455634381569.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比起直接引入图片地址，css文件中引入base64格式的图片对样式渲染的性能消耗明显，如果大量使用，会带来耗电和发热的问题，需谨慎使用。&lt;/li&gt;
&lt;li&gt;Rendering消耗的时间同css文件大小、引用次数几乎成正比（未测试其它极限情况），在网络条件优质的4G环境，50~70ms的RTT(往返时延）情况下，通常移动网络的状况会更差，对于首屏优化，合适的使用还是很值得的。&lt;/li&gt;
&lt;li&gt;图片转成base64编码后，文档大小较原文件大了一些，而经过 gzip 后两者几乎没有区别。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;场景2，内嵌至js文件中&quot;&gt;&lt;a href=&quot;#场景2，内嵌至js文件中&quot; class=&quot;headerlink&quot; title=&quot;场景2，内嵌至js文件中&quot;&gt;&lt;/a&gt;场景2，内嵌至js文件中&lt;/h2&gt;&lt;h4 id=&quot;1、原生方式直接加载多张图片&quot;&gt;&lt;a href=&quot;#1、原生方式直接加载多张图片&quot; class=&quot;headerlink&quot; title=&quot;1、原生方式直接加载多张图片&quot;&gt;&lt;/a&gt;1、原生方式直接加载多张图片&lt;/h4&gt;&lt;p&gt;大小10~70kb共9张图片。总大小约300kb&lt;/p&gt;
&lt;p&gt;关闭缓存：build: 300ms |  complete: 310ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455634756427.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;开启缓存：build: 110ms |  complete: 120ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455634772411.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;测试环境&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;build(单位:ms)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;complete(单位:ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OS X+Chrome&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;110&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OS X+Safari&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;148&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;150&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Android+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;2、转换成base64格式，合并请求&quot;&gt;&lt;a href=&quot;#2、转换成base64格式，合并请求&quot; class=&quot;headerlink&quot; title=&quot;2、转换成base64格式，合并请求&quot;&gt;&lt;/a&gt;2、转换成base64格式，合并请求&lt;/h4&gt;&lt;p&gt;将上面的图片转成base64后，放在js文件中，加载进来。&lt;/p&gt;
&lt;p&gt;关闭缓存：build: 0ms |  complete: 400ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455634859983.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;p&gt;开启缓存：build: 0ms |  complete: 80ms&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455634882064.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;测试环境&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;build(单位:ms)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;complete(单位:ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OSX+Chrome&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;110&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;iOS+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;OS X+Safari&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Android+微信&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;3、比较不同网速下同步请求和合并请求的加载效率&quot;&gt;&lt;a href=&quot;#3、比较不同网速下同步请求和合并请求的加载效率&quot; class=&quot;headerlink&quot; title=&quot;3、比较不同网速下同步请求和合并请求的加载效率&quot;&gt;&lt;/a&gt;3、比较不同网速下同步请求和合并请求的加载效率&lt;/h4&gt;&lt;p&gt;使用上述1、2的测试demo分别在3G、4G网速条件下测试结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在网络环境差的情况下，合并请求明显缩短了整个加载时间；&lt;/li&gt;
&lt;li&gt;在网络环境较好的WIFI和4G下则差别不大。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;测试环境&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;图片直接加载 complete(单位:ms)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;base64合并请求 complete(单位:ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4G&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;450&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;WIFI&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;320&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;340&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/data3.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;分析和小结：-1&quot;&gt;&lt;a href=&quot;#分析和小结：-1&quot; class=&quot;headerlink&quot; title=&quot;分析和小结：&quot;&gt;&lt;/a&gt;分析和小结：&lt;/h4&gt;&lt;p&gt;base64后的的js资源达381kb，在一个线程里加载，消耗大量时间，从统计结果看，在渲染性能差异上并没有场景1那么明显。&lt;br&gt;但有缓存的情况下，页面渲染完成的速度甚至更快。&lt;br&gt;从Timeline里看到细节，解析这个近400kb的js文件对整个渲染过程造成了一定压力，不过总共40ms的解析时间是完全可以接受的。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/base64/1455635010603.png&quot; alt=&quot;实例图片&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从html里直直接引用图片链接和base64图片对渲染性能的影响几乎没有区别，在网络条件差的情况下，合并请求却能大大提高加载效率；&lt;/li&gt;
&lt;li&gt;直接引用至html，无法缓存，将base64后的图片资源放在js文件中管理，方便设置缓存。&lt;/li&gt;
&lt;li&gt;有一个缺点就是图片资源base64化需要扩展构建工具来支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;使用建议&quot;&gt;&lt;a href=&quot;#使用建议&quot; class=&quot;headerlink&quot; title=&quot;使用建议&quot;&gt;&lt;/a&gt;使用建议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;图片资源的base64编码进css文件会带来一定的性能消耗，需谨慎使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将图片资源编码进js文件中，管理和预加载H5应用的图片资源，合理的合并请求可以大大提高页面体验。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;将图片资源转至base64格式后可直接放入页面作为首屏直出，也可以放入css文件中，减少请求，以加快首屏的呈现速度。&lt;br&gt;不过图片base64化，将带来一个臃肿的html或css文件，是否会影响页面的渲染性能，浏览器又支持如何呢？&lt;/p&gt;
&lt;h3 id=&quot;如何统计？&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="base64" scheme="http://aotu.io/tags/base64/"/>
    
      <category term="h5" scheme="http://aotu.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>createjs开发入门</title>
    <link href="http://aotu.io/notes/2016/03/01/createjs-get-started/"/>
    <id>http://aotu.io/notes/2016/03/01/createjs-get-started/</id>
    <published>2016-02-29T20:10:15.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;通过实例简单介绍createjs的使用方法&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;PRELOADJS&quot;&gt;&lt;a href=&quot;#PRELOADJS&quot; class=&quot;headerlink&quot; title=&quot;PRELOADJS&quot;&gt;&lt;/a&gt;PRELOADJS&lt;/h2&gt;&lt;p&gt;PreloadJS是一个用来管理和协调相关资源加载的类库，它可以方便的帮助你预先加载相关资源。&lt;/p&gt;
&lt;h3 id=&quot;LoadQueue类介绍&quot;&gt;&lt;a href=&quot;#LoadQueue类介绍&quot; class=&quot;headerlink&quot; title=&quot;LoadQueue类介绍&quot;&gt;&lt;/a&gt;LoadQueue类介绍&lt;/h3&gt;&lt;p&gt;LoadQueue是一个加载管理器，可以预先加载一个文件或者一个文件队列。&lt;/p&gt;
&lt;p&gt;LoadQueue包含了几个可以订阅的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;complete: 当队列完成全部加载后触发&lt;/li&gt;
&lt;li&gt;error: 当队列遇到错误时触发&lt;/li&gt;
&lt;li&gt;progress: 整个队列变化时展示的进度&lt;/li&gt;
&lt;li&gt;fileload: 一个单独文件加载完毕&lt;/li&gt;
&lt;li&gt;fileprogress: 一个单独文件变化的进度，请注意只有文件使用XHR加载才会触发，其它只会显示0或者100%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LoadQueue支持相关文件类型如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BINARY:  XHR调用的二进制文件&lt;/li&gt;
&lt;li&gt;CSS: CSS文件&lt;/li&gt;
&lt;li&gt;IMAGE: 一般图片文件格式&lt;/li&gt;
&lt;li&gt;JAVASCRIPT: JavaScript文件&lt;/li&gt;
&lt;li&gt;JSON: JSON数据&lt;/li&gt;
&lt;li&gt;JSONP: 跨域JSON文件&lt;/li&gt;
&lt;li&gt;MANIFEST: JSON格式的文件列表&lt;/li&gt;
&lt;li&gt;SOUND: 音频文件&lt;/li&gt;
&lt;li&gt;SVG: SVG文件&lt;/li&gt;
&lt;li&gt;TEXT: 文本文件 - 仅支持XHR&lt;/li&gt;
&lt;li&gt;XML: XML数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;示例：&quot;&gt;&lt;a href=&quot;#示例：&quot; class=&quot;headerlink&quot; title=&quot;示例：&quot;&gt;&lt;/a&gt;示例：&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;manifest = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;art/sky.png&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;sky&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;art/ground.png&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ground&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;art/hill2.png&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hill2&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;art/hill1.png&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;hill&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;src:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;static/grant.json&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;grant&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;spritesheet&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var loader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.LoadQueue(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;../_assets/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.on(&lt;span class=&quot;string&quot;&gt;&quot;fileload&quot;&lt;/span&gt;, handleFileLoad);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.on(&lt;span class=&quot;string&quot;&gt;&quot;complete&quot;&lt;/span&gt;, handleComplete);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.loadManifest(manifest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;预加载音频文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;preload.installPlugin(createjs.Sound)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;设置加载路径&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;preload&lt;/span&gt; = new createjs.LoadQueue(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;../_assets/art/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;获取预加载资源&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;preload.getResult(‘&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;’);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常进度条可以通过&lt;code&gt;fileload&lt;/code&gt;和&lt;code&gt;complete&lt;/code&gt;来实现。&lt;/p&gt;
&lt;h2 id=&quot;SOUNDJS&quot;&gt;&lt;a href=&quot;#SOUNDJS&quot; class=&quot;headerlink&quot; title=&quot;SOUNDJS&quot;&gt;&lt;/a&gt;SOUNDJS&lt;/h2&gt;&lt;p&gt;一个音频播放引擎，能够根据浏览器性能选择音频播放方式。将音频文件作为模块，可随时加载和卸载。&lt;/p&gt;
&lt;h3 id=&quot;单个音频基本用法&quot;&gt;&lt;a href=&quot;#单个音频基本用法&quot; class=&quot;headerlink&quot; title=&quot;单个音频基本用法&quot;&gt;&lt;/a&gt;单个音频基本用法&lt;/h3&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; assetsPath = &lt;span class=&quot;string&quot;&gt;&quot;../_assets/audio/&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;src = assetsPath + &lt;span class=&quot;string&quot;&gt;&quot;M-GameBG.ogg&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.alternateExtensions = [&lt;span class=&quot;string&quot;&gt;&quot;mp3&quot;&lt;/span&gt;];	&lt;span class=&quot;comment&quot;&gt;// 源格式不支持时，用此格式替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;fileload&quot;&lt;/span&gt;, playSound); &lt;span class=&quot;comment&quot;&gt;// 加载完回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.registerSound(src);  &lt;span class=&quot;comment&quot;&gt;// 注册&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	soundInstance = createjs.Sound.play(event.src);  &lt;span class=&quot;comment&quot;&gt;// 播放实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多个音频用法&quot;&gt;&lt;a href=&quot;#多个音频用法&quot; class=&quot;headerlink&quot; title=&quot;多个音频用法&quot;&gt;&lt;/a&gt;多个音频用法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;registerSounds&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; assetsPath = &lt;span class=&quot;string&quot;&gt;&quot;../_assets/audio/&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; sounds = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Game-Break.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 1&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Game-Spawn.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 2&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Game-Shot.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 3&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;GU-StealDaisy.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 4&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Humm.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 5&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;R-Damage.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 6&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Thunder1.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 7&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;S-Damage.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 8&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;U-CabinBoy3.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 9&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ToneWobble.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 10&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Game-Death.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 11&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;src&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Game-Break.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt; 12&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.alternateExtensions&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;&quot;mp3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;fileload&quot;&lt;/span&gt;, createjs.proxy(soundLoaded, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.registerSounds(sounds, assetsPath);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;声音合成&quot;&gt;&lt;a href=&quot;#声音合成&quot; class=&quot;headerlink&quot; title=&quot;声音合成&quot;&gt;&lt;/a&gt;声音合成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AudioSprite例子&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.initializeDefaultPlugins();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var assetsPath = &lt;span class=&quot;string&quot;&gt;&quot;./assets/&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sounds = [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    src:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;MyAudioSprite.ogg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;data:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;        audioSprite:&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;sound1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;startTime:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;sound2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;startTime:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;span class=&quot;string&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;sound3&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;startTime:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1700&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.alternateExtensions = [&lt;span class=&quot;string&quot;&gt;&quot;mp3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.on(&lt;span class=&quot;string&quot;&gt;&quot;fileload&quot;&lt;/span&gt;, loadSound);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.registerSounds(sounds, assetsPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// after load is complete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Sound.play(&lt;span class=&quot;string&quot;&gt;&quot;sound2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;AudioSprite安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g audiosprite&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;homebrew安装ffmpeg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FFmpeg and the ogg codecs on OSX using brew:&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install ffmpeg --&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;-theora --&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;-libogg --&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;-libvorbis&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;生成音频文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;audiosprite&lt;/span&gt; --autoplay &lt;span class=&quot;keyword&quot;&gt;bg_loop &lt;/span&gt;--output mygameaudio &lt;span class=&quot;keyword&quot;&gt;bg_loop.wav &lt;/span&gt;*.mp3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可选参数可以设置是否自动播放等，具体请参考&lt;a href=&quot;https://github.com/tonistiigi/audiosprite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线导出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把生成好的json文件，导入到以下链接，才能供soundjs使用&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/bharat_battu/g8fFP/12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jsfiddle.net/bharat_battu/g8fFP/12/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TWEENJS&quot;&gt;&lt;a href=&quot;#TWEENJS&quot; class=&quot;headerlink&quot; title=&quot;TWEENJS&quot;&gt;&lt;/a&gt;TWEENJS&lt;/h2&gt;&lt;p&gt;TweenJS类库主要用来调整和动画HTML5和Javascript属性。提供了简单并且强大的tweening接口。支持数字对象属性和CSS样式属性，允许你使用链式语法来生成复杂的过程&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/tweenjs.gif&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;createjs&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Tween&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.get&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;target&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.to&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;&amp;#125;,400,&lt;span class=&quot;selector-tag&quot;&gt;createjs&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Ease&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bounceInOut&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.set&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;label&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;hello!&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.wait&lt;/span&gt;(500)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.to&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;alpha&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,visible:false&amp;#125;,1000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.call&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;onComplete&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt; 获取目标元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to&lt;/code&gt; 执行动画&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; 设置属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt; 队列等待&lt;/li&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt; 执行回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createjs.Ease.bounceInOut&lt;/code&gt; 缓动效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;引导动画&quot;&gt;&lt;a href=&quot;#引导动画&quot; class=&quot;headerlink&quot; title=&quot;引导动画&quot;&gt;&lt;/a&gt;引导动画&lt;/h3&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;createjs.MotionGuidePlugin.install(createjs.Tween)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Tween.get(target).to(&amp;#123;guide:&amp;#123; path:[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0,200,200,200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200,0,0,0&lt;/span&gt;] &amp;#125;&amp;#125;,&lt;span class=&quot;number&quot;&gt;7000&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//path所设置的坐标等同于下面画曲线的坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;graphics.moveTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).curveTo(&lt;span class=&quot;number&quot;&gt;0,200,200,200&lt;/span&gt;).curveTo(&lt;span class=&quot;number&quot;&gt;200,0,0,0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/guidemotion.gif&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;EASELJS&quot;&gt;&lt;a href=&quot;#EASELJS&quot; class=&quot;headerlink&quot; title=&quot;EASELJS&quot;&gt;&lt;/a&gt;EASELJS&lt;/h2&gt;&lt;p&gt;EaselJS 是一个用以与 HTML5 canvas 协作的库。它包含一个完整的分层展示列表、一个核心交互模型以及一些辅助类，通过其来使与 Canvas 的协作更简单。&lt;/p&gt;
&lt;h3 id=&quot;先看例子&quot;&gt;&lt;a href=&quot;#先看例子&quot; class=&quot;headerlink&quot; title=&quot;先看例子&quot;&gt;&lt;/a&gt;先看例子&lt;/h3&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/grantrun.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面介绍这个例子的制作过程&lt;/p&gt;
&lt;h3 id=&quot;素材准备&quot;&gt;&lt;a href=&quot;#素材准备&quot; class=&quot;headerlink&quot; title=&quot;素材准备&quot;&gt;&lt;/a&gt;素材准备&lt;/h3&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/1.pic.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;人物精灵图会用到&lt;strong&gt;flash&lt;/strong&gt;+&lt;strong&gt;zoe&lt;/strong&gt;来生成&lt;/p&gt;
&lt;p&gt;打开flash，新建一个新的as3项目，导入图片，只要文件名是有序的，会自动导入到每一帧，如下图&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/2.pic.png&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/3.pic.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;导入完之后，新建一个图层，来放动作标签，如上面的&lt;code&gt;run&lt;/code&gt;和&lt;code&gt;jump&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后再新建一个新的图层用来放动作脚本，这里只需要写&lt;code&gt;stop()&lt;/code&gt;就可以了，这样整个动画是处于静止状态。&lt;/p&gt;
&lt;p&gt;然后用快捷键&lt;code&gt;Ctrl + enter&lt;/code&gt;发布成swf格式，并把它导入到&lt;strong&gt;zoe&lt;/strong&gt;工具,效果如下&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/20160229/4.pic.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;tab选项卡切换到&lt;code&gt;Animations&lt;/code&gt; 可以预览和设置刚才在flash设置的动作。&lt;/p&gt;
&lt;p&gt;最后导出json代码供后续使用&lt;/p&gt;
&lt;h3 id=&quot;开发阶段&quot;&gt;&lt;a href=&quot;#开发阶段&quot; class=&quot;headerlink&quot; title=&quot;开发阶段&quot;&gt;&lt;/a&gt;开发阶段&lt;/h3&gt;&lt;p&gt;createjs中，元素都是放到舞台中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;舞台创建&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;canvas id=&lt;span class=&quot;string&quot;&gt;&quot;testCanvas&quot;&lt;/span&gt; width=&lt;span class=&quot;string&quot;&gt;&quot;960&quot;&lt;/span&gt; height=&lt;span class=&quot;string&quot;&gt;&quot;400&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stage = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.Stage(&lt;span class=&quot;string&quot;&gt;&quot;testCanvas&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;天空&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sky = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.Shape()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sky.graphics.beginBitmapFill(loader.getResult(&lt;span class=&quot;string&quot;&gt;&quot;sky&quot;&lt;/span&gt;)).drawRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;w&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shape&lt;/code&gt;类，通常用于画图，例如画矩形，圆形时会使用到&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地板&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var groundImg = loader.getResult(&lt;span class=&quot;string&quot;&gt;&quot;ground&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ground = new createjs.Shape()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ground.graphics.beginBitmapFill(groundImg).drawRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, w + groundImg.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;, groundImg.height)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ground.tileW = groundImg.&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ground.y = h - groundImg.height&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;山&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hill = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.Bitmap(loader.getResult(&lt;span class=&quot;string&quot;&gt;&quot;hill&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hill.setTransform(Math.&lt;span class=&quot;built_in&quot;&gt;random&lt;/span&gt;() * w, h - hill.&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; - groundImg.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hill.&lt;span class=&quot;built_in&quot;&gt;alpha&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Bitmap&lt;/code&gt;类，常用于位图处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人物&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; spriteSheet = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.SpriteSheet(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;framerate&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;images&quot;&lt;/span&gt;: [loader.getResult(&lt;span class=&quot;string&quot;&gt;&quot;grant&quot;&lt;/span&gt;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;frames&quot;&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;regX&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;height&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;292&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;count&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;regY&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;width&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;165&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;animations&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;string&quot;&gt;&quot;jump&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; grant = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.Sprite(spriteSheet, &lt;span class=&quot;string&quot;&gt;&quot;run&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;人物用到&lt;code&gt;Sprite&lt;/code&gt;类，精灵图存放在&lt;code&gt;SpriteSheet&lt;/code&gt;中，刚才用&lt;strong&gt;flash&lt;/strong&gt; + &lt;strong&gt;zoe&lt;/strong&gt; 生成的json，可以直接传入到&lt;code&gt;SpriteSheet&lt;/code&gt;初始化对象中。&lt;/p&gt;
&lt;p&gt;还可以直接使用代码&lt;code&gt;gotoAndPlay(&amp;#39;run&amp;#39;)&lt;/code&gt;来进行动作间的切换。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素加入舞台&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stage.&lt;span class=&quot;keyword&quot;&gt;addChild(sky, &lt;/span&gt;hill, hill2, ground, grant)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;让物体动起来&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;createjs.Ticker.setFPS(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createjs.Ticker.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;tick&quot;&lt;/span&gt;, handleTick);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleTick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//物品移动逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stage.update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h2&gt;&lt;h3 id=&quot;开启鼠标检测&quot;&gt;&lt;a href=&quot;#开启鼠标检测&quot; class=&quot;headerlink&quot; title=&quot;开启鼠标检测&quot;&gt;&lt;/a&gt;开启鼠标检测&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.enableMouseOver&lt;/span&gt;(20);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;开启触摸&quot;&gt;&lt;a href=&quot;#开启触摸&quot; class=&quot;headerlink&quot; title=&quot;开启触摸&quot;&gt;&lt;/a&gt;开启触摸&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;createjs&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Touch&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.enable&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.stage&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Request-Animation-Frame&quot;&gt;&lt;a href=&quot;#Request-Animation-Frame&quot; class=&quot;headerlink&quot; title=&quot;Request Animation Frame&quot;&gt;&lt;/a&gt;Request Animation Frame&lt;/h3&gt;&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;createjs.Ticker.timingMode = createjs.Ticker.RAF&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h3&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;shape&lt;/span&gt;.cache(x,y,&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Mask&quot;&gt;&lt;a href=&quot;#Mask&quot; class=&quot;headerlink&quot; title=&quot;Mask&quot;&gt;&lt;/a&gt;Mask&lt;/h3&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bmp.mask &lt;/span&gt;= star&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;碰撞检测&quot;&gt;&lt;a href=&quot;#碰撞检测&quot; class=&quot;headerlink&quot; title=&quot;碰撞检测&quot;&gt;&lt;/a&gt;碰撞检测&lt;/h3&gt;&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myShape.hitTest(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;,y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://createjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://createjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CreateJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CreateJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tonistiigi/audiosprite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tonistiigi/audiosprite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;通过实例简单介绍createjs的使用方法&lt;br&gt;
    
    </summary>
    
    
      <category term="createjs" scheme="http://aotu.io/tags/createjs/"/>
    
      <category term="tweenjs" scheme="http://aotu.io/tags/tweenjs/"/>
    
      <category term="zoe" scheme="http://aotu.io/tags/zoe/"/>
    
      <category term="preloadjs" scheme="http://aotu.io/tags/preloadjs/"/>
    
      <category term="soundjs" scheme="http://aotu.io/tags/soundjs/"/>
    
      <category term="easeljs" scheme="http://aotu.io/tags/easeljs/"/>
    
  </entry>
  
  <entry>
    <title>初探Docker</title>
    <link href="http://aotu.io/notes/2016/02/27/docker/"/>
    <id>http://aotu.io/notes/2016/02/27/docker/</id>
    <published>2016-02-26T17:55:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;本文旨在让大家了解什么是Docker，并带领大家体验Docker使用的整个流程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;开启Docker学习之旅前，我们简单描述几个场景，应该很多人都有碰到过：&lt;/p&gt;
&lt;p&gt;小凹同学开发了一个web应用，服务器环境是: &lt;code&gt;centos 7&lt;/code&gt; + &lt;code&gt;nginx&lt;/code&gt; + &lt;code&gt;node4.6&lt;/code&gt; + &lt;code&gt;mongodb3.2.3&lt;/code&gt; 最近要上线了。&lt;/p&gt;
&lt;p&gt;【场景1】：刚好公司有一台服务器可以用，但是服务器上有一些其他服务，而且已经装了&lt;code&gt;node3.31&lt;/code&gt;和&lt;code&gt;mongodb2.3&lt;/code&gt;，小凹蒙了，到底是直接升级环境呢？还是改一个适配低版本的应用呢？&lt;/p&gt;
&lt;p&gt;【场景2】：终于花了很久时间部署上了，慢慢的项目需求越来越多，小凹的同事小凸也准备一起迭代这个项目，小凸又要重新配置一遍应用环境到本地做测试，随着越来越多的同事参与进来，每个人都要配置一遍本地测试环境，重复工作，时间又白白浪费掉。&lt;/p&gt;
&lt;p&gt;【场景3】：随着项目越做越大，现有服务器配置和带宽已经不能满足了，小凹需要把这个项目迁移出去并做水平扩展，然后又得重复配置环境到多台服务器，而且这些服务器有可能还是会重复前面的场景1。&lt;/p&gt;
&lt;p&gt;【场景4】：运维要清理一些服务器，整理出来，把没有完全利用的服务器，分给新的项目用，要罗列出来每台服务器的服务，然后删除掉不需要的，这时候发现完全无从下手。&lt;/p&gt;
&lt;p&gt;上面的场景经常发生，也许就发生在你我身边，而且无比头疼，但对Docker来说解决这些问题都易如反掌，下面我们就一步步来了解并使用Docker。&lt;/p&gt;
&lt;h2 id=&quot;什么是Docker？&quot;&gt;&lt;a href=&quot;#什么是Docker？&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker？&quot;&gt;&lt;/a&gt;什么是Docker？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker&lt;/a&gt;是一个&lt;a href=&quot;https://github.com/docker/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源&lt;/a&gt;的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;虚拟机&lt;/a&gt;）、&lt;a href=&quot;https://en.wikipedia.org/wiki/BareMetal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bare metal&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/OpenStack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenStack&lt;/a&gt; 集群和其他的基础应用平台。&lt;/p&gt;
&lt;p&gt;官方的描述是：Build, Ship, and Run Any App, Anywhere 在任何地方部署，传输，运行任何应用。&lt;/p&gt;
&lt;p&gt;其实很像虚拟机，但是跟虚拟机比起来 更灵活,速度更快，CPU/内存消耗更低，关键是更方便管理。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/lizhi/docker/docker-filesystems-multilayer3.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图就是一张Docker层级图， 最下面是核心系统，文件系统等构成Dokcer底层，上面的是镜像（image），分为基础镜像和普通镜像，所有镜像可以直接启动生成一个实例（container），container我们可以理解为一个可以直接运行的虚拟机了。&lt;/p&gt;
&lt;p&gt;其中基础image 启动后生成container，然后添加一些应用如 &lt;code&gt;apache&lt;/code&gt;，&lt;code&gt;emacs&lt;/code&gt;，可以通过提交操作直接生成普通的image。 我们可以共享这个image到任何地方，并启动它。&lt;/p&gt;
&lt;h2 id=&quot;使用Docker&quot;&gt;&lt;a href=&quot;#使用Docker&quot; class=&quot;headerlink&quot; title=&quot;使用Docker&quot;&gt;&lt;/a&gt;使用Docker&lt;/h2&gt;&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h3&gt;&lt;p&gt;Docker 可以安装在 &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;Mac OS&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt; 上，详细安装步骤可以参考 &lt;strong&gt;&lt;a href=&quot;https://docs.docker.com/engine/installation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方安装文档&lt;/a&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：本文就不一一举例所有的安装方法，就以操作系统 &lt;strong&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/CentOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;centos&lt;/a&gt;&lt;/strong&gt; 为例。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由于docker 只支持 &lt;code&gt;centos6&lt;/code&gt;以上，&lt;code&gt;64&lt;/code&gt;位的版本操作系统，所以安装前可以用以下命令查看服务器系统。&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ getconf LONG_BIT           &lt;span class=&quot;comment&quot;&gt;//查看操作系统是多少位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cat /etc/redhat-&lt;span class=&quot;built_in&quot;&gt;release&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//查看操作系统版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; CentOS Linux &lt;span class=&quot;built_in&quot;&gt;release&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1406&lt;/span&gt; (Core)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是我使用的机器 &lt;code&gt;centos7&lt;/code&gt; &lt;code&gt;64&lt;/code&gt;位系统，我就以这个为例讲下面的使用步骤。&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ curl -fsSL &lt;span class=&quot;keyword&quot;&gt;https&lt;/span&gt;://&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;.docker.com/ | sh&lt;span class=&quot;comment&quot;&gt; //安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker &lt;span class=&quot;built_in&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt; // 查看是否安装成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;strong&gt;安装失败&lt;/strong&gt; 可以尝试使用阿里云的代理安装。&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;curl -sSL &lt;span class=&quot;symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker&lt;/span&gt;-engine/internet | sh -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他更详细的阿里云Docker代理加速器文档，可以点击&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/5974865.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装成功后启动Docker，并设置开机启动。&lt;br&gt;&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service docker &lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt; //开启Docker 服务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo chkconfig docker &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;   //开机启动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取基础镜像&quot;&gt;&lt;a href=&quot;#获取基础镜像&quot; class=&quot;headerlink&quot; title=&quot;获取基础镜像&quot;&gt;&lt;/a&gt;获取基础镜像&lt;/h3&gt;&lt;p&gt;&lt;em&gt;注：假定我需要部署一个基于&lt;code&gt;centos&lt;/code&gt;的应用，当然也可以换成别的，比如：&lt;code&gt;Redis&lt;/code&gt; 或者 &lt;code&gt;Ubuntu&lt;/code&gt;，可以是任何镜像来当做基础镜像，跟本机原有系统无关，只与所要部署的应用有关。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;首先搜索需要获取的 &lt;strong&gt;&lt;a href=&quot;https://hub.docker.com/explore/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;镜像&lt;/a&gt;&lt;/strong&gt;，这是官方&lt;code&gt;Docker Hub&lt;/code&gt;提供的镜像资源。 &lt;/p&gt;
&lt;p&gt;比如，我选择获取 &lt;strong&gt;&lt;a href=&quot;https://hub.docker.com/_/centos/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;centos最新版本&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull centos &lt;span class=&quot;comment&quot;&gt;//获取centos最近版本的镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/lizhi/docker/dockerimages.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用命令 &lt;code&gt;docker images&lt;/code&gt; 就能查到刚才获取的 &lt;code&gt;centos&lt;/code&gt; 的镜像，如上图。&lt;/p&gt;
&lt;h3 id=&quot;配置新的镜像&quot;&gt;&lt;a href=&quot;#配置新的镜像&quot; class=&quot;headerlink&quot; title=&quot;配置新的镜像&quot;&gt;&lt;/a&gt;配置新的镜像&lt;/h3&gt;&lt;p&gt;&lt;em&gt;注：为了方便演示，假定我们的服务只需要安装一个&lt;code&gt;zip&lt;/code&gt;的&lt;code&gt;centos&lt;/code&gt;系统。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;将上面获取的 &lt;code&gt;centos&lt;/code&gt; 镜像，启动生成container，并在container中安装zip。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z image]&lt;span class=&quot;comment&quot;&gt;# docker run -t -i centos /bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; 启动容器，&lt;code&gt;-t&lt;/code&gt;:为容器重新分配一个伪输入终端，通常与 -i 同时使用； &lt;code&gt;-i&lt;/code&gt;:以交互模式运行容器，通常与 -t 同时使用；&lt;code&gt;centos&lt;/code&gt; 为镜像名， 镜像名通常以 &lt;strong&gt;镜像名:版本&lt;/strong&gt; 来使用，因为centos没有版本所以省略, 后面 &lt;code&gt;/bin/bash&lt;/code&gt; 是启动container后运行的程序。&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@e44ea4258885 /]# &lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//先运行zip，发现是没有安装的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bash: &lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;: command not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@90934d1f4225 /]# yum install &lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//安装zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@90934d1f4225 /]# &lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//查看zip，安装成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Copyright&lt;/span&gt; (c) 1990-2008 Info-&lt;span class=&quot;keyword&quot;&gt;ZIP&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;Type&lt;/span&gt; &#39;&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;-L&quot;&lt;/span&gt;&#39; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; software license.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Zip&lt;/span&gt; 3.0 (July 5th 2008). Usage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用container命令行安装&lt;code&gt;zip&lt;/code&gt;成功。&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root&lt;span class=&quot;symbol&quot;&gt;@90934d1f4225&lt;/span&gt; /]&lt;span class=&quot;meta&quot;&gt;# exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;退出容器命令行，因为不是后台运行，所以退出后，container也随即关闭了。&lt;code&gt;-d&lt;/code&gt; 可以让container在后台运行，并可以随时通过&lt;code&gt;docker attach&lt;/code&gt; 命令进入容器，具体例子可以看&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/attach/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;,因为不是本文重点就不展开说明了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; 命令可以查看当前启动的 container， &lt;code&gt;-a&lt;/code&gt; 启动和没启动的都会展示。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z image]&lt;span class=&quot;comment&quot;&gt;# docker ps -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;f08b2b67380        centos              &lt;span class=&quot;string&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;         &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; minutes ago      Exited (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; minutes ago                       lonely_euler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有一个id为 8f08b2b67380的container，这个就是我们刚才安装了zip，并退出的container。&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z &lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;]&lt;span class=&quot;meta&quot;&gt;# docker commit -m &lt;span class=&quot;string&quot;&gt;&quot;Added zip install&quot;&lt;/span&gt; 8f08b2b67380 test:1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sha256:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;f1d192a4ea2a80801e33cd5fadb5f37180bb718f729f77a404a347b977d753c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt; 将container提交生成image， &lt;code&gt;-m&lt;/code&gt;：为描述, 后面紧接着的是container的id， &lt;code&gt;test:1&lt;/code&gt; 是提交的镜像名称和版本。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z image]&lt;span class=&quot;comment&quot;&gt;# docker images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          &lt;span class=&quot;keyword&quot;&gt;TAG&lt;/span&gt;                 &lt;span class=&quot;title&quot;&gt;IMAGE&lt;/span&gt; ID            CREATED              SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test                 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                   &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;f1d192a4ea2        About a minute ago   &lt;span class=&quot;number&quot;&gt;266.7&lt;/span&gt; MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;centos              latest              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f0be3675ebb        &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; days ago           &lt;span class=&quot;number&quot;&gt;196.6&lt;/span&gt; MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再查看的时候已经多了一个image了，这个image就是我们安装了zip的image，到此我们已经生成一个新的image。&lt;/p&gt;
&lt;p&gt;我们可以直接通过这个新的镜像启动容器，还是前面介绍过的命令&lt;code&gt;docker run&lt;/code&gt; 并测试下zip，如下：&lt;br&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z image]# sudo docker &lt;span class=&quot;keyword&quot;&gt;run&lt;/span&gt; -t -i o2team-&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;:2 /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@2f1f28be351c /]# &lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Copyright&lt;/span&gt; (c) 1990-2008 Info-&lt;span class=&quot;keyword&quot;&gt;ZIP&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;Type&lt;/span&gt; &#39;&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;-L&quot;&lt;/span&gt;&#39; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; software license.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Zip&lt;/span&gt; 3.0 (July 5th 2008). Usage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了这个镜像已经制作完成，当然实际情况下，安装的肯定不仅仅只有zip这么简单。&lt;/p&gt;
&lt;p&gt;但是在一个团队里，仅仅给我们image，我们可能不知道这个镜像到底做了什么，所以还有一种方法使用 配置文件&lt;code&gt;Dockerfile&lt;/code&gt;，build出来一个镜像，这样更易于团队协作,下面我将介绍一下这种方式。&lt;/p&gt;
&lt;h3 id=&quot;通过Dockerfile-配置新的image&quot;&gt;&lt;a href=&quot;#通过Dockerfile-配置新的image&quot; class=&quot;headerlink&quot; title=&quot;通过Dockerfile 配置新的image&quot;&gt;&lt;/a&gt;通过Dockerfile 配置新的image&lt;/h3&gt;&lt;p&gt;开始之前顺便介绍删除image和container的命令，它们分别是&lt;code&gt;docker rmi&lt;/code&gt; 删除image 和 &lt;code&gt;docker rm&lt;/code&gt; 删除container，后面都是跟对应的id或者名称，为了后面的操作我们这里通过命令 &lt;code&gt;docker rmi 8f1d192a4ea2&lt;/code&gt; 删除掉刚才建的image。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：如果发现删不掉image，可能被某些容器引用了，可以通过上面介绍的&lt;code&gt;docker ps -a&lt;/code&gt;查看container，并用 &lt;code&gt;docker rm&lt;/code&gt;删除掉这个container&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;接着我们创建&lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;mkdir o2team&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;cd o2team&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;touch Dockerfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;Dockerfile&lt;/code&gt; 中的内容&lt;br&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Dockerfile for o2team&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# http://aotu.io/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; centos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;MAINTAINER&lt;/span&gt; lizhi &amp;lt;fanlizhi@jd.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;yum -y install zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt;为注释，&lt;code&gt;FROM centos&lt;/code&gt; 为基础镜像来源，&lt;code&gt;MAINTAINER&lt;/code&gt;为作者信息, &lt;code&gt;RUN&lt;/code&gt; 则为 运行某些 命令，编辑完成后保存，然后我们就可以直接构建我们新的image，Dockerfile详细使用文档可以参看&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root&lt;span class=&quot;symbol&quot;&gt;@AY130809220512304015Z&lt;/span&gt; o2team-test]&lt;span class=&quot;meta&quot;&gt;# docker build -t test:1 .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt;就是通过Dockfile来创建一个新的Image，其中 &lt;code&gt;-t&lt;/code&gt;:为新image的名字这里命名为test:1， &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt; 则会在当前的目录下找 &lt;code&gt;Dockerfile&lt;/code&gt; 文件,当然这里也可以指定路径。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z o2team-test]&lt;span class=&quot;comment&quot;&gt;# docker images&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          &lt;span class=&quot;keyword&quot;&gt;TAG&lt;/span&gt;                 &lt;span class=&quot;title&quot;&gt;IMAGE&lt;/span&gt; ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test                &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                   &lt;span class=&quot;number&quot;&gt;8975&lt;/span&gt;f3fb142e        &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; seconds ago       &lt;span class=&quot;number&quot;&gt;266.7&lt;/span&gt; MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;centos              latest              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f0be3675ebb        &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; days ago          &lt;span class=&quot;number&quot;&gt;196.6&lt;/span&gt; MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就这样，通过&lt;code&gt;docker images&lt;/code&gt;也能生成一个新的镜像了，这种用Dockerfile的方式更加适合团队使用，环境配置更清晰。&lt;/p&gt;
&lt;p&gt;到这里，我们只需要管理我们的镜像就好了，比如同步镜像给其他人，或者其他机器。&lt;/p&gt;
&lt;p&gt;其实docker就给我们提供了这样一整套的解决方案，我们可以把我们的镜像提交到 &lt;strong&gt;&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;&lt;/strong&gt;，类似 &lt;code&gt;github&lt;/code&gt;一样的远程仓库，当我们需要的时候只需要 pull下来启动就好了。&lt;/p&gt;
&lt;h3 id=&quot;提交&quot;&gt;&lt;a href=&quot;#提交&quot; class=&quot;headerlink&quot; title=&quot;提交&quot;&gt;&lt;/a&gt;提交&lt;/h3&gt;&lt;p&gt;我们就把这个test镜像提交到&lt;code&gt;Docker Hub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先我们得先注册：&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册成功后就可以&lt;code&gt;docker login&lt;/code&gt;登录了&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root&lt;span class=&quot;symbol&quot;&gt;@AY130809220512304015Z&lt;/span&gt; o2team-test]&lt;span class=&quot;meta&quot;&gt;# docker login&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Username: a569171010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Password: xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Email: fanlizhi&lt;span class=&quot;symbol&quot;&gt;@jd&lt;/span&gt;.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Login Succeeded&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;填完登录后就可以push了，注意这里push之前得确保名称是 &lt;code&gt;youruser/xxx&lt;/code&gt;&lt;br&gt;比如我的用户名是 a569171010 所以我需要将刚才的image 重命名成 a569171010/test:1,这里可以用&lt;code&gt;docker tag&lt;/code&gt;命令重命名。&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z o2team-&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;]# docker tag &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; a569171010/&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@AY130809220512304015Z o2team-&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;]# docker &lt;span class=&quot;keyword&quot;&gt;push&lt;/span&gt; a569171010/&lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就发布出去了，在 &lt;strong&gt;&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;&lt;/strong&gt; 上就可以看到下面多了这一条记录，当我们要获取的时候就直接 &lt;code&gt;docker pull a569171010/test&lt;/code&gt;就可以了，因为是公用库所以任何人都可以获取并使用。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/lizhi/docker/a569171010-test.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我们已经基本熟悉，了解了整个Docker使用的流程，回过头来看看开始我们抛出的那几个曾经很棘手的问题，是不是都能迎刃而解呢？因为image的可移植和隔离性，我们不仅可以轻松迁移扩展，还能轻松了解现在机器上各个服务运行情况。&lt;/p&gt;
&lt;p&gt;下图为Docker整个使用流程：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/lizhi/docker/cmmd.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;本文参考资料&quot;&gt;&lt;a href=&quot;#本文参考资料&quot; class=&quot;headerlink&quot; title=&quot;本文参考资料&quot;&gt;&lt;/a&gt;本文参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 官方文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.widuu.com/docker/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 中文指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://dockone.io/article/101&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dockone.io 国内比较活跃的Docker论坛&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tech.meituan.com/docker_introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 入门介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/docker/docker-registry&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/5974865.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里镜像使用文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh/Docker_(%E8%BB%9F%E9%AB%94&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;还想了解的&quot;&gt;&lt;a href=&quot;#还想了解的&quot; class=&quot;headerlink&quot; title=&quot;还想了解的&quot;&gt;&lt;/a&gt;还想了解的&lt;/h3&gt;&lt;p&gt;这篇文章只是带领大家了解Docker的整个使用流程和体验，关于其他的一些细节问题比如：后台运行container，各container之间的通讯，端口映射，文件共享等都没有涉及到,最近&lt;code&gt;docker1.1.0&lt;/code&gt;发布又有很多新的特性和性能优化，如果有兴趣的同学可以参考这些：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.uc.cn/?p=2726&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;利用Docker构建开发环境&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.gitbook.com/book/yeasy/docker_practice/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker-从入门到实践&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/veggiemonk/awesome-docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker-学习资料&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.docker.com/2016/02/docker-1-10/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker 1.1.0新特性&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在让大家了解什么是Docker，并带领大家体验Docker使用的整个流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://aotu.io/tags/docker/"/>
    
      <category term="环境" scheme="http://aotu.io/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="部署" scheme="http://aotu.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="docker hub" scheme="http://aotu.io/tags/docker-hub/"/>
    
  </entry>
  
  <entry>
    <title>使用npm scripts替代gulp</title>
    <link href="http://aotu.io/notes/2016/02/26/use-npm-script-instead-of-gulp/"/>
    <id>http://aotu.io/notes/2016/02/26/use-npm-script-instead-of-gulp/</id>
    <published>2016-02-25T16:06:24.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;为什么要用npm-scripts替代gulp&quot;&gt;&lt;a href=&quot;#为什么要用npm-scripts替代gulp&quot; class=&quot;headerlink&quot; title=&quot;为什么要用npm scripts替代gulp&quot;&gt;&lt;/a&gt;为什么要用&lt;code&gt;npm scripts&lt;/code&gt;替代&lt;code&gt;gulp&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;现在&lt;code&gt;前端自动化&lt;/code&gt;的配套工具估计都离不开&lt;code&gt;gulp&lt;/code&gt;或者是&lt;code&gt;grunt&lt;/code&gt;，有一些或许会用上&lt;code&gt;webpack&lt;/code&gt;辅助用上最新的&lt;code&gt;ES6&lt;/code&gt;语法等；但是不知道大家在使用&lt;code&gt;gulp&lt;/code&gt;众多插件的时候有没有碰到过一些问题，比如：有一些插件你仅仅需要用到其中一点点的API、插件更新速度非常慢、有一些插件碰到bug的时候调试起来非常麻烦等。所以总结一下&lt;code&gt;gulp&lt;/code&gt;或者&lt;code&gt;grunt&lt;/code&gt;其实都会有以下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依赖于插件作者&lt;/li&gt;
&lt;li&gt;调试很不方便&lt;/li&gt;
&lt;li&gt;插件文档说明不连贯&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而如果直接使用&lt;code&gt;npm scripts&lt;/code&gt;完全可以避免这些问题，在我们&lt;code&gt;package.json&lt;/code&gt;里面的&lt;code&gt;scripts&lt;/code&gt;属性直接定义需要执行的任务，比如&lt;code&gt;npm start&lt;/code&gt;和&lt;code&gt;npm test&lt;/code&gt;其实就是&lt;code&gt;npm run start&lt;/code&gt;和&lt;code&gt;npm run test&lt;/code&gt;的缩写，我们可以在&lt;code&gt;scripts&lt;/code&gt;里面定义各种需要的任务，举个最简单的例子(清除dist目录)：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 1.用gulp插件来实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var gulp = require(&#39;gulp&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var del  = require(&#39;del&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&#39;clean&#39;, function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    del([&#39;./dist/**/*&#39;]).then(paths =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&#39;Deleted files and folders:\n&#39;, paths.join(&#39;\n&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 2.用npm scripts来实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# package.json配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;scripts&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clean: &quot;rimraf ./dist&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;devDependencies&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;rimraf&quot;: &quot;^2.5.2&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面示例代码可以看出明显直接用&lt;code&gt;npm scripts&lt;/code&gt;实现的同一个功能相对&lt;code&gt;gulp&lt;/code&gt;要简单得多，当然这个功能比较简单，如果碰到复杂的一些任务肯定就有反对的声音了。那我们将细细将上面三点来阐述。&lt;/p&gt;
&lt;h3 id=&quot;依赖于插件作者&quot;&gt;&lt;a href=&quot;#依赖于插件作者&quot; class=&quot;headerlink&quot; title=&quot;依赖于插件作者&quot;&gt;&lt;/a&gt;依赖于插件作者&lt;/h3&gt;&lt;p&gt;当你需要使用到最新的或者不那么流行的技术时，根本就没有插件给你使用；或者一些插件已经过时了。最新&lt;code&gt;Babel 6&lt;/code&gt;已经发布，很多API明显修改了，所以很多&lt;code&gt;gulp&lt;/code&gt;插件根本不适用于最新版本。&lt;/p&gt;
&lt;p&gt;这个时候你就必须等待作者来更新插件，或者你自己去&lt;code&gt;fix&lt;/code&gt;这些问题，这会导致你不能及时用上最新版本的工具。相反，当你直接使用&lt;code&gt;npm scripts&lt;/code&gt;的时候，你只需要直接找到可以实现的工具即可。这意味着当新版本的&lt;code&gt;Mocha&lt;/code&gt;、&lt;code&gt;Babel&lt;/code&gt;、&lt;code&gt;Webpack&lt;/code&gt;、&lt;code&gt;Browserify&lt;/code&gt;发布的时候，你就可以马上用上这些版本。&lt;/p&gt;
&lt;p&gt;就目前插件数量来说，没有什么可以打败&lt;code&gt;npm&lt;/code&gt;包：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;npm包数量跟gulp对比&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/npm-compare-width-gulp.png&quot; alt=&quot;Gulp大约有2100个插件，Grunt大约有5400个，而npm提供了227000个包，而且每天以400的速度在增加&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;调试很不方便&quot;&gt;&lt;a href=&quot;#调试很不方便&quot; class=&quot;headerlink&quot; title=&quot;调试很不方便&quot;&gt;&lt;/a&gt;调试很不方便&lt;/h3&gt;&lt;p&gt;由于&lt;code&gt;gulp&lt;/code&gt;增加了一层抽象，所以会有潜在的&lt;code&gt;bug&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否基础工具崩溃了？&lt;/li&gt;
&lt;li&gt;是否&lt;code&gt;Grunt&lt;/code&gt;/&lt;code&gt;Gulp&lt;/code&gt;插件崩溃了？&lt;/li&gt;
&lt;li&gt;是否配置文件出错了？&lt;/li&gt;
&lt;li&gt;是否用了不稳定的版本？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而直接使用&lt;code&gt;npm scripts&lt;/code&gt;直接避免了第2点跟第3点，而由于不使用那么多插件，那么包相对较少，第4点也很少会碰到。&lt;/p&gt;
&lt;h3 id=&quot;插件文档说明不连贯&quot;&gt;&lt;a href=&quot;#插件文档说明不连贯&quot; class=&quot;headerlink&quot; title=&quot;插件文档说明不连贯&quot;&gt;&lt;/a&gt;插件文档说明不连贯&lt;/h3&gt;&lt;p&gt;相比有用过很多插件的人都知道，一些核心的工具文档写得总比包装起来的&lt;code&gt;Gulp&lt;/code&gt;插件要清晰得多。举个简单的例子来说，如果我需要用到&lt;code&gt;gulp-eslint&lt;/code&gt;插件，那么就可能会不断在&lt;code&gt;gulp-eslint&lt;/code&gt;的文档跟&lt;code&gt;ESLint&lt;/code&gt;网站切换，必须对比看看两者存在些什么区别。&lt;/p&gt;
&lt;h2 id=&quot;为什么我们总是忽略使用npm-scripts而更青睐于Gulp&quot;&gt;&lt;a href=&quot;#为什么我们总是忽略使用npm-scripts而更青睐于Gulp&quot; class=&quot;headerlink&quot; title=&quot;为什么我们总是忽略使用npm scripts而更青睐于Gulp&quot;&gt;&lt;/a&gt;为什么我们总是忽略使用&lt;code&gt;npm scripts&lt;/code&gt;而更青睐于&lt;code&gt;Gulp&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Gulp&lt;/code&gt;和&lt;code&gt;Grunt&lt;/code&gt;之所以这么流行，主要有下面4个点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发者认为&lt;code&gt;npm scripts&lt;/code&gt;需要能写命令行的技能&lt;/li&gt;
&lt;li&gt;开发者认为&lt;code&gt;npm scripts&lt;/code&gt;能处理的能力不足够&lt;/li&gt;
&lt;li&gt;开发者觉得&lt;code&gt;Gulp&lt;/code&gt;的流对于快速构建是很有必要的&lt;/li&gt;
&lt;li&gt;开发者认为&lt;code&gt;npm scripts&lt;/code&gt;不能跨平台运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;开发者认为npm-scripts需要能写命令行的技能&quot;&gt;&lt;a href=&quot;#开发者认为npm-scripts需要能写命令行的技能&quot; class=&quot;headerlink&quot; title=&quot;开发者认为npm scripts需要能写命令行的技能&quot;&gt;&lt;/a&gt;开发者认为&lt;code&gt;npm scripts&lt;/code&gt;需要能写命令行的技能&lt;/h3&gt;&lt;p&gt;其实你完全不需要精通于&lt;code&gt;Unix&lt;/code&gt;或者&lt;code&gt;Windows&lt;/code&gt;的命令行脚本，比如你不知道在&lt;code&gt;Unix&lt;/code&gt;下面删除一个目录的命令是：&lt;code&gt;rm -rf&lt;/code&gt;，这其实没啥问题，你完全可以使用&lt;a href=&quot;https://www.npmjs.com/package/rimraf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rimraf&lt;/a&gt;，同时它也是跨平台的。在这里推荐一个工具包资源网站：&lt;a href=&quot;https://libraries.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;libraries.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;开发者认为npm-scripts能处理的能力不足够&quot;&gt;&lt;a href=&quot;#开发者认为npm-scripts能处理的能力不足够&quot; class=&quot;headerlink&quot; title=&quot;开发者认为npm scripts能处理的能力不足够&quot;&gt;&lt;/a&gt;开发者认为&lt;code&gt;npm scripts&lt;/code&gt;能处理的能力不足够&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm scripts&lt;/code&gt;其实比你想象中的要强大，主要依赖于&lt;a href=&quot;https://docs.npmjs.com/misc/scripts#description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;预处理和后置处理钩子&lt;/a&gt;，比如下面例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm-scripts-demo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm scripts demo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;prebuild&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo I run before the build script&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cross-env NODE_ENV=production webpack&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;postbuild&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo I run after the build script&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正如上面例子一样，&lt;code&gt;prebuild&lt;/code&gt;定义的脚本会比&lt;code&gt;build&lt;/code&gt;任务先执行，而&lt;code&gt;postbuild&lt;/code&gt;定义的脚本会比&lt;code&gt;build&lt;/code&gt;任务后执行，因为相对于&lt;code&gt;build&lt;/code&gt;来说，增加了一个前缀&lt;code&gt;pre&lt;/code&gt;和&lt;code&gt;post&lt;/code&gt;，所以当我执行&lt;code&gt;npm run build&lt;/code&gt;的时候会自动地顺序执行&lt;code&gt;prebuild -&amp;gt; build -&amp;gt; postbuild&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时你可以将一个大的任务不断拆分成小的任务，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm-scripts-demo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm scripts demo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;clean&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;rimraf ./dist &amp;amp;&amp;amp; mkdir dist&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;prebuild&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;npm run clean&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;cross-env NODE_ENV=production webpack&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面例子中将&lt;code&gt;clean&lt;/code&gt;任务抽离出来了，当你执行&lt;code&gt;npm run build&lt;/code&gt;的时候，会先自动执行&lt;code&gt;npm run prebuild&lt;/code&gt;任务，那就相当于执行了&lt;code&gt;npm run clean&lt;/code&gt;任务了，注意上面的&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;表示先后顺序执行，区别于&lt;code&gt;&amp;amp;&lt;/code&gt;表示同时执行。&lt;/p&gt;
&lt;h2 id=&quot;npm-scripts的一些缺点&quot;&gt;&lt;a href=&quot;#npm-scripts的一些缺点&quot; class=&quot;headerlink&quot; title=&quot;npm scripts的一些缺点&quot;&gt;&lt;/a&gt;&lt;code&gt;npm scripts&lt;/code&gt;的一些缺点&lt;/h2&gt;&lt;p&gt;不得不承认，用&lt;code&gt;npm scripts&lt;/code&gt;来写自动化构建任务还是存在一些不足：不能在JSON文件里面写注释。有一些方法可以弥补这方面的不足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写功能相对小而独立并且命名好的脚本名字&lt;/li&gt;
&lt;li&gt;脚本跟文档分离（将文档写进READ.md）&lt;/li&gt;
&lt;li&gt;直接分离脚本写进Makefile等独立的文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐使用第一种，脚本名字本来就应该能够直接描述功能。&lt;/p&gt;
&lt;h2 id=&quot;一些参考&quot;&gt;&lt;a href=&quot;#一些参考&quot; class=&quot;headerlink&quot; title=&quot;一些参考&quot;&gt;&lt;/a&gt;一些参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://substack.net/task_automation_with_npm_run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Task automation with npm run&lt;/a&gt; – James Holliday&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0RYETb9YVrk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced front-end automation with npm scripts&lt;/a&gt; – Kate Hudson&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to use npm as a build tool&lt;/a&gt; – Kieth Girkel&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://app.pluralsight.com/courses/npm-build-tool-introduction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to npm as a Build Tool&lt;/a&gt; – Marcus Hammarberg&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gon.to/2015/02/26/gulp-is-awesome-but-do-we-really-need-it/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp is awesome, but do we really need it?&lt;/a&gt; – Gonto&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/courses/npm-scripts-for-build-tooling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NPM Scripts for Build Tooling&lt;/a&gt; – Andrew Burgess&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;为什么要用npm-scripts替代gulp&quot;&gt;&lt;a href=&quot;#为什么要用npm-scripts替代gulp&quot; class=&quot;headerlink&quot; title=&quot;为什么要用npm scripts替代gulp&quot;&gt;&lt;/a&gt;为什
    
    </summary>
    
    
      <category term="Fork" scheme="http://aotu.io/tags/Fork/"/>
    
      <category term="Git" scheme="http://aotu.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Node 生产环境调试</title>
    <link href="http://aotu.io/notes/2016/02/24/node-debug-in-production/"/>
    <id>http://aotu.io/notes/2016/02/24/node-debug-in-production/</id>
    <published>2016-02-24T12:25:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;本文以问答的形式，介绍生产环境中该如何去调试 Node 应用。&lt;br&gt;文章覆盖到了&lt;strong&gt;性能问题&lt;/strong&gt;、&lt;strong&gt;崩溃问题&lt;/strong&gt;、&lt;strong&gt;内存泄露&lt;/strong&gt;的检查和解决手段。&lt;/p&gt;
&lt;h2 id=&quot;随着用户请求数越来越多，Node-请求越来越慢。怎么处理？&quot;&gt;&lt;a href=&quot;#随着用户请求数越来越多，Node-请求越来越慢。怎么处理？&quot; class=&quot;headerlink&quot; title=&quot;随着用户请求数越来越多，Node 请求越来越慢。怎么处理？&quot;&gt;&lt;/a&gt;随着用户请求数越来越多，Node 请求越来越慢。怎么处理？&lt;/h2&gt;&lt;p&gt;每个用户的请求，都会经过这几个阶段：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;网络请求 -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;中间层 -&amp;gt; 目标接口 -&amp;gt; 返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前三个过程都会消耗一定的时间，因此我们应该分析每个阶段的耗时，进行针对性优化。&lt;/p&gt;
&lt;p&gt;假设你是用 Express 作为 API 服务器，你可以利用 Express 官方的 &lt;a href=&quot;https://github.com/expressjs/response-time&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;response-time&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/sivy/node-statsd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StatsD&lt;/a&gt;，&lt;br&gt;将每个中间层的请求数据都收集并统计起来。&lt;/p&gt;
&lt;p&gt;但在 Express 世界之外，还有一个更专注于做 API 服务器的框架，叫 &lt;a href=&quot;https://github.com/restify/node-restify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;restify&lt;/a&gt;。&lt;br&gt;restify 是一个纯 Restful 的框架，它可以结合 DTrace 去记录一个用户请求中，每个环节消耗的时间。&lt;/p&gt;
&lt;p&gt;图中高亮的部分是 restify 对于请求耗时的记录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/6262943/11868141/c7fce5e2-a4f0-11e5-8299-5f13b06fa60f.png&quot; alt=&quot;resify_bunyan&quot;&gt;&lt;/p&gt;
&lt;p&gt;此外，restify 还有着更多强大功能，包括请求频率控制、内置 Ajax 错误类型、基于 &lt;a href=&quot;https://github.com/trentm/node-bunyan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bunyan&lt;/a&gt; 的日志。&lt;/p&gt;
&lt;h2 id=&quot;如何知道线上项目哪个函数消耗更多的-CPU-时间？&quot;&gt;&lt;a href=&quot;#如何知道线上项目哪个函数消耗更多的-CPU-时间？&quot; class=&quot;headerlink&quot; title=&quot;如何知道线上项目哪个函数消耗更多的 CPU 时间？&quot;&gt;&lt;/a&gt;如何知道线上项目哪个函数消耗更多的 CPU 时间？&lt;/h2&gt;&lt;p&gt;参考以下几个步骤，通过可视化的角度，揪出消耗 CPU 的凶手。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保你线上的 Node 版本是 5.0 以上&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 Node 项目时，增加 &lt;code&gt;--perf-basic-prof-only-functions&lt;/code&gt; 参数，如：&lt;/p&gt;
 &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node --perf-basic-prof-only-functions app.js &amp;amp;   &lt;span class=&quot;comment&quot;&gt;# Tips: `&amp;amp;`表示后台运行该代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;a href=&quot;https://perf.wiki.kernel.org/index.php/Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;perf&lt;/a&gt; 生成 Node 进程的栈信息文件(stack trace)&lt;/p&gt;
 &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install perf  &lt;span class=&quot;comment&quot;&gt;# perf 非系统自带，需另外安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取 Node 的进程 ID，用 30 秒时间记录栈信息并生成 `perf-xxxxx.map` 文件（被保存在 /tmp/）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo perf record -F 99 -p `pgrep -n node` -g -- sleep 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls /tmp/*.map                         &lt;span class=&quot;comment&quot;&gt;# 检查该文件是否存在&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chown root /tmp/perf-xxxxx.map   &lt;span class=&quot;comment&quot;&gt;# 该文件设置权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo perf script &amp;gt; nodestacks         &lt;span class=&quot;comment&quot;&gt;# 将该文件转换成可解析的 `nodestacks` 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载 FlameGraph 并生成可视化的栈信息火焰图&lt;/p&gt;
 &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; --depth 1 http://github.com/brendangregg/FlameGraph  &lt;span class=&quot;comment&quot;&gt;# 下载 FlameGraph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成火焰图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; FlameGraph&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./stackcollapse-perf.pl &amp;lt; ../nodestacks | ./flamegraph.pl --colors js &amp;gt; ../node-flamegraph.svg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后会生成类似这样的图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/6262943/11839496/56be9ce4-a429-11e5-85b7-64e1cc730e52.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释这种图片的含义：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个方块为被调用的函数&lt;/li&gt;
&lt;li&gt;X 轴表示 CPU 的消耗时间&lt;/li&gt;
&lt;li&gt;Y 轴表示栈的深度&lt;/li&gt;
&lt;li&gt;颜色为随机值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果方块横向越长，说明这个函数消耗的 CPU 时间越多。&lt;br&gt;这样，你就可以定位到这个函数，深入代码去定位问题了。&lt;/p&gt;
&lt;h2 id=&quot;如何收集线上的崩溃信息？&quot;&gt;&lt;a href=&quot;#如何收集线上的崩溃信息？&quot; class=&quot;headerlink&quot; title=&quot;如何收集线上的崩溃信息？&quot;&gt;&lt;/a&gt;如何收集线上的崩溃信息？&lt;/h2&gt;&lt;p&gt;可以让 Node 在运行过程中，记录自身的运行状态，并崩溃的时候输出调试信息。&lt;br&gt;而这些调试信息被称为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Core_dump&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Dump&lt;/a&gt;，会被保存在一个文件中，我们称之为 Core 文件。&lt;br&gt;Core 文件记录了进程运行时的一切状态，包括调用栈、内存变量、被调用的函数源码等。&lt;br&gt;有了这个文件，我们就可以最大化的还原出当时应用运行的过程。&lt;/p&gt;
&lt;p&gt;下面我们利用 &lt;a href=&quot;https://github.com/joyent/mdb_v8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mdb_v8&lt;/a&gt; 工具，这个目前最好的 Node 命令行分析工具，结合一个简单案例来演示。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置 Solaris 环境&lt;/p&gt;
&lt;p&gt; 由于 &lt;a href=&quot;https://github.com/joyent/mdb_v8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mdb_v8&lt;/a&gt; 只能运行在 Solaris 环境，因此你有两种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装基于 Illumos 的系统，如 OmniOS 虚拟机&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 Joyent 公司收费的 Manta 服务，请参阅&lt;a href=&quot;https://www.joyent.com/blog/mdb-and-linux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;笔者使用第一种方式，即通过虚拟机运行 mdb_v8，详见 &lt;a href=&quot;issues/5&quot;&gt;Vagrant 安装 OmniOS 指南&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 Node 项目时，增加 &lt;code&gt;--abort-on-uncaught-exception&lt;/code&gt; 参数，让应用在崩溃时输出 Core 文件&lt;/p&gt;
&lt;p&gt; 本文用以下会崩溃的代码测试，生成 Core 文件。&lt;/p&gt;
 &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myproperty: &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj.count === &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sad trombone&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 该行会让应用崩溃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setImmediate(increment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setImmediate(increment);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 运行上述代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node --abort-on-uncaught-exception throw.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 Core 文件和 Node 二进制程序打包，传到 Vagrant 虚拟机内&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打包 Core Dump 和 Node 二进制程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp core.* debug/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp $(&lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; node) debug/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zip -r debug.zip debug &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 传压缩包到 Vagrant 虚拟机内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv debug.zip xxxx  &lt;span class=&quot;comment&quot;&gt;# xxxx 表示 Vagrantfile 所在的目录，即你启动虚拟机的目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在虚拟机里解压缩包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unzip -o /vagrant/debug.zip &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; ~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/joyent/mdb_v8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mdb_v8&lt;/a&gt; 解析 Core 文件&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载最新的 mdb_v8 模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://us-east.manta.joyent.com/Joyent_Dev/public/mdb_v8/v1.1.2/mdb_v8_amd64.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 mdb 工具加载 Core Dump，格式为：mdb [Node 二进制程序] [Core 文件]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mdb ./node ./core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进入 REPL 后, 运行以下代码加载 mdb_v8 模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ::load ./mdb_v8_amd64.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分析崩溃原因&lt;/p&gt;
&lt;p&gt; 5.1. 使用 mdb_v8 的 &lt;a href=&quot;https://github.com/joyent/mdb_v8/blob/master/docs/usage.md#jsstack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsstack&lt;/a&gt; 指令，查看最后的调用栈情况&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ::jsstack -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;native: v8::base::OS::Abort+0xd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;native: v8::internal::Isolate::DoThrow+0x381&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;native: v8::internal::Isolate::Throw+0x11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;native: v8::internal::Runtime_Throw+0x3d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (1 internal frame elided)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js:     increment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file: /&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/www/node/mongo-express/throw.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        posn: line 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this: 2ac5150&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;3f9 (JSObject: Immediate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (    1 &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (exports, require, module, __filename, __dirname) &amp;#123; var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            2   myproperty: &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            3   count: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            4 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            6 &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            7   obj.count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            9   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj.count === 1000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            10     throw new Error(&lt;span class=&quot;string&quot;&gt;&quot;sad trombone&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            12   &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Immediate(increment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            13 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            15 &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Immediate(increment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            17 &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js:     processImmediate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file: timers.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        posn: line 342&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this: 2d184056ef69 (JSObject: process)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 5.2. 从上面信息得知，最后一个被调用的函数是 &lt;code&gt;increment&lt;/code&gt;，因此可以查下该函数的地址&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查询 increment 函数地址值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ::jsfunctions -n increment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FUNC   &lt;span class=&quot;comment&quot;&gt;#FUNCS NAME         FROM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2ac51509c7a9        1 increment    /&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt;/www/node/mongo-express/throw.js line 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 5.3. 查到地址值后，就可以查出函数当时的局部变量&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查询 increment 函数当时的局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 2ac51509c7a9::jsclosure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;obj&quot;&lt;/span&gt;: 2ac51509c941: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;myproperty&quot;&lt;/span&gt;: 2ae60c1a3f39: &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;count&quot;&lt;/span&gt;: 3e800000000: 1000,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;increment&quot;&lt;/span&gt;: 2ac51509c7a9: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; increment&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 结合代码可知，由于 &lt;code&gt;count&lt;/code&gt; 数值已经到达 1000，导致应用崩溃。&lt;/p&gt;
&lt;p&gt; 5.4. 当然，通过以下命令，还能查到 &lt;code&gt;count&lt;/code&gt; 属性所在对象的起始状态和结束状态&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ::findjsobjects -p count | ::findjsobjects &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; | ::jsprint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;myproperty&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;count&quot;&lt;/span&gt;: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;myproperty&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;count&quot;&lt;/span&gt;: 1000,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 对于 mdb_v8 更多的 Node 指令，请参阅&lt;a href=&quot;https://github.com/joyent/mdb_v8/blob/master/docs/usage.md#node-specific-mdb-command-reference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;如何追踪内存泄露问题？&quot;&gt;&lt;a href=&quot;#如何追踪内存泄露问题？&quot; class=&quot;headerlink&quot; title=&quot;如何追踪内存泄露问题？&quot;&gt;&lt;/a&gt;如何追踪内存泄露问题？&lt;/h2&gt;&lt;p&gt;上个问题中，我们用 Node 的 &lt;code&gt;--abort-on-uncaught-exception&lt;/code&gt; 参数，让应用在崩溃后输出 Core 文件。&lt;br&gt;但如果应用一直在运行（即无崩溃），可以用 Linux 自带的 &lt;a href=&quot;http://man7.org/linux/man-pages/man1/gcore.1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcore&lt;/a&gt; 命令，导出 Core 文件并分析内存泄露的原因。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本文用以下代码测试，该代码会导致内存泄露&lt;/p&gt;
 &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bigData = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; replaceData = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; originalData = bigData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bigData = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        longStr: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;).join(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        closure: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 这里引用到了 originalData，导致旧的 bigData 没有被释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (originalData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(originalData.longStr.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bigData.closure()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setInterval(replaceData, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;process id: &#39;&lt;/span&gt;, process.pid)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 用 &lt;code&gt;node xxx.js&lt;/code&gt; 命令运行代码即可。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每隔一段时间，用 &lt;a href=&quot;http://man7.org/linux/man-pages/man1/gcore.1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gcore&lt;/a&gt; 对上述代码所在进程进行 Core Dump&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# PID 为进程 ID，上面代码会打印出来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 文件会被保存为 leak_1.PID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcore -o leak_1 PID  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 进程运行一段时间后（如15秒），再 Core Dump 一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 文件会被保存为 leak_2.PID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcore -o leak_2 PID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用 mdb_v8 提供的工具 &lt;a href=&quot;https://github.com/joyent/mdb_v8/blob/master/tools/dumpjsobjects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dumpjsobjects&lt;/a&gt;，提取 Core 文件中的 JS 对象，并输出文件&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 每行命令生成两个文件，分别为 obj_id_x / obj_content_x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./dumpjsobjects ./leak_1.PID ./mdb_v8_amd64.so obj_id_1 obj_content_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./dumpjsobjects ./leak_2.PID ./mdb_v8_amd64.so obj_id_2 obj_content_2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用 mdb_v8 提供的工具 &lt;a href=&quot;https://github.com/joyent/mdb_v8/blob/master/tools%2Fmdbv8diff%2Fmdbv8diff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mdbv8diff&lt;/a&gt;，进行 JS 对象对比&lt;/p&gt;
&lt;p&gt; 比较两个时期的 JS 对象的异同，即可获得未被释放的对象地址。&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载安装 mdbv8diff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/joyent/mdb_v8.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; mdb_v8/tools/mdbv8diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 对比 Core 文件的 JS 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./mdbv8diff /path/to/obj_content_1 /path/to/obj_content_2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 打印出来的结果为：&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;f38df83d9:&lt;/span&gt; only &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;edc&lt;span class=&quot;regexp&quot;&gt;/Downloads/&lt;/span&gt;omnios/du_3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 mdb_v8 打印 &lt;code&gt;135f38df83d9&lt;/code&gt; 内存地址对应的对象&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 打印该地址对象的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 135f38df83d9::jsprint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;longStr&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;*******....&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;closure&quot;&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &amp;lt;anonymous&amp;gt; (as bigData.closure),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 找出该对象所有的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 135f38df83d9::findjsobjects&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39fac26f83d9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39ec3a4f83d9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3720c57f83d9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 从结果可以发现，该对象的实例一直在内存里未被释放。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;后语&quot;&gt;&lt;a href=&quot;#后语&quot; class=&quot;headerlink&quot; title=&quot;后语&quot;&gt;&lt;/a&gt;后语&lt;/h2&gt;&lt;p&gt;本文参考了 Netflix 工程师 &lt;a href=&quot;https://twitter.com/YunongX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yunong Xiao&lt;/a&gt; 的&lt;a href=&quot;http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演讲分享&lt;/a&gt;，在此感谢。&lt;br&gt;希望该文章可以给读者更多解决 Node 生产环境调试的思路。但对于生产环境中面临的各种复杂问题，也许需要更多的手段才能解决。 &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://techblog.netflix.com/2015/12/debugging-nodejs-in-production.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yunong.io/2015/11/23/generating-node-js-flame-graphs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yunong.io/2015/11/23/generating-node-js-flame-graphs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/davidapacheco/surge2012&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/davidapacheco/surge2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.joyent.com/blog/mdb-and-linux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.joyent.com/blog/mdb-and-linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://info.meteor.com/blog/an-interesting-kind-of-javascript-memory-leak&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://info.meteor.com/blog/an-interesting-kind-of-javascript-memory-leak&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文以问答的形式，介绍生产环境中该如何去调试 Node 应用。&lt;br&gt;文章覆盖到了&lt;strong&gt;性能问题&lt;/strong&gt;、&lt;strong&gt;崩溃问题&lt;/strong&gt;、&lt;strong&gt;内存泄露&lt;/strong&gt;的检查和解决手段。&lt;/p&gt;
&lt;h2 id=&quot;随着用户请求数越来
    
    </summary>
    
    
      <category term="调试" scheme="http://aotu.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="node" scheme="http://aotu.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建ngrok服务－轻松外网调试本机站点</title>
    <link href="http://aotu.io/notes/2016/02/19/ngrok/"/>
    <id>http://aotu.io/notes/2016/02/19/ngrok/</id>
    <published>2016-02-18T17:55:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;半年多没用ngrok，然后昨天发现它被墙了，艸～。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ngrok是什么鬼？&quot;&gt;&lt;a href=&quot;#ngrok是什么鬼？&quot; class=&quot;headerlink&quot; title=&quot;ngrok是什么鬼？&quot;&gt;&lt;/a&gt;ngrok是什么鬼？&lt;/h2&gt;&lt;p&gt;做前端开发的童鞋或许不会太陌生。&lt;br&gt;如果你完全不知道它是什么东西，可以在它的github项目上了解下：&lt;a href=&quot;https://github.com/inconshreveable/ngrok&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/inconshreveable/ngrok&lt;/a&gt;&lt;br&gt;这里只提下它的核心功能：能够将你本机的HTTP服务（站点）或TCP服务，通过部署有ngrok服务的外网伺服器暴露给外网访问！&lt;/p&gt;
&lt;p&gt;如上封面图所示，举一个栗子。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;橘色屏幕的笔记本是你的工作机器，安装了ngrok客户端&lt;/li&gt;
&lt;li&gt;ngrok.com所在的服务器安装了ngrok的服务端（ngrokd）&lt;/li&gt;
&lt;li&gt;利用ngrok 8080命令可以将你本机的8080端口暴露给反向代理至ngrok.com的某个二级域名如：xxx.ngrok.com&lt;/li&gt;
&lt;li&gt;别人通过xxx.ngrok.com就可以访问你本机8080端口上的站点内容了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此可见，除了Weinre、browsersync 这些惯用的手段外，借助ngrok，也一样可以解决前端开发过程经常遇到的“本地开发，外网调试”老大难题。&lt;/p&gt;
&lt;p&gt;囧的是：ngrok.com被墙了，我们已无法用它官方的服务～&lt;br&gt;国内虽然有一些第三方的ngrok服务，但是也无法保证其稳定性。&lt;br&gt;还好ngrok是开源的，我们可以通过它的源码在自己的外网服务器上搭建自己的ngrok服务。&lt;/p&gt;
&lt;p&gt;前提条件是：一台外网可访问的主机，且有域名解析至该主机上。&lt;/p&gt;
&lt;h2 id=&quot;搭建服务端ngrokd&quot;&gt;&lt;a href=&quot;#搭建服务端ngrokd&quot; class=&quot;headerlink&quot; title=&quot;搭建服务端ngrokd&quot;&gt;&lt;/a&gt;搭建服务端ngrokd&lt;/h2&gt;&lt;h3 id=&quot;1-安装go语言开发环境&quot;&gt;&lt;a href=&quot;#1-安装go语言开发环境&quot; class=&quot;headerlink&quot; title=&quot;1.安装go语言开发环境&quot;&gt;&lt;/a&gt;1.安装go语言开发环境&lt;/h3&gt;&lt;p&gt;ngrok是利用go语言开发的，所以先要在服务器上安装go语言开发环境。&lt;br&gt;以CentOS的服务器示例，安装Go语言很简单的：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install golang&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完毕后，利用go version来验证是否安装成功。&lt;br&gt;go安装好后，我们再设置下go的环境变量：&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;~/.zshrc&lt;/code&gt;或&lt;code&gt;~/.bash_profile&lt;/code&gt;文件内，加入以下环境变量配置内容：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; GOPATH=&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/.local/bin:&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/bin:&lt;span class=&quot;variable&quot;&gt;$GOPATH&lt;/span&gt;/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存后，重新给shell加载下配置文件：&lt;code&gt;source ~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后可通过go env查看是否配置成功。&lt;/p&gt;
&lt;h3 id=&quot;2-安装git&quot;&gt;&lt;a href=&quot;#2-安装git&quot; class=&quot;headerlink&quot; title=&quot;2.安装git&quot;&gt;&lt;/a&gt;2.安装git&lt;/h3&gt;&lt;p&gt;安装过程略。后面我们需要利用git拉取源码。&lt;/p&gt;
&lt;h3 id=&quot;3-fork并拉取ngrok的源码&quot;&gt;&lt;a href=&quot;#3-fork并拉取ngrok的源码&quot; class=&quot;headerlink&quot; title=&quot;3.fork并拉取ngrok的源码&quot;&gt;&lt;/a&gt;3.fork并拉取ngrok的源码&lt;/h3&gt;&lt;p&gt;下面编译过程需要改官方的部分源码，所以最好fork一份源码至自己的github账户。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir -p ~/go/src/github.com/mamboer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/go/src/github.com/mamboer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/mamboer/ngrok.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;源码拉取下来后，需要修改一个地方：&lt;br&gt;打开&lt;code&gt;src/ngrok/log/logger.go&lt;/code&gt;文件&lt;br&gt;将&lt;code&gt;code.google.com/p/log4go&lt;/code&gt; 修改为：&lt;code&gt;github.com/alecthomas/log4go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;googlecode已经寿终了，我们将依赖的log4go替换成github的版本。&lt;/p&gt;
&lt;p&gt;在编译ngrok的源码之前，我们还需要改下官方源码用到的签名证书。&lt;/p&gt;
&lt;h3 id=&quot;4-生成自签名证书&quot;&gt;&lt;a href=&quot;#4-生成自签名证书&quot; class=&quot;headerlink&quot; title=&quot;4.生成自签名证书&quot;&gt;&lt;/a&gt;4.生成自签名证书&lt;/h3&gt;&lt;p&gt;使用ngrok.com官方服务时，我们使用的是官方的SSL证书。自建ngrokd服务，如果不想买SSL证书，我们需要生成自己的自签名证书，并编译一个携带该证书的ngrok客户端。&lt;/p&gt;
&lt;p&gt;证书生成过程需要一个NGROK_BASE_DOMAIN。 以ngrok官方随机生成的地址693c358d.ngrok.com为例，其NGROK_BASE_DOMAIN就是”ngrok.com”，如果你要 提供服务的地址为”example.ngrok.xxx.com”，那NGROK_BASE_DOMAIN就应该 是”ngrok.xxx.com”。&lt;/p&gt;
&lt;p&gt;我们这里以NGROK_BASE_DOMAIN=“ngrok.fex.im”为例，生成证书的命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ngrok&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ openssl genrsa -out rootCA.key 2048&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ openssl req -x509 -new -nodes -key rootCA.key -subj &lt;span class=&quot;string&quot;&gt;&quot;/CN=ngrok.fex.im&quot;&lt;/span&gt; -days 5000 -out rootCA.pem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ openssl genrsa -out device.key 2048&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ openssl req -new -key device.key -subj &lt;span class=&quot;string&quot;&gt;&quot;/CN=ngrok.fex.im&quot;&lt;/span&gt; -out device.csr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完以上命令，在ngrok目录下就会新生成6个文件：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt;  985 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:04&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.crt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt;  895 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:04&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.csr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; 1679 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:03&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; 1675 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:01&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;rootCA&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; 1103 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:03&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;rootCA&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.pem&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-rw-rw-r--&lt;/span&gt; 1 &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;lv&lt;/span&gt;   17 &lt;span class=&quot;selector-tag&quot;&gt;Feb&lt;/span&gt; 17 19&lt;span class=&quot;selector-pseudo&quot;&gt;:04&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;rootCA&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.srl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ngrok通过bindata将ngrok源码目录下的assets目录（资源文件）打包到可执行文件(ngrokd和ngrok)中 去，assets/client/tls和assets/server/tls下分别存放着用于ngrok和ngrokd的默认证书文件，我们需要将它们替换成我们自己生成的：(因此这一步务必放在编译可执行文件之前)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp rootCA.pem assets/client/tls/ngrokroot.crt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp device.crt assets/server/tls/snakeoil.crt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp device.key assets/server/tls/snakeoil.key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-编译客户端程序ngrok和服务端程序ngrokd&quot;&gt;&lt;a href=&quot;#5-编译客户端程序ngrok和服务端程序ngrokd&quot; class=&quot;headerlink&quot; title=&quot;5.编译客户端程序ngrok和服务端程序ngrokd&quot;&gt;&lt;/a&gt;5.编译客户端程序ngrok和服务端程序ngrokd&lt;/h3&gt;&lt;p&gt;在ngrok目录下执行如下命令，编译ngrokd：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ make release-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似的，利用以下命令编译ngrok:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ make release-client&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功编译后，会在bin目录下找到&lt;code&gt;ngrokd&lt;/code&gt;和&lt;code&gt;ngrok&lt;/code&gt;这两个文件。&lt;/p&gt;
&lt;p&gt;我们将ngrokd文件拷贝至&lt;code&gt;~/go/bin&lt;/code&gt;目录下，以方便在其他目录内也可以直接通过ngrokd来访问该执行程序。&lt;/p&gt;
&lt;h3 id=&quot;6-运行ngrokd服务&quot;&gt;&lt;a href=&quot;#6-运行ngrokd服务&quot; class=&quot;headerlink&quot; title=&quot;6.运行ngrokd服务&quot;&gt;&lt;/a&gt;6.运行ngrokd服务&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ngrokd -domain=&lt;span class=&quot;string&quot;&gt;&quot;ngrok.fex.im&quot;&lt;/span&gt; -httpAddr=&lt;span class=&quot;string&quot;&gt;&quot;:8088&quot;&lt;/span&gt; -httpsAddr=&lt;span class=&quot;string&quot;&gt;&quot;:8089&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; public http connections on [::]:8088&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; public https connections on [::]:8089&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[15:08:52 CST 2016/02/18] [INFO] (ngrok/log.Info:112) Listening &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; control and proxy connections on [::]:4443&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;7-为ngrok-fex-im添加dns解析&quot;&gt;&lt;a href=&quot;#7-为ngrok-fex-im添加dns解析&quot; class=&quot;headerlink&quot; title=&quot;7.为ngrok.fex.im添加dns解析&quot;&gt;&lt;/a&gt;7.为ngrok.fex.im添加dns解析&lt;/h3&gt;&lt;p&gt;添加两条A记录：&lt;code&gt;ngrok.fex.im&lt;/code&gt;和&lt;code&gt;*.ngrok.fex.im&lt;/code&gt;，指向fex.im所在的服务器ip。&lt;/p&gt;
&lt;p&gt;至此为止，我们的ngrokd服务端搭建配置完成，同时我们在CentOS系统的服务器上编译了一份客户端的执行程序－一个ngrok文件。&lt;br&gt;如果你的开发机器系统也是CentOS，是可以直接将ngrok这个客户端执行文件拷贝到本地开发机器中来使用的。&lt;br&gt;但如果你的机器是Mac 或者windows，我们还需要在自己的电脑中编译一份相同签名文件的客户端程序！&lt;/p&gt;
&lt;p&gt;注意：请记得提交已更改的源码至github，一会还要用到。&lt;/p&gt;
&lt;h2 id=&quot;在MAC中编译ngrok客户端&quot;&gt;&lt;a href=&quot;#在MAC中编译ngrok客户端&quot; class=&quot;headerlink&quot; title=&quot;在MAC中编译ngrok客户端&quot;&gt;&lt;/a&gt;在MAC中编译ngrok客户端&lt;/h2&gt;&lt;p&gt;服务器是CentOS，自己的工作电脑是Mac，所以得在自己的电脑中编译一份相同签名文件的客户端程序！&lt;/p&gt;
&lt;h3 id=&quot;1-安装go&quot;&gt;&lt;a href=&quot;#1-安装go&quot; class=&quot;headerlink&quot; title=&quot;1.安装go&quot;&gt;&lt;/a&gt;1.安装go&lt;/h3&gt;&lt;p&gt;与服务器的步骤类似，我们首先要安装go语言环境：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-设置go的环境变量（略）&quot;&gt;&lt;a href=&quot;#2-设置go的环境变量（略）&quot; class=&quot;headerlink&quot; title=&quot;2.设置go的环境变量（略）&quot;&gt;&lt;/a&gt;2.设置go的环境变量（略）&lt;/h3&gt;&lt;h3 id=&quot;3-拉取源码并编译客户端（略）&quot;&gt;&lt;a href=&quot;#3-拉取源码并编译客户端（略）&quot; class=&quot;headerlink&quot; title=&quot;3.拉取源码并编译客户端（略）&quot;&gt;&lt;/a&gt;3.拉取源码并编译客户端（略）&lt;/h3&gt;&lt;p&gt;最后将编译好的ngrok文件，拷贝至$GOPATH/bin目录内，以便在命令行内任意目录内均可以直接通过ngrok运行程序。&lt;/p&gt;
&lt;h2 id=&quot;最后的验证&quot;&gt;&lt;a href=&quot;#最后的验证&quot; class=&quot;headerlink&quot; title=&quot;最后的验证&quot;&gt;&lt;/a&gt;最后的验证&lt;/h2&gt;&lt;p&gt;ngrokd服务配置好了，客户端程序也有了，下面测试下ngrok是否能够正常使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个ngrok配置文件：ngrok.cfg&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server_addr: “ngrok.fex.im:4443&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trust_host_root_certs: false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行客户端，暴露8080端口的站点&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ngrok -subdomain demo -config=/Users/lv/bin/ngrok.cfg 8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在8080端口下建一个测试站点&lt;/p&gt;
&lt;p&gt;方便起见，我们拉取git@github.com:o2team/brand.git做测试：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -g node-static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git@github.com:o2team/brand.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; brand&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在浏览器中输入demo.ngrok.fex.im:8088&lt;/p&gt;
&lt;p&gt;bingo!&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/mamboer/ngrok-demo.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在浏览器中输入：localhost:4040&lt;/p&gt;
&lt;p&gt;可以查看所有的请求情况！&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/mamboer/ngrok-demo1.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;客户端ngrok.cfg中server_addr后的值必须严格与-domain以及证书中的&lt;code&gt;NGROK_BASE_DOMAIN&lt;/code&gt;相同，否则Server端就会出现如下错误日志：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[03/13/15 09:55:46]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[INFO]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[tun:15dd7522]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt; 54&lt;span class=&quot;selector-class&quot;&gt;.149&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.100&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.42&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:38252&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[03/13/15 09:55:46]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[DEBG]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[tun:15dd7522]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Waiting&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[03/13/15 09:55:46]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[WARN]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[tun:15dd7522]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Failed&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;message&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;error&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;bad&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;certificate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[03/13/15 09:55:46]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[DEBG]&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[tun:15dd7522]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Closing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自建ngrok服务&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://tonybai.com/2015/03/14/selfhost-ngrok-service/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tonybai.com/2015/03/14/selfhost-ngrok-service/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/inconshreveable/ngrok/blob/master/docs/SELFHOSTING.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/inconshreveable/ngrok/blob/master/docs/SELFHOSTING.md&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;go的安装&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.starkandwayne.com/2014/12/04/how-to-install-go-on-digital-ocean/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.starkandwayne.com/2014/12/04/how-to-install-go-on-digital-ocean/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;本文主要介绍了ngrok服务的自行搭建。同时为大家免费提供我搭建好的ngrok服务：ngrok.fex.im。&lt;br&gt;fex.im所在的机器是digitalocean的一个主机，虽然国内速度慢但是还算稳定。&lt;/p&gt;
&lt;h2 id=&quot;如何使用ngrok-fex-im&quot;&gt;&lt;a href=&quot;#如何使用ngrok-fex-im&quot; class=&quot;headerlink&quot; title=&quot;如何使用ngrok.fex.im?&quot;&gt;&lt;/a&gt;如何使用ngrok.fex.im?&lt;/h2&gt;&lt;h3 id=&quot;安装client&quot;&gt;&lt;a href=&quot;#安装client&quot; class=&quot;headerlink&quot; title=&quot;安装client&quot;&gt;&lt;/a&gt;安装client&lt;/h3&gt;&lt;p&gt;Linux 下载:&lt;a href=&quot;http://fex.im/files/ngrok&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://fex.im/files/ngrok&lt;/a&gt;&lt;br&gt;Mac OSX 下载：&lt;a href=&quot;https://github.com/mamboer/ngrok/releases/download/1.7.2/ngrok&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mamboer/ngrok/releases/download/1.7.2/ngrok&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;放在 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目录下&lt;/p&gt;
&lt;h3 id=&quot;设置所有者&quot;&gt;&lt;a href=&quot;#设置所有者&quot; class=&quot;headerlink&quot; title=&quot;设置所有者&quot;&gt;&lt;/a&gt;设置所有者&lt;/h3&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chown &lt;span class=&quot;variable&quot;&gt;$(&lt;/span&gt;whoami)&lt;span class=&quot;symbol&quot;&gt;:staff&lt;/span&gt; ngrok&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;设置权限&quot;&gt;&lt;a href=&quot;#设置权限&quot; class=&quot;headerlink&quot; title=&quot;设置权限&quot;&gt;&lt;/a&gt;设置权限&lt;/h3&gt;&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo &lt;span class=&quot;keyword&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;777&lt;/span&gt; ngrok&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;运行客户端&quot;&gt;&lt;a href=&quot;#运行客户端&quot; class=&quot;headerlink&quot; title=&quot;运行客户端&quot;&gt;&lt;/a&gt;运行客户端&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ngrok -subdomain demo -config=/Users/lv/bin/ngrok.cfg 8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server_addr: “ngrok.fex.im:4443&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trust_host_root_certs: false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;半年多没用ngrok，然后昨天发现它被墙了，艸～。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ngrok" scheme="http://aotu.io/tags/ngrok/"/>
    
      <category term="反向代理" scheme="http://aotu.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="调试" scheme="http://aotu.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>你所知道的3xx状态码</title>
    <link href="http://aotu.io/notes/2016/01/28/3xx-of-http-status/"/>
    <id>http://aotu.io/notes/2016/01/28/3xx-of-http-status/</id>
    <published>2016-01-27T20:20:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;众所周知，我们都知道300-399这一系列的状态码代表的是重定向状态码。重定向状态码要么告知客户端使用替代位置来访问她们所感兴趣的资源，要么就提供一个替代的响应而不是资源的内容。如果资源已被移动，可发送一个重定向状态码和一个可选的Location首部来告知客户端已被移走，以及现在可以在哪里找到它。这样子，浏览器就可以在不打扰用户的情况下，透明地转到新的位置。&lt;/p&gt;
&lt;p&gt;那么，接下来，我们从状态码出发，梳理一下3xx状态码（300-307），以及缓存一系列相关的东西。（注：HTTP/1.1版本的内容）&lt;/p&gt;
&lt;h4 id=&quot;300-Multiple-Choices&quot;&gt;&lt;a href=&quot;#300-Multiple-Choices&quot; class=&quot;headerlink&quot; title=&quot;300 Multiple Choices&quot;&gt;&lt;/a&gt;300 Multiple Choices&lt;/h4&gt;&lt;p&gt;客户端请求一个实际指向多个资源的URL时会返回这个状态码。&lt;/p&gt;
&lt;p&gt;比如说，一个站点提供了中文和英文两个版本，理想情况下，服务器应当向中文用户发送中文版，向英文用户发送英文版。HTTP提供了内容协商方法，允许客户端和服务器作这样的决定。内容协商包含客户端驱动的协商、服务器驱动的协商以及透明协商。&lt;/p&gt;
&lt;p&gt;客户端驱动由客户端发起请求，服务器发送可选项的列表，客户端进行选择；服务器驱动是由服务器来检查客户端的请求首部集并决定提供提供哪个版本的页面（q值机制，Vary首部）；透明协商是由某个中间设备（通常是缓存代理）代表客户端进行请求协商。&lt;/p&gt;
&lt;p&gt;而300 Multiple Choices属于客户端驱动的协商。服务器发送回HTTP/1.1响应时，使用300 Multiple Choices响应代码。客户端浏览器收到这种响应时，可能会弹出对话窗口，让用户选择。&lt;/p&gt;
&lt;h4 id=&quot;301-Moved-Permanently&quot;&gt;&lt;a href=&quot;#301-Moved-Permanently&quot; class=&quot;headerlink&quot; title=&quot;301 Moved Permanently&quot;&gt;&lt;/a&gt;301 Moved Permanently&lt;/h4&gt;&lt;p&gt;在请求的URL已被移除时使用。响应的Location首部中应该包含资源现在所处的URL。&lt;/p&gt;
&lt;p&gt;301重定向是网页更改网址后对搜索引擎友好的最好方法，只要不是暂时搬移的情况，都建议使用301来做转址。比如说，我们将网页a的地址更改为b，采用301重定向，搜索引擎可以肯定网页a永久性改变网址，搜索引擎就会把网页b当做唯一有效目标，同时，网页a积累的页面权重将被传到网页b。(注：传递权重不同的搜索引擎不一样，Google会传递大部分权重，但不是百分之百权重）&lt;/p&gt;
&lt;h4 id=&quot;302-Found&quot;&gt;&lt;a href=&quot;#302-Found&quot; class=&quot;headerlink&quot; title=&quot;302 Found&quot;&gt;&lt;/a&gt;302 Found&lt;/h4&gt;&lt;p&gt;与301状态码类似，但是客户端应该使用Location首部给出的URL来临时定位资源，将来的请求仍应使用老的URL。&lt;/p&gt;
&lt;p&gt;一般302重定向是在一个网站或网页在短时间内临时移到其它位置的情况下使用，这时候就是做临时性的跳转了。&lt;/p&gt;
&lt;p&gt;但是302跟网址“劫持”有着莫大的关系。大部分搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址即可。但是有时候搜索引擎（以Google为例）并不能总是抓取目标网址，比如说a网址很短，但是它做了302重定向到b网址，而b网址是一个很长的乱七八糟的URL网址，这时候Google很有可能仍显示网址a，这时候就造成了网址劫持的可能性。如果一个居心叵测的人将一个网址a通过302重定向到你的网址b，而Google搜索结果仍然是A，这种情况就是网址劫持。同时，还容易导致网站被降权，所以尽量不用。&lt;/p&gt;
&lt;h4 id=&quot;303-See-Other&quot;&gt;&lt;a href=&quot;#303-See-Other&quot; class=&quot;headerlink&quot; title=&quot;303 See Other&quot;&gt;&lt;/a&gt;303 See Other&lt;/h4&gt;&lt;p&gt;用来告知客户端应该使用另一个URL来获取资源，新的URL位于响应报文的Location首部。&lt;/p&gt;
&lt;p&gt;303主要目的是允许POST请求的响应将客户端定位到某个资源上。比如说，在文件上传完成后让客户端自动重定向到一个上传成功的结果页面。&lt;/p&gt;
&lt;h4 id=&quot;304-Not-Modified&quot;&gt;&lt;a href=&quot;#304-Not-Modified&quot; class=&quot;headerlink&quot; title=&quot;304 Not Modified&quot;&gt;&lt;/a&gt;304 Not Modified&lt;/h4&gt;&lt;p&gt;如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器返回304状态码。304响应不包含消息体，因此以消息头后的第一个空行结尾。&lt;/p&gt;
&lt;p&gt;在一条HTTP GET请求中，大致是如下的一个过程&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/wengeek/cache.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在查看本地副本是否过期时，通过检查Cache-Control或者Expires首部即可获知。HTTP通过Cache-Control首部和Expires首部向每个文档附加了一个“过期日期”，在缓存文档过期之前，缓存可以以任何频率使用这些副本，而无需与服务器联系。&lt;/p&gt;
&lt;p&gt;Expires首部是HTTP/1.0定义的字段，指定的是一个绝对的过期日期。而Cache-Control是HTTP/1.1定义的字段，max-age值定义了文档的最大使用值，是相对时间。因为绝对时间需要依赖于计算机时钟的正确设置，容易存在误差。所以，我们更倾向于使用比较新的Cache-Control首部。当同时存在Expires和Cache-Control:max-age字段时，Cache-Control:max-age字段会覆盖Expires字段。同时存在这两个字段还有一个好处，就是可以兼容HTTP/1.0。&lt;/p&gt;
&lt;p&gt;本地缓存过期了并不意味着它和原始服务器上目前处于活跃状态的文档有实际的区别，这时候缓存需要询问原始服务器文档是否发生了改变，跟原始服务器做一次 &lt;strong&gt;新鲜度校验&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTTP条件方法可以高效地实现再验证。通过If-Modified-Since或者If-None-Match首部来校验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If-Modified-Since:Date再验证&lt;/strong&gt;：If-Modified-Since首部可以和Last-Modified服务器响应首部配合工作。原始服务器会将最后的修改日期附加到所提供的文档上去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If-None-Match: 实体标签再验证&lt;/strong&gt;：有些文档可能被被周期性的重写、有些文档可能被修改了但所做修改不重要等等这类情况下，使用最后修改日期进行再验证是不够的，这时候HTTP允许用户对被称为实体标签ETag的“版本标识符”进行比较。&lt;/p&gt;
&lt;p&gt;实体标签和最近修改日期都是缓存验证器，如果服务器回送了一个实体标签，HTTP/1.1客户端就必须使用实体标签验证器。如果只返回了一个Last-Modified值，客户端就可以使用If-Modified-Since验证。如果实体标签和最后修改日期都提供了，客户端就应该使用这两种再验证方案，这样HTTP/1.0和HTTP/1.1缓存就都可以正确响应了。如果HTTP/1.1服务器收到的请求既带有If-Modified-Since，又带有ETag条件首部，那么需要这两个条件都满足时，才能返回304 Not Modified响应。&lt;/p&gt;
&lt;h4 id=&quot;305-Use-Proxy&quot;&gt;&lt;a href=&quot;#305-Use-Proxy&quot; class=&quot;headerlink&quot; title=&quot;305 Use Proxy&quot;&gt;&lt;/a&gt;305 Use Proxy&lt;/h4&gt;&lt;p&gt;用来说明必须通过一个代理来访问资源，代理的位置由Location首部给出。&lt;/p&gt;
&lt;p&gt;客户端是相对某个特定资源来解析这条响应的，不能假定所有请求，甚至所有对特有所请求资源的服务器的请求都通过这个代理进行。如果客户端错误地让代理介入了某条请求，可能会引发破坏性行为，而且会造成安全漏洞。所以，305这个状态码也较少使用。&lt;/p&gt;
&lt;h4 id=&quot;306-unused&quot;&gt;&lt;a href=&quot;#306-unused&quot; class=&quot;headerlink&quot; title=&quot;306 unused&quot;&gt;&lt;/a&gt;306 unused&lt;/h4&gt;&lt;p&gt;在HTTP1.1废弃掉了，不再使用，并且此状态码被保留。在HTTP1.1以前的版本中，306 Switch Proxy用于表示随后的请求应该使用指定的代理。&lt;/p&gt;
&lt;h4 id=&quot;307-Temporary-Redirect&quot;&gt;&lt;a href=&quot;#307-Temporary-Redirect&quot; class=&quot;headerlink&quot; title=&quot;307 Temporary Redirect&quot;&gt;&lt;/a&gt;307 Temporary Redirect&lt;/h4&gt;&lt;p&gt;请求的资源临时从不同的URI响应请求，客户端应该使用Location首部给出的URL来临时定位资源。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。&lt;/p&gt;
&lt;p&gt;除非是一个HEAD请求，否则307响应的实体中应当包含指向新的URL的超链接及简短说明。因为部分浏览器不能识别307响应，添加URL超链接以便不能处理307状态码的用户有能力在新URL中发起重定向请求，也就是说，把重定向的页面展示给用户，让用户去点重定向URL链接。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/wengeek/307.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到Chrome对于hsts列表的域名，采用了307进行重定向。&lt;/p&gt;
&lt;p&gt;以上内容讲述了301-307的状态码，对于这些状态码以及一些缓存的首部可能还有一些疑惑，以下简单地列出了几点。&lt;/p&gt;
&lt;h4 id=&quot;1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？&quot;&gt;&lt;a href=&quot;#1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？&quot; class=&quot;headerlink&quot; title=&quot;1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？&quot;&gt;&lt;/a&gt;1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？&lt;/h4&gt;&lt;p&gt;303和307是HTTP/1.1新增加的状态码，它们是对HTTP1.0中的302状态码的细化。当HTTP/1.0客户端发起一个POST请求，并在响应中收到302重定向状态码时，它会接受Location首部的重定向URL，并向那个URL发起一个GET请求。透过以上的状态码介绍，我们可以发现HTTP/1.1规范使用303状态码来实现同样的行为。为了避开这个问题，对于HTTP/1.1客户端，用307状态码来代替302状态码进行临时重定向。&lt;/p&gt;
&lt;p&gt;在HTTP/1.1中，302理论上是可以被303和307代替掉的，但为了兼容HTTP/1.0，依然还在广泛使用。&lt;/p&gt;
&lt;h4 id=&quot;2、经常可以看到-Cache-Control-no-cache-这样的首部，那么代表的是不缓存么？&quot;&gt;&lt;a href=&quot;#2、经常可以看到-Cache-Control-no-cache-这样的首部，那么代表的是不缓存么？&quot; class=&quot;headerlink&quot; title=&quot;2、经常可以看到 Cache-Control: no-cache 这样的首部，那么代表的是不缓存么？&quot;&gt;&lt;/a&gt;2、经常可以看到 &lt;strong&gt;&lt;em&gt;Cache-Control: no-cache&lt;/em&gt;&lt;/strong&gt; 这样的首部，那么代表的是不缓存么？&lt;/h4&gt;&lt;p&gt;Cache-Control: no-cache 响应实际上是可以存储到本地缓存区中的，只是在与服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。&lt;/p&gt;
&lt;p&gt;如果需要本地彻底不缓存，需要使用Cache-Control: no-store，表示缓存应该尽快从存储器中删除文档的所有痕迹。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，我们都知道300-399这一系列的状态码代表的是重定向状态码。重定向状态码要么告知客户端使用替代位置来访问她们所感兴趣的资源，要么就提供一个替代的响应而不是资源的内容。如果资源已被移动，可发送一个重定向状态码和一个可选的Location首部来告知客户端已被移走，以
    
    </summary>
    
    
      <category term="http" scheme="http://aotu.io/tags/http/"/>
    
      <category term="重定向" scheme="http://aotu.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="缓存" scheme="http://aotu.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何制作cocoaPods依赖库</title>
    <link href="http://aotu.io/notes/2016/01/27/how-to-make-cocoapods/"/>
    <id>http://aotu.io/notes/2016/01/27/how-to-make-cocoapods/</id>
    <published>2016-01-26T19:40:49.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;学会使用别人的 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库以后， 你一定对创建自己的依赖库很有兴趣吧，现在我们就来尝试一下，以一个简单 &lt;strong&gt;O2View&lt;/strong&gt; 为例自己创建一个 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库，这里我会使用 &lt;strong&gt;Swift 2.0&lt;/strong&gt; 来写这个例子。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;1-创建自己的-github-仓库&quot;&gt;&lt;a href=&quot;#1-创建自己的-github-仓库&quot; class=&quot;headerlink&quot; title=&quot;1.创建自己的 github 仓库&quot;&gt;&lt;/a&gt;1.创建自己的 &lt;strong&gt;github&lt;/strong&gt; 仓库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/a&gt; 是托管在 &lt;strong&gt;github&lt;/strong&gt; 上的，所有的 &lt;strong&gt;Pods&lt;/strong&gt; 也都是托管在 &lt;strong&gt;github&lt;/strong&gt; 上，因此我们首先需要创建一个属于自己的 github 仓库，如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-1githubRepo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中标识出了6处地方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Repository name:&lt;/strong&gt; 仓库名称，这里写上我们的依赖库名字 &lt;strong&gt;O2View&lt;/strong&gt; ，必填。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description：&lt;/strong&gt; 仓库的描述信息，可选。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public or Private:&lt;/strong&gt; 仓库的公开性，开源的话选 &lt;strong&gt;Public&lt;/strong&gt; 。 如果是公司内部使用的话这里推荐大家使用私有的仓库,但是 &lt;strong&gt;github&lt;/strong&gt; 的私有仓库是要收费的 &lt;strong&gt;$7/month&lt;/strong&gt; （壕请无视 - -！）。大部分公司都是有自己的git服务器，不过一般只能在公司内网使用，或者可以选择&lt;a href=&quot;https://gitlab.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;,&lt;a href=&quot;https://coding.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;任意一种。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Initialize：&lt;/strong&gt; 是否默认创建一个 &lt;strong&gt;README&lt;/strong&gt; 文档，一个完整的库都会有这个说明文档，这里最好勾选一下。不过如果忘记的话也不要紧，后面手动创建也是可以的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.gitignore：&lt;/strong&gt; 忽略项文件，记录一些想忽略的文件类型，凡是该文件包含的文件类型， git 都不会将其纳入到版本管理中。看需要选择就行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;license：&lt;/strong&gt; 正规的仓库都有一个 &lt;strong&gt;license&lt;/strong&gt; 文件， &lt;strong&gt;Pods&lt;/strong&gt; 依赖库对这个文件要求比较严格，需要有这个文件。这里最好让 &lt;strong&gt;github&lt;/strong&gt; 自动创建一个，不过后续手动创建也行。我们这次先使用 &lt;strong&gt;MIT&lt;/strong&gt; 类型的 &lt;strong&gt;license&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面各项根据大家需要填写完毕后，点击 &lt;strong&gt;Create repository&lt;/strong&gt; 按钮即可，创建成功后如下所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-2githubO2View.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-clone-仓库到本地&quot;&gt;&lt;a href=&quot;#2-clone-仓库到本地&quot; class=&quot;headerlink&quot; title=&quot;2.clone 仓库到本地&quot;&gt;&lt;/a&gt;2.clone 仓库到本地&lt;/h3&gt;&lt;p&gt;为了方便向仓库中删减内容，需要将仓库 &lt;strong&gt;clone&lt;/strong&gt; 到本地，这里有多种操作方式，可以选择你喜欢的一种，但是为了方便这边选择使用命令行。首先需要切换到你想在本地存储的目录，然后再 &lt;strong&gt;clone&lt;/strong&gt; ，假设你放在用户的根目录上：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/marklin2012/O2View.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成后，我们进入到 &lt;code&gt;~/O2View&lt;/code&gt; 目录中应该可以看到目录结构如下:&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|____LICENSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;|____README.md&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实还有一个隐藏的 &lt;strong&gt;.git&lt;/strong&gt; 文件，后续我们的所有文件都在这个目录底下进行。&lt;/p&gt;
&lt;h3 id=&quot;3-向本地仓库中添加创建-Pods-依赖库所需的文件&quot;&gt;&lt;a href=&quot;#3-向本地仓库中添加创建-Pods-依赖库所需的文件&quot; class=&quot;headerlink&quot; title=&quot;3.向本地仓库中添加创建 Pods 依赖库所需的文件&quot;&gt;&lt;/a&gt;3.向本地仓库中添加创建 Pods 依赖库所需的文件&lt;/h3&gt;&lt;h4 id=&quot;1）主类文件&quot;&gt;&lt;a href=&quot;#1）主类文件&quot; class=&quot;headerlink&quot; title=&quot;1）主类文件&quot;&gt;&lt;/a&gt;1）主类文件&lt;/h4&gt;&lt;p&gt;创建 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库就是为了方便别人使用我们的成果，比如我想共享给大家的O2View类，那这个类自然必不可少，我们把这个类放入一个 &lt;strong&gt;O2View&lt;/strong&gt; 的目录中：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-3O2ViewClassDoc.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;顺便看看 &lt;strong&gt;O2View.swift&lt;/strong&gt; 主要内容：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; UIKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;O2View&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(frame: &lt;span class=&quot;type&quot;&gt;CGRect&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(frame: frame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backgroundColor = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;.redColor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;?(coder aDecoder: &lt;span class=&quot;type&quot;&gt;NSCoder&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;init(coder:) has not been implemented&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2）-podspec-文件&quot;&gt;&lt;a href=&quot;#2）-podspec-文件&quot; class=&quot;headerlink&quot; title=&quot;2）.podspec 文件&quot;&gt;&lt;/a&gt;2）.podspec 文件&lt;/h4&gt;&lt;p&gt;每个 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库必须有且仅有一个名称和依赖库名保持一致，后缀名为 &lt;strong&gt;.podspec&lt;/strong&gt; 的描述文件。这里我们依赖库的描述文件名称应该为 &lt;code&gt;O2View.podspec&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;创建这个文件有两种途径：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制已有的 &lt;strong&gt;podspec&lt;/strong&gt; 文件然后修改对应的参数。&lt;/li&gt;
&lt;li&gt;执行命令行创建。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们使用命令行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec create O2View&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建出 &lt;strong&gt;O2View.podspec&lt;/strong&gt; 文件后，我们打开可以发现，该文件是 &lt;strong&gt;ruby&lt;/strong&gt; 文件，里面有很多的内容，但是大多数都是我们不需要的，所以我们只需要根据项目的情况保留关键的一些内容就行：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.name         = &lt;span class=&quot;string&quot;&gt;&quot;O2View&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.version      = &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#版本号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.summary      = &lt;span class=&quot;string&quot;&gt;&quot;Just testing&quot;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;#简短介绍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.description  = &amp;lt;&amp;lt;-DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  					私有Pods测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  					* Markdown 格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.homepage     = &lt;span class=&quot;string&quot;&gt;&quot;http://aoto.io/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.license      = &lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#开源协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.author             = &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;linyi31&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;linyi@jd.com&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source       = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:git&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/marklin2012/O2View.git&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 这里不支持ssh的地址，只支持HTTP和HTTPS，最好使用HTTPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 正常情况下我们会使用稳定的tag版本来访问，如果是在开发测试的时候，不需要发布release版本，直接指向git地址使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 待测试通过完成后我们再发布指定release版本，使用如下方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#s.source       = &amp;#123; :git =&amp;gt; &quot;http://EXAMPLE/O2View.git&quot;, :tag =&amp;gt; version &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.platform     = &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;9.0&quot;&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#支持的平台及版本，这里我们呢用swift，直接上9.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.requires_arc = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;					&lt;span class=&quot;comment&quot;&gt;#是否使用ARC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source_files  = &lt;span class=&quot;string&quot;&gt;&quot;O2View/*.swift&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#OC可以使用类似这样&quot;Classes/**/*.&amp;#123;h,m&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.frameworks = &lt;span class=&quot;string&quot;&gt;&#39;UIKit&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;QuartzCore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Foundation&#39;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#所需的framework,多个用逗号隔开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.module_name = &lt;span class=&quot;string&quot;&gt;&#39;O2View&#39;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#模块名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.dependency &quot;JSONKit&quot;, &quot;~&amp;gt; 1.4&quot;	#依赖关系，该项目所依赖的其他库，如果有多个可以写多个 s.dependency&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3）Demo-工程&quot;&gt;&lt;a href=&quot;#3）Demo-工程&quot; class=&quot;headerlink&quot; title=&quot;3）Demo 工程&quot;&gt;&lt;/a&gt;3）Demo 工程&lt;/h4&gt;&lt;p&gt;为了快速教会别人使用我们的 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库，通常需要提供一个 demo 工程。我们创建了一个名为 &lt;strong&gt;O2ViewDemo&lt;/strong&gt; 的工程来演示 &lt;strong&gt;O2View&lt;/strong&gt; 的使用，如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-4O2ViewDemo.jpeg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;4）README-md&quot;&gt;&lt;a href=&quot;#4）README-md&quot; class=&quot;headerlink&quot; title=&quot;4）README.md&quot;&gt;&lt;/a&gt;4）README.md&lt;/h4&gt;&lt;p&gt;使用 &lt;strong&gt;github&lt;/strong&gt; 的人应该都熟悉这个文件，它使一个成功的 &lt;strong&gt;github&lt;/strong&gt; 仓库必不可少的一部分，使用 &lt;strong&gt;markdown&lt;/strong&gt; 对仓库进行详细说明。&lt;/p&gt;
&lt;h4 id=&quot;5）LICENSE-文件&quot;&gt;&lt;a href=&quot;#5）LICENSE-文件&quot; class=&quot;headerlink&quot; title=&quot;5）LICENSE 文件&quot;&gt;&lt;/a&gt;5）LICENSE 文件&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt; 强制要求所有的 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库都必须有 &lt;strong&gt;license&lt;/strong&gt; 文件，否则验证不会通过。 &lt;strong&gt;license&lt;/strong&gt; 文件有很多中，详情可以参考 &lt;a href=&quot;https://tldrlegal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tldrlegal&lt;/a&gt;。前面我们已经选择创建了一个 &lt;strong&gt;MIT&lt;/strong&gt; 类型的 &lt;strong&gt;license&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以上的5个文件是创建 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库所需的基础文件，当然 &lt;strong&gt;Demo&lt;/strong&gt; 工程没有添加也没关系。添加完这些内容后，我们本地仓库目录就变成这个样子：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-5O2ViewDoc.jpeg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-提交修改到-github&quot;&gt;&lt;a href=&quot;#4-提交修改到-github&quot; class=&quot;headerlink&quot; title=&quot;4.提交修改到 github&quot;&gt;&lt;/a&gt;4.提交修改到 &lt;strong&gt;github&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;经过前面步骤，我们已将在本地的 &lt;strong&gt;git&lt;/strong&gt; 仓库添加了不少文件，现在我们只要将他们提交到 &lt;strong&gt;github&lt;/strong&gt; 上就可以。在此之前我们需要对刚才添加的 &lt;strong&gt;pod&lt;/strong&gt; 进行一下验证：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lint&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行之后可能会得到下面的警告：&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; -&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - WARN  | source: Git sources should specify a tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] O2View did not pass validation, due &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; warning (but you can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; `--allow-warnings` &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; ignore it) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; All results apply only &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; specs, but you can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; `--&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;` &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; ignore them &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; linting the specification &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; pod..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; the `--no-clean` option &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; inspect any issue.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于我们现在还没有正式生成 &lt;strong&gt;release&lt;/strong&gt; 版本， &lt;strong&gt;github&lt;/strong&gt; 上并没有任何 &lt;strong&gt;tag&lt;/strong&gt;，所以我们刚才填写 &lt;strong&gt;.podspec&lt;/strong&gt; 文件填写 &lt;strong&gt;git&lt;/strong&gt; 地址的时候没有填写指定 &lt;strong&gt;tag&lt;/strong&gt; （上面文件的注释中有提到），解决方法我们可以先执行忽略警告的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod lib lint --allow-warnings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果成功会出现如下输出：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; -&lt;span class=&quot;ruby&quot;&gt;&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt; WARN  | &lt;span class=&quot;symbol&quot;&gt;source:&lt;/span&gt; Git sources should specify a tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O2View passed validation.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;当调试完成了之后，我们需要在 &lt;strong&gt;github&lt;/strong&gt; 上把我们的代码生成相应稳定的 &lt;strong&gt;release&lt;/strong&gt; 版本，到时候我们再回来添加指定 &lt;strong&gt;tag&lt;/strong&gt; 发布就 Ok 了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;验证成功之后，我们只要把代码提交到 &lt;strong&gt;github&lt;/strong&gt; 仓库，就可以了，参考命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span class=&quot;string&quot;&gt;&quot;add pod files&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里主要是 &lt;strong&gt;git&lt;/strong&gt; 的范畴，不做过多叙述。如果前面操作都没有问题的话，&lt;strong&gt;github&lt;/strong&gt; 上应该能看到类似如下内容：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/cocoaPods/1-6githubO2ViewPush.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-接下来做什么？&quot;&gt;&lt;a href=&quot;#5-接下来做什么？&quot; class=&quot;headerlink&quot; title=&quot;5.接下来做什么？&quot;&gt;&lt;/a&gt;5.接下来做什么？&lt;/h3&gt;&lt;p&gt;经过前面的步骤，我们的 &lt;strong&gt;CocoaPods&lt;/strong&gt; 依赖库就已经准备好了，但是现在你还不能在你的工程中使用它。如果你想成为一个真正可用的依赖库，还需要最后一步操作：将刚才生产的 &lt;strong&gt;podspec&lt;/strong&gt; 文件提交到 &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方的 &lt;strong&gt;CocoaPods Specs&lt;/strong&gt; &lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;没错，我们平时用的能用 &lt;code&gt;pod search&lt;/code&gt; 搜到的依赖库都会把它上传到这个仓库中， 也就是说只有将我们的 &lt;strong&gt;podspec&lt;/strong&gt; 文件上传到这里，才能成为一个真正的依赖库，别人才能用！&lt;/p&gt;
&lt;p&gt;按照 &lt;strong&gt;github&lt;/strong&gt; 的规则，要想向别人的库中添加文件，就要先 &lt;strong&gt;fork&lt;/strong&gt; 别人的仓库，做相应的修改，再 &lt;strong&gt;pullrequest&lt;/strong&gt; 给仓库的原作者，等到作者审核通过，进行 &lt;strong&gt;meger&lt;/strong&gt; 之后就可以了！&lt;/p&gt;
&lt;p&gt;流程大概就是这个样子，具体可以参考：&lt;a href=&quot;https://guides.cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods Guides&lt;/a&gt;，我们就先不展开详细的叙述了（后面会添加关于这部分的文章）。&lt;/p&gt;
&lt;p&gt;除了官方的 &lt;strong&gt;specs&lt;/strong&gt; 之外，我们还可以把 &lt;strong&gt;podspec&lt;/strong&gt; 文件提交到私有的仓库中，详见我们博客的另一篇文章：&lt;a href=&quot;http://www.jianshu.com/p/ddc2490bff9f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;创建私有的 &lt;strong&gt;CocoaPods repo spec&lt;/strong&gt;&lt;/a&gt; 。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学会使用别人的 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库以后， 你一定对创建自己的依赖库很有兴趣吧，现在我们就来尝试一下，以一个简单 &lt;strong&gt;O2View&lt;/strong&gt; 为例自己创建一个 &lt;strong&gt;Pods&lt;/strong&gt; 依赖库，这里我会使用 &lt;strong&gt;Swift 2.0&lt;/strong&gt; 来写这个例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://aotu.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://aotu.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>如何创建私有 CocoaPods 仓库</title>
    <link href="http://aotu.io/notes/2016/01/26/Private-CocoaPods-Specs-Repo/"/>
    <id>http://aotu.io/notes/2016/01/26/Private-CocoaPods-Specs-Repo/</id>
    <published>2016-01-26T11:35:15.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;公共-CocoaPods&quot;&gt;&lt;a href=&quot;#公共-CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;公共 CocoaPods&quot;&gt;&lt;/a&gt;公共 CocoaPods&lt;/h3&gt;&lt;p&gt;打开隐藏目录，可以使用命令: &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开隐藏的命令:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//关闭隐藏的命令:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着需要重启一下 &lt;strong&gt;Finder&lt;/strong&gt;， 可以按住 &lt;strong&gt;option&lt;/strong&gt; + 右键 &lt;strong&gt;Finder&lt;/strong&gt; 图标选择重启。然后打开隐藏目录 &lt;strong&gt;.cocoapods&lt;/strong&gt; (这个目录在你的个人目录底下, &lt;code&gt;~/.cocoapods&lt;/code&gt; 或 &lt;code&gt;/Users/[username]/.cocoapods&lt;/code&gt;)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-1cocoapodsMasterRepo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到上图， &lt;strong&gt;.cocoapods&lt;/strong&gt; 目录下的 &lt;strong&gt;repos&lt;/strong&gt; 其实是 &lt;strong&gt;repository&lt;/strong&gt; （仓库）的缩写。 &lt;strong&gt;repos&lt;/strong&gt; 中存放的时仓库的集合。这里的 &lt;strong&gt;master&lt;/strong&gt; 就是 &lt;strong&gt;CocoaPods&lt;/strong&gt; 官方建立的仓库，也就是我们所谓的公共库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;specs&lt;/strong&gt; 目录下存放的就是所有提交到 &lt;strong&gt;CocoaPods&lt;/strong&gt; 的开源库的 &lt;strong&gt;podspec&lt;/strong&gt; 文件的集合。&lt;br&gt;其结构如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-2repoSpecs.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;其组成方式：&lt;/p&gt;
&lt;p&gt;specName – version – specName.podspec&lt;/p&gt;
&lt;p&gt;( &lt;strong&gt;master&lt;/strong&gt; 里现在是 &lt;strong&gt;specName.podspec.json&lt;/strong&gt;，这个 &lt;strong&gt;.json&lt;/strong&gt; 文件就是 &lt;strong&gt;podspec&lt;/strong&gt; 文件加了个后缀。我们可以采用 &lt;code&gt;pod ipc spec&lt;/code&gt; 这个命令来将 &lt;strong&gt;spec&lt;/strong&gt; 文件转换成 &lt;strong&gt;.json&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;那这个文件夹是如何来得呢？其实，这个文件夹是在你安装了 &lt;strong&gt;CocoaPods&lt;/strong&gt; 后，第一次执行 &lt;code&gt;pod install&lt;/code&gt; 时， &lt;strong&gt;CocoaPods&lt;/strong&gt; 通过命令 &lt;code&gt;pod setup&lt;/code&gt; 来建立的（这条命令会自动执行）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上述是官方的 &lt;strong&gt;repo&lt;/strong&gt; ，私有库的话可以看下我们前面的翻译或者查看&lt;a href=&quot;https://guides.cocoapods.org/making/private-cocoapods.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，但是官方文档有一些过程写的不是特别详细，自己实现的时候遇到了一些坑，特此梳理一下过程，按照官方文档内容实现一个私有的 &lt;strong&gt;spec repo&lt;/strong&gt; 。根据官方的原理，我们只需要创建一个和 &lt;strong&gt;master&lt;/strong&gt; 相类似结构的目录就可以实现私有的 &lt;strong&gt;spec repo&lt;/strong&gt;，当然你可以 &lt;strong&gt;fork&lt;/strong&gt; 一个官方的 &lt;strong&gt;repo&lt;/strong&gt;，但是它包含了太多没有必要地库在里面，这在编译仓库的时候需要浪费大量的时间，所以我们只要自己重新创建一个就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-创建一个私有的-Spec-Repo&quot;&gt;&lt;a href=&quot;#1-创建一个私有的-Spec-Repo&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个私有的 Spec Repo&quot;&gt;&lt;/a&gt;1.创建一个私有的 &lt;strong&gt;Spec Repo&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在你的 git 服务器上创建一个 &lt;strong&gt;repo&lt;/strong&gt;。这里你可以在 &lt;strong&gt;github&lt;/strong&gt; 或者你自己的 git 服务器上实现。公司内部使用的话这里推荐大家使用私有的仓库,但是 &lt;strong&gt;github&lt;/strong&gt; 的私有仓库是要收费的 &lt;strong&gt;$7/month&lt;/strong&gt; （壕请无视 - -！）。大部分公司都是有自己的git服务器，不过一般只能在公司内网使用，或者可以选择&lt;a href=&quot;https://gitlab.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitlab&lt;/a&gt;,&lt;a href=&quot;https://coding.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;任意一种。我们以在 &lt;strong&gt;github&lt;/strong&gt; 上创建为例：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-3createGithub.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，我们在 &lt;strong&gt;github&lt;/strong&gt; 上创建一个空的仓库，命名为 &lt;strong&gt;O2Specs&lt;/strong&gt; ，这个仓库是用来存放我们自己所有的私有库的 &lt;strong&gt;spec&lt;/strong&gt; 文件，就如同官方的 &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;https://github.com/CocoaPods/Specs&lt;/strong&gt;&lt;/a&gt; 是用来存放所有官方的 &lt;strong&gt;specs&lt;/strong&gt; 文件一样。&lt;/p&gt;
&lt;p&gt;然后我们就可以执行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod repo add REPO_NAME SOURCE_URL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的 REPO_NAME 是我们要添加的私有 &lt;strong&gt;repo&lt;/strong&gt; 的名称（这里我们待会填的是: &lt;strong&gt;O2Specs&lt;/strong&gt;），后面是仓库的 git 地址。这里做的其实是创建的工作，也就是在 &lt;code&gt;~/.cocoapods/repo&lt;/code&gt; 目录下添加了一个以你的私有 &lt;strong&gt;repo&lt;/strong&gt; 为名的文件夹，但是并没有添加 &lt;strong&gt;spec&lt;/strong&gt; 文件。&lt;/p&gt;
&lt;p&gt;在终端执行命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod repo add O2Specs https://github.com/marklin2012/O2Specs.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 这里用的是 &lt;strong&gt;https&lt;/strong&gt; 地址，当然你也可以用 &lt;strong&gt;git&lt;/strong&gt; 地址，不过这样有可能失败。如果失败，很大因素是你 &lt;strong&gt;github&lt;/strong&gt; 的 &lt;strong&gt;ssh&lt;/strong&gt; 在本地没有配置好，配置方法可以看这里：&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Generating SSH keys&lt;/strong&gt;&lt;/a&gt;，成功后可以看得到 &lt;strong&gt;.cocoapods&lt;/strong&gt; 目录如下图所示：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-4o2specsRepos.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，我们已经在本地得到我们自己的私有仓库 &lt;strong&gt;O2Specs&lt;/strong&gt; ，这是一个空的仓库。&lt;/p&gt;
&lt;h3 id=&quot;2-添加私有的-Repo-安装到你的-CocoaPods-中&quot;&gt;&lt;a href=&quot;#2-添加私有的-Repo-安装到你的-CocoaPods-中&quot; class=&quot;headerlink&quot; title=&quot;2.添加私有的 Repo 安装到你的 CocoaPods 中&quot;&gt;&lt;/a&gt;2.添加私有的 &lt;strong&gt;Repo&lt;/strong&gt; 安装到你的 &lt;strong&gt;CocoaPods&lt;/strong&gt; 中&lt;/h3&gt;&lt;p&gt;这个步骤需要我们事先完成 &lt;strong&gt;CocoaPods&lt;/strong&gt; 依赖库的搭建，具体可以查看我们另外一篇教程：&lt;a href=&quot;http://www.jianshu.com/p/7a82e977281c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;制作 &lt;strong&gt;CocoaPods&lt;/strong&gt; 依赖库&lt;/a&gt;。如果这里你想先看看效果，也可以直接从 &lt;strong&gt;github&lt;/strong&gt; 上 clone &lt;a href=&quot;https://github.com/marklin2012/O2View&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;示例工程&lt;/a&gt;继续下面的操作。&lt;/p&gt;
&lt;p&gt;让我们进入到上面 clone 的示例工程目录中（或者你自己搭建的依赖库目录中）：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-5O2ViewDoc.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开工程的 &lt;strong&gt;podspec&lt;/strong&gt; 文件：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.name         = &lt;span class=&quot;string&quot;&gt;&quot;O2View&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.version      = &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#版本号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.summary      = &lt;span class=&quot;string&quot;&gt;&quot;Just testing&quot;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;#简短介绍&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.description  = &amp;lt;&amp;lt;-DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  					私有Pods测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  					* Markdown 格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   DESC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.homepage     = &lt;span class=&quot;string&quot;&gt;&quot;http://aotu.io/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.license      = &lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#开源协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.author             = &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;linyi31&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;linyi@jd.com&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source       = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:git&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/marklin2012/O2View.git&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 这里不支持ssh的地址，只支持HTTP和HTTPS，最好使用HTTPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 正常情况下我们会使用稳定的tag版本来访问，如果是在开发测试的时候，不需要发布release版本，直接指向git地址使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;## 待测试通过完成后我们再发布指定release版本，使用如下方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#s.source       = &amp;#123; :git =&amp;gt; &quot;http://EXAMPLE/O2View.git&quot;, :tag =&amp;gt; s.version &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.platform     = &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;9.0&quot;&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;#支持的平台及版本，这里我们呢用swift，直接上9.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.requires_arc = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;					&lt;span class=&quot;comment&quot;&gt;#是否使用ARC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.source_files  = &lt;span class=&quot;string&quot;&gt;&quot;O2View/*.swift&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#OC可以使用类似这样&quot;Classes/**/*.&amp;#123;h,m&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.frameworks = &lt;span class=&quot;string&quot;&gt;&#39;UIKit&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;QuartzCore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Foundation&#39;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;#所需的framework,多个用逗号隔开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.module_name = &lt;span class=&quot;string&quot;&gt;&#39;O2View&#39;&lt;/span&gt;				&lt;span class=&quot;comment&quot;&gt;#模块名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# s.dependency &quot;JSONKit&quot;, &quot;~&amp;gt; 1.4&quot;	#依赖关系，该项目所依赖的其他库，如果有多个可以写多个 s.dependency&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个文件本质上是一个 &lt;strong&gt;ruby&lt;/strong&gt; 文件，这是我们事先已经实现好的依赖库的 &lt;strong&gt;podspec&lt;/strong&gt; 文件，如果前面步骤都正常的话，也就是说我们认为这个 &lt;strong&gt;podspec&lt;/strong&gt; 是合法的话，就可以直接将这些内容 &lt;strong&gt;push&lt;/strong&gt; 到我们本地的 &lt;strong&gt;repo&lt;/strong&gt; 中。为了避免错误，我们可以再验证一下，命令行输入：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod lib lint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行之后可能会得到下面的警告：&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; -&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - WARN  | source: Git sources should specify a tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] O2View did not pass validation, due &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; warning (but you can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; `--allow-warnings` &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; ignore it) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; All results apply only &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; specs, but you can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; `--&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;` &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; ignore them &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; linting the specification &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; pod..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; the `--no-clean` option &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; inspect any issue.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于我们的示例工程还没有生成正式的 &lt;strong&gt;release&lt;/strong&gt; 版本， &lt;strong&gt;github&lt;/strong&gt; 上并没有任何 &lt;strong&gt;tag&lt;/strong&gt;，所以我们刚才填写 &lt;strong&gt;.podspec&lt;/strong&gt; 文件填写 &lt;strong&gt;git&lt;/strong&gt; 地址的时候没有填写指定 &lt;strong&gt;tag&lt;/strong&gt; （上面文件的注释中有提到），解决方法我们可以先执行忽略警告的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod lib lint --allow-warnings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果成功会出现如下输出：&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; -&lt;span class=&quot;ruby&quot;&gt;&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    -&lt;span class=&quot;ruby&quot;&gt; WARN  | &lt;span class=&quot;symbol&quot;&gt;source:&lt;/span&gt; Git sources should specify a tag.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O2View passed validation.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此，我们的 &lt;strong&gt;O2View.podspec&lt;/strong&gt; 就符合规范了。&lt;/p&gt;
&lt;h3 id=&quot;3-添加你的-Podspec-到你的-repo&quot;&gt;&lt;a href=&quot;#3-添加你的-Podspec-到你的-repo&quot; class=&quot;headerlink&quot; title=&quot;3.添加你的 Podspec 到你的 repo&quot;&gt;&lt;/a&gt;3.添加你的 &lt;strong&gt;Podspec&lt;/strong&gt; 到你的 &lt;strong&gt;repo&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在前面验证通过的基础上，我们接着执行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod repo push O2Specs O2View.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完，如果失败会有相对应的警告和错误提示，只要按照警告和错误的详细信息进行修改和完善即可。成功的情况应该可以在终端看到类似的输出：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Validating &lt;span class=&quot;keyword&quot;&gt;spec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - WARN  | source: Git sources should specify a &lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Updating the `O2Specs&#39; repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Already up-to-&lt;span class=&quot;keyword&quot;&gt;date&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Adding the &lt;span class=&quot;keyword&quot;&gt;spec&lt;/span&gt; to the `O2Specs&#39; repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - [Add] O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pushing the `O2Specs&#39; repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To https://github.com/marklin2012/O2Specs.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;f32092..&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;d0ced5  &lt;span class=&quot;keyword&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;-&amp;gt; master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再进入到 &lt;strong&gt;.cocoapods&lt;/strong&gt; 的目录中，可以看到已经发生了变化：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-6O2SpecsRepoO2View.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时，我们还发现 &lt;strong&gt;O2Specs&lt;/strong&gt; 的 &lt;strong&gt;github&lt;/strong&gt; 仓库也已经发生了变化：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-7O2SpecPushed.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;按照平时使用 &lt;strong&gt;CocoaPods&lt;/strong&gt; 的习惯，我们添加依赖库之前会先搜索一下库，让我们执行一下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod search O2View&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;哈哈，可以看到已经建立成功了！&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Just testing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pod &lt;span class=&quot;string&quot;&gt;&#39;O2View&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 0.0.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - &lt;span class=&quot;string&quot;&gt;Homepage:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//aotu.io/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - &lt;span class=&quot;string&quot;&gt;Source:&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//github.com/marklin2012/O2View.git&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - &lt;span class=&quot;string&quot;&gt;Versions:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; [O2Specs repo]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-测试私有-pod&quot;&gt;&lt;a href=&quot;#4-测试私有-pod&quot; class=&quot;headerlink&quot; title=&quot;4.测试私有 pod&quot;&gt;&lt;/a&gt;4.测试私有 pod&lt;/h3&gt;&lt;p&gt;看到前面的搜索结果，小伙伴们是不是开始有点激动了？让我们建立一个普通的工程，命名为 &lt;strong&gt;TestPodDemo&lt;/strong&gt;，然后在终端 &lt;strong&gt;cd&lt;/strong&gt; 到其目录路径下，添加一个 &lt;strong&gt;Podfile&lt;/strong&gt; 文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建立后修改 &lt;strong&gt;Podfile&lt;/strong&gt; 文件内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;TestPodDemo&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod ‘O2View’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们得到如下提示：&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Updating local specs repositories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] Unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; find a specification &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; `O2View`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] Your Podfile &lt;span class=&quot;keyword&quot;&gt;has&lt;/span&gt; had smart quotes sanitised. &lt;span class=&quot;keyword&quot;&gt;To&lt;/span&gt; avoid issues &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;future&lt;/span&gt;, you should &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; use TextEdit &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; editing it. &lt;span class=&quot;keyword&quot;&gt;If&lt;/span&gt; you are &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; TextEdit, you should turn off smart quotes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; your editor &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; choice.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找不到 &lt;strong&gt;O2View&lt;/strong&gt; ？ 额- -！。。。刚才 &lt;strong&gt;search&lt;/strong&gt; 明明可以找到这个依赖库的，为什么现在找不到了呢？&lt;/p&gt;
&lt;p&gt;别着急!其实原因是你在 &lt;strong&gt;Podfile&lt;/strong&gt; 中没有指定路径，当你执行 &lt;code&gt;pod install&lt;/code&gt; 的时候，&lt;strong&gt;CocoaPods&lt;/strong&gt; 默认只会在 &lt;strong&gt;master&lt;/strong&gt; 下搜索，而我们的 &lt;strong&gt;spec&lt;/strong&gt; 是存在我们私有的 &lt;strong&gt;O2Specs&lt;/strong&gt; 目录下的。所以解决方式很简单，就是引入搜索地址即可，在 &lt;strong&gt;Podfile&lt;/strong&gt; 的顶部添加如下两行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;#官方仓库地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ‘https://github.com/marklin2012/O2Specs.git’		&lt;span class=&quot;comment&quot;&gt;#私有仓库地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里必须添加两个地址，默认情况下，你如果不添加 &lt;strong&gt;source&lt;/strong&gt; ，系统会默认使用官方仓库地址，但是当你添加了 &lt;strong&gt;source&lt;/strong&gt; 之后，系统就不会自动搜索官方地址，所以这两句都必须添加，否则其他基于官方的依赖库都不能使用了。&lt;/p&gt;
&lt;p&gt;再次执行 &lt;code&gt;pod install&lt;/code&gt; ，我们就可以看到很顺利的安装成功了：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Updating local specs &lt;span class=&quot;keyword&quot;&gt;repositories&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Downloading &lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Using O2View (&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Generating Pods &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integrating client &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sending stats&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pod installation complete! There is &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; dependency &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; the Podfile and &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; total pod installed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;恭喜！这样一来我们就可以使用这个私有库了！ &lt;/p&gt;
&lt;h3 id=&quot;发布稳定的依赖库版本&quot;&gt;&lt;a href=&quot;#发布稳定的依赖库版本&quot; class=&quot;headerlink&quot; title=&quot;发布稳定的依赖库版本&quot;&gt;&lt;/a&gt;发布稳定的依赖库版本&lt;/h3&gt;&lt;p&gt;前面我们提到过，我们的这个实例依赖库 &lt;strong&gt;O2View&lt;/strong&gt; 没有生成稳定的 &lt;strong&gt;release&lt;/strong&gt; 版本。当我们调试完内容之后，一般都是要发布稳定版本的，更新之后再继续发布新版本。我们可以使用命令行或者在 &lt;strong&gt;github&lt;/strong&gt; 页面手动生成，这里为了方便我们使用命令行，首先在终端中 &lt;strong&gt;cd&lt;/strong&gt; 到之前的依赖库 &lt;strong&gt;O2View&lt;/strong&gt; 的目录中，然后输入如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;&#39;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin &lt;span class=&quot;literal&quot;&gt;master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样我们就得到了一个稳定的 &lt;strong&gt;release&lt;/strong&gt; 版本 &lt;strong&gt;0.0.1&lt;/strong&gt;：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/MarkLin/privateCocoaPods/1-8githubTags.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我用的版本号是 &lt;strong&gt;0.0.1&lt;/strong&gt; 基于研发版本，关于版本号的一些规范可以参考：&lt;a href=&quot;http://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;语义化版本 2.0.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于我们的 &lt;strong&gt;podspec&lt;/strong&gt; 文件，我们也需要将 &lt;code&gt;s.source&lt;/code&gt; 做一下小小的改动:&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s.source       = &amp;#123; :git =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/marklin2012/O2View.git&quot;&lt;/span&gt;, :&lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;=&amp;gt; version&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样我们使用这个依赖库的时候就能对应上版本号，并且知道在 &lt;strong&gt;github&lt;/strong&gt; 中使用稳定的 &lt;strong&gt;release&lt;/strong&gt; 版本代码。太棒了！&lt;/p&gt;
&lt;p&gt;最后只需要再重复 &lt;code&gt;push&lt;/code&gt; 一下我们的 &lt;strong&gt;Podfile&lt;/strong&gt; 就可以！&lt;/p&gt;
&lt;h3 id=&quot;接下来做什么？&quot;&gt;&lt;a href=&quot;#接下来做什么？&quot; class=&quot;headerlink&quot; title=&quot;接下来做什么？&quot;&gt;&lt;/a&gt;接下来做什么？&lt;/h3&gt;&lt;p&gt;好了，到这里我们已经完全掌握如何创建一个本地私有的 &lt;strong&gt;CocoaPods&lt;/strong&gt; 了！我们完全可以把我们项目中得代码拆出来封装成一些 &lt;strong&gt;pods&lt;/strong&gt;， 好好使用这个黑魔法！&lt;/p&gt;
&lt;p&gt;祝大家玩得愉快！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;公共-CocoaPods&quot;&gt;&lt;a href=&quot;#公共-CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;公共 CocoaPods&quot;&gt;&lt;/a&gt;公共 CocoaPods&lt;/h3&gt;&lt;p&gt;打开隐藏目录，可以使用命令: &lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开隐藏的命令:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//关闭隐藏的命令:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com&lt;span class=&quot;selector-class&quot;&gt;.apple&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.finder&lt;/span&gt; AppleShowAllFiles -bool false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着需要重启一下 &lt;strong&gt;Finder&lt;/strong&gt;， 可以按住 &lt;strong&gt;option&lt;/strong&gt; + 右键 &lt;strong&gt;Finder&lt;/strong&gt; 图标选择重启。然后打开隐藏目录 &lt;strong&gt;.cocoapods&lt;/strong&gt; (这个目录在你的个人目录底下, &lt;code&gt;~/.cocoapods&lt;/code&gt; 或 &lt;code&gt;/Users/[username]/.cocoapods&lt;/code&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://aotu.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://aotu.io/tags/CocoaPods/"/>
    
      <category term="Swift" scheme="http://aotu.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>UFT 需求提报平台回顾</title>
    <link href="http://aotu.io/notes/2016/01/16/UFT/"/>
    <id>http://aotu.io/notes/2016/01/16/UFT/</id>
    <published>2016-01-15T16:44:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;最初它的名字为 BugHound，主要功能是 bug 提交，EC 同学已经造出了它最初的样子，它最初的目标用户是移动用户，能在提 bug 的同时收集设备的相关信息。主要用到的技术点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我开始熟悉原代码并尝试在此基础上进行迭代开发，但是由于功能上有较大的变更，而我没有用过 Mongodb 和 php，这时我更倾向于使用我熟悉的 MySql 和 Nodejs，在得到 EC 同学的允许后，我决定从零开始搭建系统。本文选择其中几点进行阐述。&lt;/p&gt;
&lt;h2 id=&quot;数据设计&quot;&gt;&lt;a href=&quot;#数据设计&quot; class=&quot;headerlink&quot; title=&quot;数据设计&quot;&gt;&lt;/a&gt;数据设计&lt;/h2&gt;&lt;p&gt;第一步是建表，下图是最初的表设计，基本上按照原 mongodb 中的数据关系进行定义，设计好数据表，再把它们写进&lt;strong&gt;数据字典&lt;/strong&gt;，最后才开始建表。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（数据字典对开发和协作的作用非常大，它能让你和别人知道表中有哪些字段，某字段代表什么等信息，在接下来的编码工作中还会经常去查看它。）&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/tabledesign.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;随着开发的深入，数据不断拓展，有些字段被淘汰或被拆分到新表，有些字段新加进来，比如代表“文件”的数据，原来以字符串的形式写在 demand 表的 files 字段，作为经常被读写的数据，以字符串的形式保存显然不正确，我们需要把每个文件当作一个数据元，于是把 files 字段拆分成新表 demandfiles，并增加了上传人、上传时间和下载次数这些信息。&lt;/p&gt;
&lt;p&gt;为了让数据库设计更加合理，使用了外键约束，确保在删除修改数据的同时能级联删除修改，外键统一命名为 &lt;code&gt;fk_table_field&lt;/code&gt; 的形式。修改后的 ER 图如下所示：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/modeldesign.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;技术实践&quot;&gt;&lt;a href=&quot;#技术实践&quot; class=&quot;headerlink&quot; title=&quot;技术实践&quot;&gt;&lt;/a&gt;技术实践&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 起初，项目后端使用了 &lt;code&gt;ejs&lt;/code&gt; 模板引擎，拆分头尾在后端渲染模板后发回给前端，前端用 jQuery 进行逻辑的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 前端开始使用 Angular 替代 jQuery，但是 ejs 跟 Angular 好像有点格格不入，前者意在后端渲染数据，后者通常在前端通过 $http 获取数据来填充，这时的 ejs 的存在主要是为了组装拆分出来的头尾，不好去掉它。但是，接着发现了 &lt;code&gt;ng-include&lt;/code&gt;，这让组装头尾的工作交给了前端，从而摒弃掉了 ejs。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;第三阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 接着，切换页面的时候头部闪烁的问题引起了注意，原来是 Angular 使用方式不对，我的每个页面都是一个单独的 Angular app，每次切换页面时都引入一次头尾导致闪烁，于是引入 ui-router 把系统修改成一个单页面应用，更新 &lt;code&gt;ui-view&lt;/code&gt; 即可切换页面。&lt;/p&gt;
&lt;p&gt; 这又引出了一个新的问题，所有页面的入口都是 index.html，也就是说不能再简单地在后端通过路由来控制页面的访问权限了，这样另一个概念就登场了——本地身份验证。简单点说，就是在进入应用主入口 index.html 的时候，从服务器请求身份信息，身份信息将保存在 &lt;code&gt;service&lt;/code&gt; 中（类似 session storage），然后在状态（页面）切换事件 &lt;code&gt;stateChangeStart&lt;/code&gt; 或 &lt;code&gt;stateChangeSuccess&lt;/code&gt; 中，对页面请求进行拦截或重定向等操作。&lt;/p&gt;
&lt;p&gt; 然而，网络请求都有一定的延迟，在身份信息返回来之前，某些页面的内容不应该被呈现出来，所以要在获取到身份信息后通知到页面，于是就加进了事件广播和接收器 &lt;code&gt;$broadcast&lt;/code&gt; 和 &lt;code&gt;$on&lt;/code&gt;：获取到身份信息后通过 &lt;code&gt;$broadcast&lt;/code&gt; 广播一个事件，在子页面中通过 &lt;code&gt;$on&lt;/code&gt; 接收到该事件后执行相关逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;排期表设计&quot;&gt;&lt;a href=&quot;#排期表设计&quot; class=&quot;headerlink&quot; title=&quot;排期表设计&quot;&gt;&lt;/a&gt;排期表设计&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;v1 版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;背景：&lt;/strong&gt;需求排期时间不能冲突，排期由排期起始和结束时间决定。&lt;/p&gt;
&lt;p&gt; 从服务器获取的源数据形式如下，已按 startDate 排好序，每个用户数据中包含排期数据（data）：&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		erp:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		name:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		... , &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在前端计算好周起始时间 &lt;code&gt;ws&lt;/code&gt; 和周结束时间 &lt;code&gt;we&lt;/code&gt;，对每条排期数据进行判断，如果排期时间跟本周的时间有交集，则计算该排期都出现在了哪几天，比如下图的情形，这里有两个排期：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/schedulev1eq.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt; 数据将会按下面的形式（blocks）附加到用户数据中，其中 [0,1,2] 和 [4,5] 的数字就分别表示了两个排期在周排期表中占据的位置。&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		erp:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		name:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		... , &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;demandID:xx, startDate:xx, endDate:xx, ...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		blocks:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				demandID:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				demandName:xx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dictator:xx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				block: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				demandID:xx, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				demandName:xx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dictator:xx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				block: [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 接着，处理排期表中的空闲的天，给用户数据附加以下数据：&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;schedule: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;demandID:xxx, ...&amp;#125;,	&lt;span class=&quot;comment&quot;&gt;// blocks[0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;date:xxx&amp;#125;,	&lt;span class=&quot;comment&quot;&gt;//周三，时间用于点进申请页自动填好时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;demandID:xxx, ...&amp;#125;,	&lt;span class=&quot;comment&quot;&gt;// blocks[1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;date:xxx&amp;#125;	&lt;span class=&quot;comment&quot;&gt;//周六，时间用于点进申请页自动填好时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 然后在页面上由 &lt;code&gt;schedule&lt;/code&gt; 循环输出 td，blocks[0] 和 blocks[1] 的长度就是 td 横跨的 td 个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;v2 版&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;背景：&lt;/strong&gt;v1 版的排期表设计中，由于排期的最小单位是“天”，而存在数据库中的 startDate 和 endDate 的最小单位却是毫秒，在计算上无疑增加了大量纷繁的计算，受移动组 task 系统的启发，把排期数据改为 startDate 和 days（所需天数），这样可以减少一半的计算，也更好理解。另外较大的改动，排期时间将允许有重叠（即同一天可以排多个需求）。&lt;/p&gt;
&lt;p&gt; 从服务器获取的源数据的形式不变，这次我在计算之前把时间都转化成了天（1970-01-01至今的天数）以方便计算，为了解决排期堆叠的问题，添加了两个关键的变量：&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; weekpile = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];	&lt;span class=&quot;comment&quot;&gt;//记录排期在该天已经堆到第几层了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wee = [[], [], [], [], [], [], []];	&lt;span class=&quot;comment&quot;&gt;//数组中的每个数组代表星期里的一天，存储由该天开始的需求，下面有详解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; weekpile 原理如下图，每个排期排在第几层由它在排期表中的第一天所在层级决定。&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/weekpile.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt; 层数记录附加到用户数据中，如下：&lt;/p&gt;
 &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;blocks: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		id:xx, demandID:xx, startDate:xx, days:xx, ... ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		weekdays: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pilefloor: n	&lt;span class=&quot;comment&quot;&gt;// 所在层级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 另外，上文提到的 &lt;code&gt;wee&lt;/code&gt; 变量存储的是指向 &lt;code&gt;blocks&lt;/code&gt; 索引的数字，把它也附加到用户数据中。如图，外层 div 的 &lt;code&gt;margin-top&lt;/code&gt; 由 &lt;code&gt;wee&lt;/code&gt; 所指向的第一个排期的 &lt;code&gt;pilefloor&lt;/code&gt; 决定，比如下图假设这是星期六，那么外层 div 的 &lt;code&gt;margin-top&lt;/code&gt; 由 &lt;code&gt;blocks[wee[6][0]].pilefloor&lt;/code&gt; 决定。&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/wee.png&quot;&gt;&lt;/p&gt;
&lt;p&gt; 因为已知排期的天数 n，给每个排期的宽度设置相应的 n*100% 即可。&lt;/p&gt;
&lt;p&gt; 然后在页面上由 &lt;code&gt;wee&lt;/code&gt; 循环输出 td，blocks[n] 中的 weekdays 的 length 决定了排期的长度。&lt;/p&gt;
&lt;p&gt; v2 版排期表如图所示：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2016/uft/schedule.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;协作&quot;&gt;&lt;a href=&quot;#协作&quot; class=&quot;headerlink&quot; title=&quot;协作&quot;&gt;&lt;/a&gt;协作&lt;/h2&gt;&lt;p&gt;最初 UFT 主要由我进行开发，后来另一个同事加入开发，变成我负责 UFT 的功能开发，她负责 UFT 的 UI 优化，项目源码放到 &lt;a href=&quot;https://github.com/o2team/UFT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; 上了，我们要在 github 共同进行开发，我们两人琢磨了好久，面对冲突问题时开始还采取过删除后重新拉取暴力做法，几经尝试，我们最终探索出两种较好的协作方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们各自拉取分支修改，push 上去后发起合并请求，我负责合并分支；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在本地修改后，先从服务器上拉取更新合并：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;git fetch origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 然后进行合并&lt;/p&gt;
&lt;p&gt; &lt;code&gt;git merge FETCH_HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 一般情况下，合并会顺利进行，但难免会有冲突，一旦有冲突，就调用 mergetool 进行合并，或者直接在原文件上手动合并。最后，就是正常的提交过程了。&lt;/p&gt;
&lt;p&gt; 关于 mergetool，自从同事分享过一次，回去后自己装了 p4merge，配置如下：&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[diff]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tool = p4merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[difftool &lt;span class=&quot;string&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &lt;span class=&quot;string&quot;&gt;&quot;p4merge &lt;span class=&quot;variable&quot;&gt;$LOCAL&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$REMOTE&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[merge]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tool = p4merge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mergetool &lt;span class=&quot;string&quot;&gt;&quot;p4merge&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmd = &lt;span class=&quot;string&quot;&gt;&quot;p4merge &lt;span class=&quot;variable&quot;&gt;$BASE&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$LOCAL&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$REMOTE&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$MERGED&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	trustExitCode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	keepBackup = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 但是，没有冲突是调用不了 mergetool 的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;临时文件的处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 临时文件指的是异步上传到 temp 文件夹的文件，用户上传文件后如果不打算进一步提交了，这些临时文件就成了“弃儿”，如果不对这些文件进行处理，temp 文件夹会越来越大。于是加进了定期任务，每隔一段时间对临时文件夹中的文件进行清理，为了防止把用户刚上传的文件清理掉了，被清理的文件的最后访问时间要在3天之前。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;UFT 从无到有，很多东西边学边用：第一次尝试用 Express，配设置、配路由等过程遇到不少坑；第一次用 Angular，用得并不规范，多亏涛哥从中相助，解决我不少困惑；Angular 各种各样插件的学习使用过程，就是不断试错，不断筛选满意插件的过程。&lt;/p&gt;
&lt;p&gt;除了知识上吸收，最大的收获是意识到项目规划的重要性。开始接手后就马上开始写代码，需要什么功能就写什么，以至于最后需要经常较大地改动代码，比如，列表之前用 Bootstrap-table 写，然后改成 Angular，又比如将页面合并成单页面 Angular 应用时，需要把大量的插件都换成 Angular 插件，还有项目的结构也几经变换。折腾这几番足见项目前期的规划还是非常重要且必要的。&lt;/p&gt;
&lt;h2 id=&quot;未来规划&quot;&gt;&lt;a href=&quot;#未来规划&quot; class=&quot;headerlink&quot; title=&quot;未来规划&quot;&gt;&lt;/a&gt;未来规划&lt;/h2&gt;&lt;p&gt;UFT 原来的目标是供部门内部使用，用户访问系统需要先经过内部员工帐号的身份认证过程，然而，随着内部推出了新的需求管理平台并推广到部门，UFT 被闲置，为了让 UFT 重新焕发活力，在接下来，把源码开源，并将把 UFT 改造成通用的需求管理平台。目前平台仍有不少可以优化的地方，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySql 使用上 View 和 Function 会简化很多工作&lt;/li&gt;
&lt;li&gt;Models 不是真正的 MVC 中的 M，可以考虑让这部分更远离业务逻辑更接近数据&lt;/li&gt;
&lt;li&gt;需求状态的多样化，需求状态变更的系统通知（非邮件）&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/o2team/UFT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/o2team/UFT&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最初它的名字为 BugHound，主要功能是 bug 提交，EC 同学已经造出了它最初的样子，它最初的目标用户是移动用户，能在提 bug 的同时收集设备的相关信息。主要用到的技术点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
    
      <category term="uft" scheme="http://aotu.io/tags/uft/"/>
    
      <category term="angular" scheme="http://aotu.io/tags/angular/"/>
    
      <category term="kendo" scheme="http://aotu.io/tags/kendo/"/>
    
      <category term="node-mysql" scheme="http://aotu.io/tags/node-mysql/"/>
    
      <category term="express" scheme="http://aotu.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>js游戏开发初级入门</title>
    <link href="http://aotu.io/notes/2016/01/14/introduction-to-JS-game-development/"/>
    <id>http://aotu.io/notes/2016/01/14/introduction-to-JS-game-development/</id>
    <published>2016-01-14T09:20:39.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;万事开头难，js一直没有进步？跟着这篇文章来编写五子棋游戏吧！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-游戏开发方法&quot;&gt;&lt;a href=&quot;#1-游戏开发方法&quot; class=&quot;headerlink&quot; title=&quot;1 游戏开发方法&quot;&gt;&lt;/a&gt;1 游戏开发方法&lt;/h2&gt;&lt;h3 id=&quot;1-1-小规模游戏&quot;&gt;&lt;a href=&quot;#1-1-小规模游戏&quot; class=&quot;headerlink&quot; title=&quot;1.1 小规模游戏&quot;&gt;&lt;/a&gt;1.1 小规模游戏&lt;/h3&gt;&lt;p&gt;小规模游戏一般由一人或两人完成，不需要详细的产品说明等资料，直接进入代码的编写，然后在浏览器中解释并运行。有时候出现错误，重新编辑再回到浏览器解释运行，就是一个简单的编辑-解释-运行的重复工作模式。&lt;/p&gt;
&lt;h3 id=&quot;1-2-大规模游戏&quot;&gt;&lt;a href=&quot;#1-2-大规模游戏&quot; class=&quot;headerlink&quot; title=&quot;1.2 大规模游戏&quot;&gt;&lt;/a&gt;1.2 大规模游戏&lt;/h3&gt;&lt;p&gt;大规模游戏一般由两人以上完成，一共分为三个阶段：设计阶段、说明阶段、实现阶段。首先是设计阶段：设计什么游戏，游戏的主体用户是谁，游戏的目的等。然后是说明阶段：清楚游戏需要的类和类中需要的方法，分别做一个规划，保证编写代码时思路清晰，以及代码的整洁性。最后是实现阶段，其实就是进入编辑-解释-运行的工作模式。也就是说，大规模游戏比小规模游戏多了两大阶段即设计阶段和说明阶段而已。&lt;/p&gt;
&lt;h2 id=&quot;2-了解游戏规则&quot;&gt;&lt;a href=&quot;#2-了解游戏规则&quot; class=&quot;headerlink&quot; title=&quot;2 了解游戏规则&quot;&gt;&lt;/a&gt;2 了解游戏规则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对局双方各执一色棋子。&lt;/li&gt;
&lt;li&gt;空棋盘开局&lt;/li&gt;
&lt;li&gt;黑先、白后，交替下子，每次只能下一子。&lt;/li&gt;
&lt;li&gt;棋子下在棋盘的空白点上，棋子下定后，不得向其它点移动，不得从棋盘上拿掉或拿起另落别处。&lt;/li&gt;
&lt;li&gt;黑方的第一枚棋子可下在棋盘任意交叉点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-五子棋游戏的主要方法&quot;&gt;&lt;a href=&quot;#3-五子棋游戏的主要方法&quot; class=&quot;headerlink&quot; title=&quot;3 五子棋游戏的主要方法&quot;&gt;&lt;/a&gt;3 五子棋游戏的主要方法&lt;/h2&gt;&lt;h3 id=&quot;3-1-画棋盘&quot;&gt;&lt;a href=&quot;#3-1-画棋盘&quot; class=&quot;headerlink&quot; title=&quot;3.1 画棋盘&quot;&gt;&lt;/a&gt;3.1 画棋盘&lt;/h3&gt;&lt;h4 id=&quot;3-1-1-画棋盘思路&quot;&gt;&lt;a href=&quot;#3-1-1-画棋盘思路&quot; class=&quot;headerlink&quot; title=&quot;3.1.1 画棋盘思路&quot;&gt;&lt;/a&gt;3.1.1 画棋盘思路&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 确定棋盘大小 15*15 即n = 15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawGobang&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 动态生成dom元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过添加类控制棋盘样式，尤其注意边缘的棋子的样式控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-1-2-画棋盘代码&quot;&gt;&lt;a href=&quot;#3-1-2-画棋盘代码&quot; class=&quot;headerlink&quot; title=&quot;3.1.2 画棋盘代码&quot;&gt;&lt;/a&gt;3.1.2 画棋盘代码&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 画棋盘格子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawGobang&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; block = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			block.className = &lt;span class=&quot;string&quot;&gt;&quot;gobang_block&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 赋予每个格子一个id,方便以后识别并下棋，或可添加html5自定义属性data-*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			block.id = &lt;span class=&quot;string&quot;&gt;&quot;block_&quot;&lt;/span&gt;+ i + &lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt; + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			gobang.appendChild(block);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 边缘的格子属于特殊情况，需要单独绘制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				block.className += &lt;span class=&quot;string&quot;&gt;&quot; top&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				block.className += &lt;span class=&quot;string&quot;&gt;&quot; bottom&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					block.className += &lt;span class=&quot;string&quot;&gt;&quot; left&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				block.className += &lt;span class=&quot;string&quot;&gt;&quot; right&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-1-2-画棋盘图示&quot;&gt;&lt;a href=&quot;#3-1-2-画棋盘图示&quot; class=&quot;headerlink&quot; title=&quot;3.1.2 画棋盘图示&quot;&gt;&lt;/a&gt;3.1.2 画棋盘图示&lt;/h4&gt;&lt;p&gt;注意边缘的棋子的样式控制，另外鼠标经过时添加红色虚线提醒。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;board of gobang&quot; class=&quot;gobang_qipan&quot; src=&quot;/img/post/wangcainuan/2016-01-14-introduction-to-JS-game-development/board.png&quot; alt=&quot;画棋盘&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-2-画棋子&quot;&gt;&lt;a href=&quot;#3-2-画棋子&quot; class=&quot;headerlink&quot; title=&quot;3.2 画棋子&quot;&gt;&lt;/a&gt;3.2 画棋子&lt;/h3&gt;&lt;p&gt;处理函数需要什么操作，只是把棋子画到相对应的棋盘即可吗？&lt;/p&gt;
&lt;h4 id=&quot;3-2-1-事件委托&quot;&gt;&lt;a href=&quot;#3-2-1-事件委托&quot; class=&quot;headerlink&quot; title=&quot;3.2.1 事件委托&quot;&gt;&lt;/a&gt;3.2.1 事件委托&lt;/h4&gt;&lt;p&gt;画棋子之前需要了解一下事件委托：利用事件冒泡，只制定一个事件处理程序，就可以管理某一类型的所有事件。&lt;br&gt;它的好处在于占用内存少，假设有一个父元素ul，有100个li子元素，如果给100个li子元素都绑定事件，相当耗内存，事件委托的原理就是只需要给父元素绑定事件即可。&lt;br&gt;不过它的使用是有条件的，它要求事件会冒泡，会冒泡的事如click、mousedown、mouseup、keydown、keyup和keypress事件。&lt;/p&gt;
&lt;p&gt;冒泡的过程大概如下：div  -&amp;gt; body -&amp;gt; html(ie5.5-跳过） -&amp;gt; document -&amp;gt; window(ie9,fx,chrome,safari)。&lt;/p&gt;
&lt;p&gt;因此我不需要给棋盘的每个格子绑定事件，只需要绑定棋盘（格子的父元素）即可。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gobang = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;gobang_main&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 获取棋盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EventUtil.addHandler(gobang,&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;,drawPiece);  &lt;span class=&quot;comment&quot;&gt;// 点击棋盘，进行下棋&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-2-事件委托的问题&quot;&gt;&lt;a href=&quot;#3-2-2-事件委托的问题&quot; class=&quot;headerlink&quot; title=&quot;3.2.2 事件委托的问题&quot;&gt;&lt;/a&gt;3.2.2 事件委托的问题&lt;/h4&gt;&lt;p&gt;由于在父元素中绑定事件，我们知道，事件目标是被单击的单个五子棋格子。因此，需要检测 id属性或其他属性 来决定采取适当的操作。&lt;/p&gt;
&lt;p&gt;如果不检测是否是我们想要的事件目标，可能导致错误。&lt;br&gt;代码如下,如果targetID不是我们的事件目标，可能i,j的数据则不正确，从而导致访问对应的五子棋格子gobangArr[i][j]出错：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 格子的id格式为&quot;block_&quot;+ i + &quot;_&quot; + j;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// targetId为当前目标的id,前面加运算符+是为了转换类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// i和j代表第i行第j列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = +targetId.split(&lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;j = +targetId.split(&lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-3-已下过的棋盘位置&quot;&gt;&lt;a href=&quot;#3-2-3-已下过的棋盘位置&quot; class=&quot;headerlink&quot; title=&quot;3.2.3 已下过的棋盘位置&quot;&gt;&lt;/a&gt;3.2.3 已下过的棋盘位置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;画当前棋子，通过添加类 active 和 代表颜色的white或black&lt;/li&gt;
&lt;li&gt;target.className.indexOf(“active”)&amp;lt;0，意思是当前位置的类若含有active类，则不执行画棋子。&lt;/li&gt;
&lt;li&gt;误区：通过 棋盘数据gobangArr[i][j]是否为空来判断是否下过棋子。不可通过棋盘数据gobangArr[i][j] 是否为空来判断，因为数组可能存在冗余数据。除非初始化时重置了数组为空。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-2-4-其他&quot;&gt;&lt;a href=&quot;#3-2-4-其他&quot; class=&quot;headerlink&quot; title=&quot;3.2.4 其他&quot;&gt;&lt;/a&gt;3.2.4 其他&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一旦下一个棋子就需要判断是否赢了：chessWin(i,j,color);&lt;/li&gt;
&lt;li&gt;需要切换棋子颜色：color = color==”black”? “white”:”black”;&lt;/li&gt;
&lt;li&gt;其中一方赢了的话，不可再下棋，必须重新来一局，即移除画棋子的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-3-判断输赢&quot;&gt;&lt;a href=&quot;#3-3-判断输赢&quot; class=&quot;headerlink&quot; title=&quot;3.3 判断输赢&quot;&gt;&lt;/a&gt;3.3 判断输赢&lt;/h3&gt;&lt;h4 id=&quot;3-3-1-判断输赢算法&quot;&gt;&lt;a href=&quot;#3-3-1-判断输赢算法&quot; class=&quot;headerlink&quot; title=&quot;3.3.1 判断输赢算法&quot;&gt;&lt;/a&gt;3.3.1 判断输赢算法&lt;/h4&gt;&lt;p&gt;首先设置count = 1。count的值代表在同一个方向连续在一起的棋子总数，达到5个则该方赢。&lt;br&gt;如水平方向按照如下顺序执行判断，其他方向雷同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按顺序遍历当前位置(i,j)棋子的前四个位置是否含相同颜色的棋子，若相同则count++，同时检测是否count == 5 。&lt;/li&gt;
&lt;li&gt;一旦不相同退出循环，&lt;/li&gt;
&lt;li&gt;继续按顺序遍历(i,j)棋子的后四个位置是否含相同颜色的棋子，若相同，count++以及检测是否count == 5 。&lt;br&gt;如下图所示，红色虚线为即将要下的棋子，计算count为1，向左判断使得count最后为3，遇到红色交叉的地方没有黑色棋子，则退出循环；从红色虚线的右边继续判断，最后count为5，因此判断黑棋赢：&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;check who win&quot; class=&quot;gobang_check&quot; src=&quot;/img/post/wangcainuan/2016-01-14-introduction-to-JS-game-development/check.jpg&quot; alt=&quot;判断输赢算法&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下，一共检测四个方向：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chessWin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i,j,color&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 垂直方向 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重置count = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 水平方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重置count = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 45°方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重置count = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 135°方向 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 重置count = 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-4-重置游戏&quot;&gt;&lt;a href=&quot;#3-4-重置游戏&quot; class=&quot;headerlink&quot; title=&quot;3.4 重置游戏&quot;&gt;&lt;/a&gt;3.4 重置游戏&lt;/h3&gt;&lt;p&gt;主要是清除棋子以及棋子数组，另外设置默认数据：默认黑棋先下，重置提示语，重新给棋盘绑定方法。一方赢了的话，默认移除画棋子方法的，所以需要重新给棋盘绑定方法。如果理解了文章上面讲述的方法的话，重置游戏是比较简单的，因此不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;4-五子棋测试&quot;&gt;&lt;a href=&quot;#4-五子棋测试&quot; class=&quot;headerlink&quot; title=&quot;4 五子棋测试&quot;&gt;&lt;/a&gt;4 五子棋测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;检测特殊值。如检测棋盘边缘是否可以正常画棋子。&lt;/li&gt;
&lt;li&gt;测试范围。判断五子棋的四个方向即垂直方向、水平方向、45度方向、135度方向，是否可以判断输赢正确。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-JS事件&quot;&gt;&lt;a href=&quot;#5-JS事件&quot; class=&quot;headerlink&quot; title=&quot;5 JS事件&quot;&gt;&lt;/a&gt;5 JS事件&lt;/h2&gt;&lt;p&gt;最后根据五子棋的主要方法，总结一下js事件。&lt;/p&gt;
&lt;h3 id=&quot;5-1-事件处理程序：响应某个事件的函数&quot;&gt;&lt;a href=&quot;#5-1-事件处理程序：响应某个事件的函数&quot; class=&quot;headerlink&quot; title=&quot;5.1 事件处理程序：响应某个事件的函数&quot;&gt;&lt;/a&gt;5.1 事件处理程序：响应某个事件的函数&lt;/h3&gt;&lt;h4 id=&quot;5-1-1-html事件处理程序&quot;&gt;&lt;a href=&quot;#5-1-1-html事件处理程序&quot; class=&quot;headerlink&quot; title=&quot;5.1.1  html事件处理程序&quot;&gt;&lt;/a&gt;5.1.1  html事件处理程序&lt;/h4&gt;&lt;p&gt;即直接在HTML代码中添加事件处理程序。不推荐使用，原因如下：&lt;br&gt;html事件处理程序缺点：时差问题、代码紧密耦合、扩展事件处理程序的作用域链在不同浏览器中导致不同结果。&lt;/p&gt;
&lt;h4 id=&quot;5-1-2-DOM0级事件处理程序&quot;&gt;&lt;a href=&quot;#5-1-2-DOM0级事件处理程序&quot; class=&quot;headerlink&quot; title=&quot;5.1.2  DOM0级事件处理程序&quot;&gt;&lt;/a&gt;5.1.2  DOM0级事件处理程序&lt;/h4&gt;&lt;p&gt;类似onclick等事件处理程序属性，通常全部小写。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btn = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; &amp;#125;;    &lt;span class=&quot;comment&quot;&gt;// 绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.onclick = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 解绑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-1-3-DOM2级事件处理程序&quot;&gt;&lt;a href=&quot;#5-1-3-DOM2级事件处理程序&quot; class=&quot;headerlink&quot; title=&quot;5.1.3  DOM2级事件处理程序&quot;&gt;&lt;/a&gt;5.1.3  DOM2级事件处理程序&lt;/h4&gt;&lt;p&gt;DOM2：可添加多个事件处理程序，按顺序触发。&lt;br&gt;使用方法：&lt;br&gt; 绑定函数addEventListener() 与 解绑函数removeEventListener()：参数为事件名（如click)、作为事件处理程序的函数、布尔值。布尔值为true时代表捕获，false代表冒泡阶段调用事件处理程序，一般为false。&lt;br&gt; 注意：若第二个参数为匿名函数，即使用removeEventListener()传入相同的匿名函数也无法解绑。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;,myGod,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myGod&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alert(&lt;span class=&quot;string&quot;&gt;&quot;oh,my god!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.removeEventListener(&lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;,myGod,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-1-4-IE事件处理程序&quot;&gt;&lt;a href=&quot;#5-1-4-IE事件处理程序&quot; class=&quot;headerlink&quot; title=&quot;5.1.4  IE事件处理程序&quot;&gt;&lt;/a&gt;5.1.4  IE事件处理程序&lt;/h4&gt;&lt;p&gt;可添加多个事件处理程序，按相反的顺序触发。只有IE和opera支持。&lt;br&gt;在DOM0级中，this为所属元素的作用域内运行；但是在使用attachEvent()方法时，事件处理程序在全局作用域中运行，即this===window！！！&lt;br&gt;使用方法：&lt;br&gt;绑定函数attachEvent()  和 解绑函数detachEvent() : 参数为 事件处理程序名称(如 onclick )与函数。如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn.attachEvent(&lt;span class=&quot;string&quot;&gt;&quot;onclick&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-1-5-跨浏览器&quot;&gt;&lt;a href=&quot;#5-1-5-跨浏览器&quot; class=&quot;headerlink&quot; title=&quot;5.1.5  跨浏览器&quot;&gt;&lt;/a&gt;5.1.5  跨浏览器&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; EventUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addHandler: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element, type, handler&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (element.addEventListener)&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// DOM2级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            element.addEventListener(type, handler, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (element.attachEvent)&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// IE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            element.attachEvent(&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt; + type, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// DOM0级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            element[&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt; + type] = handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-2-事件对象event&quot;&gt;&lt;a href=&quot;#5-2-事件对象event&quot; class=&quot;headerlink&quot; title=&quot;5.2 事件对象event&quot;&gt;&lt;/a&gt;5.2 事件对象event&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM0级或DOM2级都会传入event对象。&lt;/li&gt;
&lt;li&gt;ie访问event有几种方式，取决于指定事件处理程序的方法。&lt;br&gt;   DOM0：window.event&lt;br&gt;   attachEvent()：window.event或event&lt;/li&gt;
&lt;li&gt;跨浏览器方案如下：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; EventUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getEvent: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; event ? event : &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-3-事件目标&quot;&gt;&lt;a href=&quot;#5-3-事件目标&quot; class=&quot;headerlink&quot; title=&quot;5.3 事件目标&quot;&gt;&lt;/a&gt;5.3 事件目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象this始终等于currentTarget,而target则只包含事件的实际目标。&lt;br&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(event.currentTarget === &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body);   &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; === &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body);                  &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(event.target === &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;myBtn&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;跨浏览器解决方案如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; EventUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getTarget: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; event.target || event.srcElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-五子棋源码以及参考&quot;&gt;&lt;a href=&quot;#6-五子棋源码以及参考&quot; class=&quot;headerlink&quot; title=&quot;6 五子棋源码以及参考&quot;&gt;&lt;/a&gt;6 五子棋源码以及参考&lt;/h2&gt;&lt;p&gt;在线地址： &lt;a href=&quot;http://labs.qiang.it/qqpai/test/wcn/gobang/gobang.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://labs.qiang.it/qqpai/test/wcn/gobang/gobang.html&lt;/a&gt;&lt;br&gt;github地址：&lt;a href=&quot;https://github.com/Newcandy/gobang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Newcandy/gobang&lt;/a&gt;&lt;br&gt;参考书籍：《Javascript高级程序设计》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;万事开头难，js一直没有进步？跟着这篇文章来编写五子棋游戏吧！&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://aotu.io/tags/js/"/>
    
      <category term="游戏" scheme="http://aotu.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="五子棋" scheme="http://aotu.io/tags/%E4%BA%94%E5%AD%90%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>Promise 实战</title>
    <link href="http://aotu.io/notes/2016/01/08/2016-01-06-promise/"/>
    <id>http://aotu.io/notes/2016/01/08/2016-01-06-promise/</id>
    <published>2016-01-07T17:05:05.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Promise-是什么&quot;&gt;&lt;a href=&quot;#Promise-是什么&quot; class=&quot;headerlink&quot; title=&quot;Promise 是什么&quot;&gt;&lt;/a&gt;Promise 是什么&lt;/h2&gt;&lt;p&gt;Promise 是抽象异步处理对象以及对其进行各种操作的组件。 通俗点讲，Promise能解决由于回调嵌套带来的流程控制与可读性问题。&lt;br&gt;promise 已经是成为我们解决回调炼狱的常用方案，而且已经得到官方标准支持，如果你刚刚开始使用Promise，本文将帮助你了解几个常见的Promise的使用场景。&lt;/p&gt;
&lt;h2 id=&quot;Promise-的历史&quot;&gt;&lt;a href=&quot;#Promise-的历史&quot; class=&quot;headerlink&quot; title=&quot;Promise 的历史&quot;&gt;&lt;/a&gt;Promise 的历史&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Futures_and_promises&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;早在1976年就有人提出Promise 的概念&lt;/a&gt;。之后的计算机语言发展中，很多语言都提供了与 Promise 相关的特性。而对于Javascript语言来说，最早让大家广泛接触的 Promise 相关的库是由 &lt;code&gt;jQuery.Deferred()&lt;/code&gt; 对象实现的。随着 Promise/A+ 标准规定了一系列 API，实现该标准的库如雨后春笋版涌现了出来，在最新的ECMAScript 2015中已经提供了Promise的内置对象，成为了基础库。  &lt;/p&gt;
&lt;h2 id=&quot;一些Promise的使用场景&quot;&gt;&lt;a href=&quot;#一些Promise的使用场景&quot; class=&quot;headerlink&quot; title=&quot;一些Promise的使用场景&quot;&gt;&lt;/a&gt;一些Promise的使用场景&lt;/h2&gt;&lt;h3 id=&quot;1-原生API函数的Promise化&quot;&gt;&lt;a href=&quot;#1-原生API函数的Promise化&quot; class=&quot;headerlink&quot; title=&quot;1.原生API函数的Promise化&quot;&gt;&lt;/a&gt;1.原生API函数的Promise化&lt;/h3&gt;&lt;p&gt;大部分原生的API函数并不支持Promise，还是基于回调来使用的，所以需要把一些方法改为返回一个 Promise 对象，这个过程被称为函数的 Promise 化。&lt;br&gt;下面一个例子将对定时器&lt;code&gt;setTimeout&lt;/code&gt; Promise 化。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn,time&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;( (resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Promise化本质上都属于一种Curry化。Curry化是指，将需要传递多参数的函数生成一个新的函数，如上代码先通过执行 timer得到一个新的函数，该函数会返回一个Promise，这样就完成了Promise化。将一些基础的函数进行Promise化，可以&lt;br&gt;大大减少不必要的代码。&lt;br&gt;下面的代码，将会体现这种优势:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promise_timer = timer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;promise_timer2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;( (resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;变量&lt;code&gt;promise_timer&lt;/code&gt;赋予的函数，与函数&lt;code&gt;promise_timer2&lt;/code&gt;是等价的。 可以看出 &lt;code&gt;setTimeout&lt;/code&gt; Promise 化之后，代码程序可读性更强，代码量也变少了。&lt;/p&gt;
&lt;h3 id=&quot;2-Promise-all解决并行任务&quot;&gt;&lt;a href=&quot;#2-Promise-all解决并行任务&quot; class=&quot;headerlink&quot; title=&quot;2.Promise.all解决并行任务&quot;&gt;&lt;/a&gt;2.Promise.all解决并行任务&lt;/h3&gt;&lt;p&gt;当某个函数需要在 N 个回调都完成时才执行，这个时候就可以使用&lt;code&gt;Promise.all&lt;/code&gt;来改善你的代码。&lt;/p&gt;
&lt;p&gt;以下是一个图片并行加载的例子,当所有图片加载完成后，再将所有图片一起展示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadImg&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;src&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;( (resolve,reject)=&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; img = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img.src = src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           resolve(img);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           reject(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showImgs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;imgs&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  imgs.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;img&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(img);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loadImg(&lt;span class=&quot;string&quot;&gt;&#39;1.png&#39;&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;//加载图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loadImg(&lt;span class=&quot;string&quot;&gt;&#39;2.png&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loadImg(&lt;span class=&quot;string&quot;&gt;&#39;3.png&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]).then(showImgs); &lt;span class=&quot;comment&quot;&gt;//显示图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/adamchuan/promise-1.svg&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;Promise.all&lt;/code&gt;中传入的 Promise 数组，各自 resolve 之后得到的值，将合并成一个数组传入到 then 中的方法，且数组中 resolve 值的顺序，与 Promise 数组的顺序一致。&lt;/p&gt;
&lt;h3 id=&quot;3-Promise-then-的链式调用&quot;&gt;&lt;a href=&quot;#3-Promise-then-的链式调用&quot; class=&quot;headerlink&quot; title=&quot;3.Promise.then 的链式调用&quot;&gt;&lt;/a&gt;3.Promise.then 的链式调用&lt;/h3&gt;&lt;p&gt;在许多Promise示例中都可以看到类似如下的链式调用的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUserInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getUserInfo start&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name : &lt;span class=&quot;string&quot;&gt;&#39;adamchuan&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resolve(userinfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getUserInfo end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getGroupInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userinfo&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getGroupInfo start&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; groupInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name : &lt;span class=&quot;string&quot;&gt;&#39;jdc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getGroupInfo end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resolve(groupInfo,userinfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTaskInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;groupInfo,userinfo&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getTaskInfo start&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taskInfo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name : &lt;span class=&quot;string&quot;&gt;&#39;rebuild&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;getTaskInfo end&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.then(getUserInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .then(getGroupInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .then(getTaskInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 输出结果 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getUserInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getUserInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getGroupInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getGroupInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getTaskInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getTaskInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上面代码所示，我们可以很清楚的理解到程序执行的顺序是  &lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/adamchuan/promise-2.svg&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;得到userInfo&lt;/li&gt;
&lt;li&gt;得到groupInfo&lt;/li&gt;
&lt;li&gt;得到taskInfo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是如果我们对代码进行一点小的改造，将 then 中的方法不再返回 Promise ，那么执行的代码将会变成这样:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      p.then(getUserInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .then(getGroupInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .then(getTaskInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getUserInfo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getGroupInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTaskInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;((resolve,reject)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setTimeout(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 输出结果 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getUserInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getGroupInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getTaskInfo start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getUserInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getGroupInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getTaskInfo end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是为什么呢？&lt;br&gt;因为每次调用 then 都会返回一个新的 Promise ，如果 then 中的申明的方法没有返回一个 Promise ，那么会默认返回一个新的&lt;br&gt;处于 fulfilled 的 Promise ，之后添加的 then 中的方法都会立即执行,所以执行的顺序就变成这样了：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/adamchuan/promise-3.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;当要在使用链式 Promise 时，请务必在then传入的方法中返回一个新的 Promise。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;另外一个需要注意的是，resolve 传递给下个 then 方法的值只能有一个，上面 getTaskInfo 方法中是无法获取到 userInfo 的值，所以如果有多个值需要放在一个数据集合（ Array , Object , Map , Set ）中传入下个方法。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTaskInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;groupInfo,userInfo&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* userInfo为undefined */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(groupInfo); &lt;span class=&quot;comment&quot;&gt;// &amp;#123; name : &#39;jdc&#39;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(userInfo);  &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-中断或取消-Promise-链&quot;&gt;&lt;a href=&quot;#4-中断或取消-Promise-链&quot; class=&quot;headerlink&quot; title=&quot;4.中断或取消 Promise 链&quot;&gt;&lt;/a&gt;4.中断或取消 Promise 链&lt;/h3&gt;&lt;p&gt;Promise 标准的API 中并没有提供相应的方法来 中断或者取消 Promise 链的执行，一些库中提供了类似&lt;code&gt;Promise.break&lt;/code&gt;或者 &lt;code&gt;Promise.fail&lt;/code&gt;的方法来中断或取消 Promise 链。利用&lt;code&gt;Promise.catch&lt;/code&gt;的特性来中断 promise链。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 用于中断的信号 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BreakSignal&lt;/span&gt; &lt;/span&gt;&amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 开始.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (wantToBreakHere) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 抛出中断信号.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BreakSignal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 需要跳过的部分.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 接住中断信号.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .catch(BreakSignal, () =&amp;gt; &amp;#123; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要在 Promise 执行过程中抛出异常，都会直接跳转到 catch 中。但是这样的做法有一个缺点，无法区分程序本身的异常，还是手动抛出的异常。所以需要手动设置一个标识标量，来区分是为了中断执行还是本身的程序异常。&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;合理的利用 Promise ,可以让代码脉络更加的清晰易懂，流程控制，异常捕获也更加准确。当然为了使用 Promise 也要编写很多额外代码，&lt;br&gt;想要真正的解决回调问题还得期待ES7的 &lt;code&gt;async&lt;/code&gt; &lt;code&gt;await&lt;/code&gt; 关键字的到来，不过在此之前，Promise 都将是解决程序流程控制的最优选择之一。&lt;/p&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zuojj.com/archives/1292.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promise A+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liubin.org/promises-book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promise迷你书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alinode.aliyun.com/blog/5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promise的前世今生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery的deferred对象详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Promise-是什么&quot;&gt;&lt;a href=&quot;#Promise-是什么&quot; class=&quot;headerlink&quot; title=&quot;Promise 是什么&quot;&gt;&lt;/a&gt;Promise 是什么&lt;/h2&gt;&lt;p&gt;Promise 是抽象异步处理对象以及对其进行各种操作的组件。 通俗
    
    </summary>
    
      <category term="javascript" scheme="http://aotu.io/cates/javascript/"/>
    
    
      <category term="ES6" scheme="http://aotu.io/tags/ES6/"/>
    
      <category term="Promise" scheme="http://aotu.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>使用Chrome开发工具优化Web应用</title>
    <link href="http://aotu.io/notes/2016/01/07/debug-webapp-with-chrome-devtools/"/>
    <id>http://aotu.io/notes/2016/01/07/debug-webapp-with-chrome-devtools/</id>
    <published>2016-01-07T00:00:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;当我们写了一组炫(fu)酷(za)的H5动效后，发现在移动端上会卡顿，该怎么办？&lt;br&gt;目前市场上大多数设备的屏幕刷新频率是60Hz，想要用户滑动页面或者播放动画没有卡顿，浏览器的渲染速率就要和屏幕刷新的频率同步，达到60fps。&lt;/p&gt;
&lt;p&gt;Chrome开发工具的Timeline面板监控了web应用运行时所有活动情况，不过它的功能很多，对于英文不好的童鞋，有点无从下手，下面直接上手来使用。&lt;/p&gt;
&lt;h2 id=&quot;首先，审查一个页面，切换到Timeline面板。&quot;&gt;&lt;a href=&quot;#首先，审查一个页面，切换到Timeline面板。&quot; class=&quot;headerlink&quot; title=&quot;首先，审查一个页面，切换到Timeline面板。&quot;&gt;&lt;/a&gt;首先，审查一个页面，切换到Timeline面板。&lt;/h2&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/panel.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中红框标出的部分是功能栏：从45到47版本，Timeline工具连续都有更新，当前截图的版本号是47.0；&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开始/停止记录，打开Timeline面板时刷新页面会自动开始记录&lt;/li&gt;
&lt;li&gt;清除已有记录&lt;/li&gt;
&lt;li&gt;过滤内容&lt;/li&gt;
&lt;li&gt;强制垃圾回收&lt;/li&gt;
&lt;li&gt;视图模式，最新版本中点击切换两种视图模式&lt;/li&gt;
&lt;li&gt;捕获内容选项，选中最后一项截屏的话会保留每帧的截图，记录数据的buffer空间会和快被占满&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;接下来记录一段时间线状态。&quot;&gt;&lt;a href=&quot;#接下来记录一段时间线状态。&quot; class=&quot;headerlink&quot; title=&quot;接下来记录一段时间线状态。&quot;&gt;&lt;/a&gt;接下来记录一段时间线状态。&lt;/h2&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中没被标出的部分是整个监控过程中的数据概览；红框标出的部分有两栏，上面是选中的时间段内每一帧的情况，下面是内存占用的变化。&lt;/p&gt;
&lt;p&gt;浏览器渲染的速率达到60帧/秒，那么每一帧只有1000ms / 60 = 16.67ms的时间来响应，其中浏览器在每一帧还要做一些额外的事情，因为我们要保证每一帧的CPU time在12ms左右。&lt;/p&gt;
&lt;p&gt;有红色三角形角标标出的表示当前帧消耗过多时间&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames01.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;点击选中一帧可以看到当前帧的详细情况，图中显示，当前帧的渲染消耗了30.8ms，可能会造成卡顿。&lt;br&gt;饼图中可能会有五个颜色：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;蓝色： 加载&lt;/li&gt;
&lt;li&gt;黄色： 脚本执行&lt;/li&gt;
&lt;li&gt;紫色： 渲染&lt;/li&gt;
&lt;li&gt;绿色： 绘制&lt;/li&gt;
&lt;li&gt;灰色： DevTools不感知的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;图中帧因为没有加载活动，没有蓝色区域。可以看出脚本执行和帧绘制占据了大部分面积，不过问题并不在这里，因为它们总共才花费7.82s。&lt;br&gt;在Chrome的45.0版本中，饼图里还有一种颜色：白色，表示刷新周期里空闲的时间。在这段时间里，一直在等待用户的响应，直到一个交互事件触发了页面视图的变化。最新的更新里在饼图中去掉了白色，区分为CPU time和帧的Duration，更加合理。这里引起视图渲染和绘制可能有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户的交互行为&lt;/li&gt;
&lt;li&gt;定时器触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用requestAnimationFrame这个函数，将脚本执行和渲染流程联系起来，以避免在某一帧的中间突然执行脚本导致重新渲染和绘制而整个过程不能在16ms内完成。&lt;/p&gt;
&lt;h2 id=&quot;分析一个问题帧&quot;&gt;&lt;a href=&quot;#分析一个问题帧&quot; class=&quot;headerlink&quot; title=&quot;分析一个问题帧&quot;&gt;&lt;/a&gt;分析一个问题帧&lt;/h2&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames02.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;这一帧比较极端，从图上看就是紫色部分花费掉了大量时间，我们就可以从这里入手来优化代码，在此之前先得了解一下浏览器绘制帧的整个过程。实际导致绘制帧卡顿可能是其中任何一个环节。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frame-full.jpg&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Javascript： 除了使用Javascrit来实现视觉变化，还有CSS Animations、 Transitions。&lt;/li&gt;
&lt;li&gt;Style： 根据CSS选择器，对每个DOM元素匹配对应的CSS样式。&lt;/li&gt;
&lt;li&gt;Layout: 在上一步确定了每个DOM元素的样式规则后，这一步就是具体计算每个DOM元素最终在屏幕上显示的大小和位置。web页面中元素的布局是相对的，因此一个元素的布局发生变化，会联动地引发其他元素的布局发生变化。例如父元素的宽度变化引发子元素宽度变化，又联动的引发孙子元素的宽度变化。&lt;/li&gt;
&lt;li&gt;Painting： 绘制，本质上就是填充像素的过程。包括绘制文字、颜色、图像、边框和阴影等，也就是一个DOM元素所有的可视效果。一般来说，这个绘制过程是在多个层上完成的。&lt;/li&gt;
&lt;li&gt;Composite： 上一步的绘制是在多个层上进行的，在这一步，浏览器会将所有层按照合理的顺序合并成一个图层，然后显示在屏幕上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;说明，上述过程的解释总结或直接引用自谷歌开发者文档。&lt;/p&gt;
&lt;p&gt;在以上5个过程里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改DOM元素的“layout”(宽、高、位置)属性，浏览器会检查哪些元素需要重新布局，然后对页面激发一个reflow过程完成重新布局。被reflow的元素，接下来也会激发绘制过程，最后激发渲染层合并过程，生成最后的画面。&lt;/li&gt;
&lt;li&gt;DOM元素有一些“paint only”属性，例如背景图片、文字颜色、阴影，这些属性不会影响页面的布局，因此浏览器会在完成样式计算之后，跳过布局过程，只做绘制和渲染层合并过程。&lt;/li&gt;
&lt;li&gt;还有一些CSS属性既不需要重新布局也不需要重新绘制，例如，transform、opacity（目前，只有这两个属性），浏览器会在完成样式计算之后，直接做渲染层合并。&lt;/li&gt;
&lt;li&gt;用translateZ(0)属性把动画元素提升到单独的渲染层中（我们常说的启用3D加速）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于滚屏和动画，最理想的就是只使用transform和opacity来实现视觉变化效果，并且遵循第四点。&lt;/p&gt;
&lt;h2 id=&quot;点击切换视图模式，找到问题所在。&quot;&gt;&lt;a href=&quot;#点击切换视图模式，找到问题所在。&quot; class=&quot;headerlink&quot; title=&quot;点击切换视图模式，找到问题所在。&quot;&gt;&lt;/a&gt;点击切换视图模式，找到问题所在。&lt;/h2&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames03.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一个知名线上网站的首页，这里发生了滚屏触发加载内容，导致DOM结构变化，引发了大量内容的重绘和渲染，并且页面旧的内容没有回收，节点较多，明显的感觉到滚屏的时候有卡顿感。对于这个应用按照上述的思路来优化，在优化的过程中，我们也许会遇到下面这个问题。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames04.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是另一个demo页面，有数千个节点组成，用以模拟无限懒加载数据的情况，其中只有一个节点上应用了循环的css3动画。其它的都不会改变。为了将有动画的节点独立到一个单独的渲染层中，我对它应用了translateZ(0)。本以为大功告成，结果在滚屏的时候发现非常卡顿。于是就有了上图，平均每帧的渲染都消耗掉了200ms左右，从Timeline监控数据中可以看到，其中Composite Layers这个过程耗费了大量时间。那么直接查看layer状态：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Simbachen/frames05.png&quot; alt=&quot;[Timeline面板]&quot;&gt;&lt;/p&gt;
&lt;p&gt;再看官方文档的提示：由于每个渲染层的纹理都需要上传到GPU处理，过多的渲染层来带的开销而对页面渲染性能产生的影响，甚至远远超过了它在性能改善上带来的好处。&lt;/p&gt;
&lt;p&gt;实际上页面里并没有主动通过translateZ属性来独立更多的层，我们可以认为这是触发了浏览器的一个“bug”，最新版本的chrome仍然会触发这个问题，不过最新版本的ios里Safari已经不会触发这个问题了。至于什么情况会触发浏览器去创建一个独立层来渲染元素，例如拥有3DCSS属性的元素、使用加速视频解码的元素等，对这个问题这里就不再详述。&lt;/p&gt;
&lt;p&gt;如果手动的将大量的层独立出来渲染，导致GPU罢工，或是任由他们导致CPU罢工，都会造成性能问题，不过有了Timeline工具，我们就能找到问题所在，一一去分析解决了。&lt;/p&gt;
&lt;h2 id=&quot;参考文档：&quot;&gt;&lt;a href=&quot;#参考文档：&quot; class=&quot;headerlink&quot; title=&quot;参考文档：&quot;&gt;&lt;/a&gt;参考文档：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/web/fundamentals/performance&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.chrome.com/devtools/docs/timeline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.chrome.com/devtools/docs/timeline&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当我们写了一组炫(fu)酷(za)的H5动效后，发现在移动端上会卡顿，该怎么办？&lt;br&gt;目前市场上大多数设备的屏幕刷新频率是60Hz，想要用户滑动页面或者播放动画没有卡顿，浏览器的渲染速率就要和屏幕刷新的频率同步，达到60fps。&lt;/p&gt;
&lt;p&gt;Chrome开发工具的Tim
    
    </summary>
    
    
      <category term="chrome" scheme="http://aotu.io/tags/chrome/"/>
    
      <category term="DevTool" scheme="http://aotu.io/tags/DevTool/"/>
    
  </entry>
  
  <entry>
    <title>使用Github的webhooks进行网站自动化部署</title>
    <link href="http://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/"/>
    <id>http://aotu.io/notes/2016/01/07/auto-deploy-website-by-webhooks-of-github/</id>
    <published>2016-01-06T17:05:05.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;相信很多码农都玩过了&lt;code&gt;Git&lt;/code&gt;，如果对&lt;code&gt;Git&lt;/code&gt;只是一知半解，可以移步&lt;code&gt;LV&lt;/code&gt;写的 &lt;a href=&quot;http://aotu.io/notes/2015/11/17/Git-Commands/&quot;&gt;GIT常用操作总结&lt;/a&gt;，下面介绍到的一些关于 &lt;code&gt;Git&lt;/code&gt; 的概念就不再赘述。&lt;/p&gt;
&lt;p&gt;为啥想写这篇文章？主要是因为部门服务器因为安全性原因不允许&lt;code&gt;SCP&lt;/code&gt;上传文件进行应用部署，然后有一些应用是放在Github上的，然后部署应用的步骤就变成：&lt;/p&gt;
&lt;p&gt;1.git clone github项目 本地目录&lt;br&gt;2.配置一下应用的pm2.json并reload&lt;br&gt;3.Nginx配置一下反向代理并restart&lt;/p&gt;
&lt;p&gt;当然如果只是一次性部署上去就不再修改的话并没啥问题，但是要是项目持续性修改迭代的话，就比较麻烦了，我们就在不断的重复着上面的步骤。作为一个码农，怎么允许不断的重复同样的工作，于是&lt;code&gt;Github webhooks&lt;/code&gt;闪亮登场。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关于Github-webhooks&quot;&gt;&lt;a href=&quot;#关于Github-webhooks&quot; class=&quot;headerlink&quot; title=&quot;关于Github webhooks&quot;&gt;&lt;/a&gt;关于Github webhooks&lt;/h2&gt;&lt;p&gt;让我们看看 &lt;a href=&quot;https://developer.github.com/webhooks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方&lt;/a&gt; 关于Github webhooks的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Webhooks allow you to build or set up integrations which subscribe to certain events on GitHub.com.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提炼出来几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须是Github上面的项目&lt;/li&gt;
&lt;li&gt;订阅了确定的事件（包括push/pull等命令）&lt;/li&gt;
&lt;li&gt;自动触发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚好符合了这几个条件，那接下来就看看如何进行&lt;code&gt;网站自动化部署&lt;/code&gt;，主要会从下面几点来讲解：&lt;/p&gt;
&lt;p&gt;1.自动化&lt;code&gt;shell&lt;/code&gt;脚本&lt;br&gt;2.服务端实现&lt;br&gt;3.配置&lt;code&gt;github webhooks&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;自动化脚本&quot;&gt;&lt;a href=&quot;#自动化脚本&quot; class=&quot;headerlink&quot; title=&quot;自动化脚本&quot;&gt;&lt;/a&gt;自动化脚本&lt;/h2&gt;&lt;p&gt;我之前翻译过一篇文章 &lt;a href=&quot;http://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/&quot;&gt;使用Node.JS创建命令行脚本工具&lt;/a&gt;，但是我们现在的自动化脚本直接用 &lt;code&gt;shell&lt;/code&gt; 来实现，假设名称为&lt;code&gt;auto_build.sh&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#! /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SITE_PATH=&lt;span class=&quot;string&quot;&gt;&#39;/export/Data/aotu.jd.com/index/cnt1992.github.io&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER=&lt;span class=&quot;string&quot;&gt;&#39;admin&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USERGROUP=&lt;span class=&quot;string&quot;&gt;&#39;admin&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$SITE_PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard origin/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clean &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chown -R &lt;span class=&quot;variable&quot;&gt;$USER&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$USERGROUP&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$SITE_PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 在执行上面&lt;code&gt;shell&lt;/code&gt;脚本之前我们必须第一次手动&lt;code&gt;git clone&lt;/code&gt;项目进去，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone github远程项目 /export/Data/aotu&lt;span class=&quot;selector-class&quot;&gt;.jd&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;/index/cnt1992&lt;span class=&quot;selector-class&quot;&gt;.github&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.io&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;shell脚本其实就跟直接在终端运行命令一样，类似于windows下面的BAT批处理命令，更多详细可以查阅资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;服务端实现&quot;&gt;&lt;a href=&quot;#服务端实现&quot; class=&quot;headerlink&quot; title=&quot;服务端实现&quot;&gt;&lt;/a&gt;服务端实现&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github webhooks&lt;/code&gt;需要跟我们的服务器进行通信，确保是可以推送到我们的服务器，所以会发送一个带有&lt;code&gt;X-Hub-Signature&lt;/code&gt;的&lt;code&gt;POST&lt;/code&gt;请求，为了方便我们直接用第三方的库&lt;a href=&quot;https://github.com/rvagg/github-webhook-handler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-webhook-handler&lt;/a&gt;来接收参数并且做监听事件的处理等工作。&lt;/p&gt;
&lt;p&gt;现在我们可以在&lt;code&gt;shell&lt;/code&gt;脚本的同级目录下面执行下面命令初始化一个&lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后执行下面命令安装上面提到的第三方库：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -S github-webhook-handler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来创建我们的服务主入口文件&lt;code&gt;index.js&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着参考&lt;code&gt;github-webhook-handler&lt;/code&gt;的&lt;code&gt;demo&lt;/code&gt;编辑我们的&lt;code&gt;index.js&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spawn = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;child_process&#39;&lt;/span&gt;).spawn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createHandler = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;github-webhook-handler&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面填写的myscrect跟github webhooks配置一样，下一步会说；path是我们访问的路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; handler = createHandler(&amp;#123; path: &lt;span class=&quot;string&quot;&gt;&#39;/auto_build&#39;&lt;/span&gt;, secret: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handler(req, res, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.statusCode = &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res.end(&lt;span class=&quot;string&quot;&gt;&#39;no such location&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;6666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handler.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&#39;Error:&#39;&lt;/span&gt;, err.message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听到push事件的时候执行我们的自动化脚本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handler.on(&lt;span class=&quot;string&quot;&gt;&#39;push&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Received a push event for %s to %s&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.payload.repository.name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.payload.ref);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  runCommand(&lt;span class=&quot;string&quot;&gt;&#39;sh&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;./auto_build.sh&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; txt &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(txt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rumCommand&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; cmd, args, callback &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child = spawn( cmd, args );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; response = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child.stdout.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; buffer &lt;/span&gt;)&lt;/span&gt;&amp;#123; resp += buffer.toString(); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child.stdout.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; callback( resp ) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 由于我们不需要监听issues，所以下面代码注释掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  handler.on(&#39;issues&#39;, function (event) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    console.log(&#39;Received an issue event for %s action=%s: #%d %s&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      event.payload.repository.name,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      event.payload.action,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      event.payload.issue.number,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//      event.payload.issue.title)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后利用node管理工具跑起来服务，这里使用了&lt;code&gt;pm2&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 start index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这一步服务已经跑起来了，但是对外网并不能直接访问到，所以还需要配置一下&lt;code&gt;Nginx&lt;/code&gt;做一下反向代理：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    listen &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_name aotu.jd.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location /auto_build &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http:&lt;span class=&quot;comment&quot;&gt;//127.0.0.1:6666;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，到这里整个服务已经搭建完成，下一步就只需要配置&lt;code&gt;Github webhooks&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;配置github-webhooks&quot;&gt;&lt;a href=&quot;#配置github-webhooks&quot; class=&quot;headerlink&quot; title=&quot;配置github webhooks&quot;&gt;&lt;/a&gt;配置&lt;code&gt;github webhooks&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;我们可以在我们的&lt;code&gt;Github&lt;/code&gt;上面最右边有一个&lt;code&gt;Settings&lt;/code&gt;的Tab，找到&lt;code&gt;Webhooks &amp;amp; services&lt;/code&gt;，如下图：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;Github Webhooks截图&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/webhooks.png&quot; alt=&quot;Github Webhooks截图&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后点击新建，输入&lt;code&gt;Payload URL&lt;/code&gt;跟&lt;code&gt;Secret&lt;/code&gt;，确定即可。&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;p&gt;绑定成功之后，我们可以试试提交一下代码，然后来到&lt;code&gt;Github&lt;/code&gt;看看是否自动触发了接口，如下图：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;Github Webhooks接口触发&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/webhooks-show.png&quot; alt=&quot;Github Webhooks接口触发&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后随便选择一个点击一下，可以看到&lt;code&gt;200&lt;/code&gt;的响应：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;Github Webhooks接口触发&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/webhook-success.png&quot; alt=&quot;Github Webhooks接口触发&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;上面就是利用&lt;code&gt;Github webhooks&lt;/code&gt;进行网站自动化部署的全部内容了，不难发现其实这项技术还是有局限性的，那就是依赖于&lt;code&gt;github&lt;/code&gt;，一般我们选择的都是免费github账号，所有项目都对外，一些敏感项目是不适合放置上去的。&lt;/p&gt;
&lt;p&gt;这个时候就考虑这个组里同事推荐的 &lt;a href=&quot;http://backup.github.io/backup/v4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;backup&lt;/a&gt;，自己还没试用，有兴趣可以了解了解。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多码农都玩过了&lt;code&gt;Git&lt;/code&gt;，如果对&lt;code&gt;Git&lt;/code&gt;只是一知半解，可以移步&lt;code&gt;LV&lt;/code&gt;写的 &lt;a href=&quot;http://aotu.io/notes/2015/11/17/Git-Commands/&quot;&gt;GIT常用操作总结&lt;/a&gt;，下面介绍到的一些关于 &lt;code&gt;Git&lt;/code&gt; 的概念就不再赘述。&lt;/p&gt;
&lt;p&gt;为啥想写这篇文章？主要是因为部门服务器因为安全性原因不允许&lt;code&gt;SCP&lt;/code&gt;上传文件进行应用部署，然后有一些应用是放在Github上的，然后部署应用的步骤就变成：&lt;/p&gt;
&lt;p&gt;1.git clone github项目 本地目录&lt;br&gt;2.配置一下应用的pm2.json并reload&lt;br&gt;3.Nginx配置一下反向代理并restart&lt;/p&gt;
&lt;p&gt;当然如果只是一次性部署上去就不再修改的话并没啥问题，但是要是项目持续性修改迭代的话，就比较麻烦了，我们就在不断的重复着上面的步骤。作为一个码农，怎么允许不断的重复同样的工作，于是&lt;code&gt;Github webhooks&lt;/code&gt;闪亮登场。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Github" scheme="http://aotu.io/tags/Github/"/>
    
      <category term="webhooks" scheme="http://aotu.io/tags/webhooks/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画实践</title>
    <link href="http://aotu.io/notes/2016/01/04/css3-animation/"/>
    <id>http://aotu.io/notes/2016/01/04/css3-animation/</id>
    <published>2016-01-04T15:58:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;需求中常见的css3动画&quot;&gt;&lt;a href=&quot;#需求中常见的css3动画&quot; class=&quot;headerlink&quot; title=&quot;需求中常见的css3动画&quot;&gt;&lt;/a&gt;需求中常见的css3动画&lt;/h2&gt;&lt;p&gt;需求中常见的css3动画一般有&lt;strong&gt;补间动画（又叫“关键帧动画”）&lt;/strong&gt;和&lt;strong&gt;逐帧动画&lt;/strong&gt;两种，下面分别介绍：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;补间动画/关键帧动画：&lt;br&gt; 常用于实现位移、颜色（透明度）、大小、旋转、倾斜等变化。一般有&lt;code&gt;Transitions&lt;/code&gt;和&lt;code&gt;Keyframes animation&lt;/code&gt;两种方法实现补间动画。&lt;br&gt; &lt;strong&gt;Transitions：&lt;/strong&gt;用于实现简单的动画，只有起始两帧过渡。多用于页面的交互操作，使交互效果更生动活泼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CSS的&lt;code&gt;transition&lt;/code&gt;允许CSS的属性值在一定的时间区间内平滑地过渡。&lt;br&gt;这种效果可以在鼠标单击、获得焦点、被点击或对元素任何改变中触发，并圆滑地以动画效果改变CSS的属性值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;strong&gt;Keyframes animation：&lt;/strong&gt;用于实现较为复杂的动画，一般关键帧较多。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设置动画的关键帧规则。&lt;br&gt;&lt;code&gt;animation&lt;/code&gt;的&lt;code&gt;timing-function&lt;/code&gt;设置为&lt;code&gt;ease&lt;/code&gt;、&lt;code&gt;linear&lt;/code&gt;或&lt;code&gt;cubic-bezier&lt;/code&gt;，它会在每个关键帧之间插入补间动画，产生具有连贯性的动画。   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逐帧动画：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;animation的&lt;code&gt;timing-function&lt;/code&gt;默认值为&lt;code&gt;ease&lt;/code&gt;，它会在每个关键帧之间插入补间动画，所以动画效果是连贯性的。&lt;br&gt;除了&lt;code&gt;ease&lt;/code&gt;、&lt;code&gt;linear&lt;/code&gt;、&lt;code&gt;cubic-bezier&lt;/code&gt;之类的过渡函数都会为其插入补间。&lt;br&gt;有些效果不需要补间，只需要关键帧之间的跳跃，这时应该使用&lt;code&gt;steps&lt;/code&gt;过渡方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 更多详细用法请查看：&lt;a href=&quot;http://www.cnblogs.com/aaronjs/p/4642015.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《深入理解CSS3 Animation 帧动画》&lt;/a&gt;。&lt;br&gt; 逐帧动画可用于&lt;strong&gt;loading动画&lt;/strong&gt;，但更多的用于&lt;strong&gt;Sprite精灵动画（人物运动）&lt;/strong&gt;。精灵动画把所有帧都放在一起，通过CSS3的&lt;code&gt;animation&lt;/code&gt;控制&lt;code&gt;background-position&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; 下面看一个精灵动画的例子：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/1-1.gif&quot; alt=&quot;[逐帧动画示例]&quot;&gt;&lt;/p&gt;
&lt;p&gt; （案例：拍拍无聊者联盟宣传页）&lt;/p&gt;
&lt;p&gt; steps的参数有几个坑，需要特别留意：&lt;br&gt; 第一个参数&lt;code&gt;number&lt;/code&gt;为指定的间隔数，指的是把&lt;strong&gt;两个关键帧之间的动画分为n步阶段性展示&lt;/strong&gt;，而不是&lt;code&gt;keyframes&lt;/code&gt;写的变化次数。&lt;br&gt; 我们将上述案例中hand部分作为例子：由雪碧图可知，手部的摆动一种有两种状态，故&lt;code&gt;keyframes&lt;/code&gt;需要写两帧：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;-webkit-keyframes&lt;/span&gt; wave&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	50%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 设置不同的number值：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*将`number`设置为2*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.share3&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.hand&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;: wave &lt;span class=&quot;built_in&quot;&gt;steps&lt;/span&gt;(2,end) &lt;span class=&quot;number&quot;&gt;2s&lt;/span&gt; forwards infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*将`number`设置为1*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.active&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.share3&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.hand&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;: wave &lt;span class=&quot;built_in&quot;&gt;steps&lt;/span&gt;(1,end) &lt;span class=&quot;number&quot;&gt;2s&lt;/span&gt; forwards infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/1-4.gif&quot; alt=&quot;[steps中的坑]&quot;&gt;&lt;/p&gt;
&lt;p&gt; （左图：&lt;code&gt;number&lt;/code&gt;为2；右图：&lt;code&gt;number&lt;/code&gt;为1）&lt;/p&gt;
&lt;p&gt; 第二个参数可选，接受&lt;code&gt;start&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;两个值：指定在每个间隔的&lt;strong&gt;起点&lt;/strong&gt;或是&lt;strong&gt;终点&lt;/strong&gt;发生阶跃变化。通过&lt;a href=&quot;http://www.w3.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;中的一张step的工作机制图可以理解：&lt;br&gt; &lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/1-2.png&quot; alt=&quot;[steps中的坑]&quot;&gt;&lt;/p&gt;（图片来源：&lt;a href=&quot;http://www.w3.org/TR/css3-transitions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;）&lt;p&gt;&lt;/p&gt;
&lt;p&gt; TIPS：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;step-start&lt;/code&gt;等同于&lt;code&gt;steps(1,start)&lt;/code&gt;：动画执行时为开始左侧端点的部分为开始；&lt;br&gt;&lt;code&gt;step-end&lt;/code&gt;等同于&lt;code&gt;steps(1,end)&lt;/code&gt;：动画执行时以结尾端点为开始，默认值为end。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 最后安利一个计算帧数的工具：&lt;a href=&quot;http://tid.tenpay.com/labs/css3_keyframes_calculator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3动画帧数计算器&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;CSS动画的优缺点&quot;&gt;&lt;a href=&quot;#CSS动画的优缺点&quot; class=&quot;headerlink&quot; title=&quot;CSS动画的优缺点&quot;&gt;&lt;/a&gt;CSS动画的优缺点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;优点：&lt;blockquote&gt;
&lt;p&gt;简单、高效&lt;br&gt;声明式的&lt;br&gt;不依赖于主线程，采用硬件加速（GPU）&lt;br&gt;简单的控制keyframe animation播放和暂停&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;缺点：&lt;blockquote&gt;
&lt;p&gt;不能动态修改或定义动画内容&lt;br&gt;不同的动画无法实现同步&lt;br&gt;多个动画彼此无法堆叠&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;简单做动画：&quot;&gt;&lt;a href=&quot;#简单做动画：&quot; class=&quot;headerlink&quot; title=&quot;简单做动画：&quot;&gt;&lt;/a&gt;简单做动画：&lt;/h2&gt;&lt;p&gt;总结一下在之前做动画需求时的经验，归纳为以下7个步骤。以此需求为例：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/3-1.jpg&quot; alt=&quot;[简单做动画]&quot;&gt;&lt;/p&gt;（案例：iphone6s推广游戏）&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;观察&lt;/strong&gt;——哪些元素可以动？元素可以怎么动？&lt;/p&gt;
&lt;p&gt; 根据视觉稿，分析标题、按钮、人物、背景都可以适当加动画元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;沟通&lt;/strong&gt;——了解设计师的想法，并提出自己的想法。&lt;/p&gt;
&lt;p&gt; 这是设计师给出的大致动画过程，具体的过渡及动效没有明确给出，因此可以根据自己的想法与设计师进行沟通。&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/3-2.JPG&quot; alt=&quot;[沟通]&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;——分析动画元素的层次（出现顺序）；画出动画时间轴；根据时间轴写出CSS动画时间轴。&lt;br&gt; 分析该页面动画的出现可以分为四个层次：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/3-3.jpg&quot; alt=&quot;[分析]&quot;&gt;&lt;/p&gt;
&lt;p&gt; 根据前面的分析画出动画时间轴：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/3-4.jpg&quot; alt=&quot;[分析]&quot;&gt;&lt;/p&gt;
&lt;p&gt; 根据时间轴写出CSS动画时间轴：&lt;br&gt; &lt;strong&gt;方法一：&lt;/strong&gt;将所有动画元素放在一个时间轴上（适合于元素较少的情况）。&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a0&amp;#123;-webkit-animation: a0 2s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a0&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            30%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1&amp;#123;-webkit-animation: a1 2s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a1&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%,30%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            50%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2&amp;#123;-webkit-animation: a2 2s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%,50%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            75%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3&amp;#123;-webkit-animation: a3 2s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%,75%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            100%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;strong&gt;方法二：&lt;/strong&gt;同一阶段的动画元素放在一个时间轴上。&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a0&amp;#123;-webkit-animation: a0 0.6s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a0&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            100%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a1&amp;#123;-webkit-animation: a1 0.4s 0.6s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a1&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            100%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a2&amp;#123;-webkit-animation: a2 0.5s 1s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a2&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            100%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3&amp;#123;-webkit-animation: a3 0.5s 1.5s forwards;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @-webkit-keyframes a3&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            0%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            100%&amp;#123;……&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;切图&lt;/strong&gt;——PS CC 2015修改组/图层名为“&lt;em&gt;*&lt;/em&gt;.png”，生成图像资源。&lt;br&gt; 使用PS CSS 2015切图具体步骤如下：&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/3-5.png&quot; alt=&quot;[切图]&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定位&lt;/strong&gt;——适当使用绝对定位；适当使用rem。&lt;br&gt; 安利一款sublime插件：&lt;a href=&quot;https://github.com/youing/PxRemTranslate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PX转REM插件&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 从无到有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明度—opacity&lt;/li&gt;
&lt;li&gt;位移—translate&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宽度—width（少用）&lt;/p&gt;
&lt;p&gt;动起来：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2/3D转换—transform&lt;/li&gt;
&lt;li&gt;其他属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt; 润色&lt;/strong&gt;&lt;/p&gt;
 &lt;p style=&quot;color:#bbb&quot;&gt;后文介绍&lt;/p&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TIPS：不要在before,after里加动画！&lt;/p&gt;
&lt;h2 id=&quot;不止于“动”：&quot;&gt;&lt;a href=&quot;#不止于“动”：&quot; class=&quot;headerlink&quot; title=&quot;不止于“动”：&quot;&gt;&lt;/a&gt;不止于“动”：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;惯性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 物体没有停在本应该停止的位置上而是靠惯性&lt;strong&gt;继续摆动一段时间然后反方向摆回来&lt;/strong&gt;。&lt;br&gt; 惯性在日常的动画需求中应用相当普遍，元素的高速进入都涉及惯性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：标题快速从左侧划入屏幕中，标题本应停在屏幕左右居中位置，由于惯性的作用，标题到达居中位置后又向右滑行一小段，再反方向滑回。&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-2.gif&quot; alt=&quot;[惯性]&quot;&gt;&lt;/p&gt;（案例：618 APP返场页H5）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;透视&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 物体与观察者的距离远近在静态时通过&lt;strong&gt;物体的大小&lt;/strong&gt;来体现。&lt;br&gt; 当物体运动时，通过&lt;strong&gt;远近物体不同的运动速度&lt;/strong&gt;来体现，从而形成层次感。&lt;strong&gt;近处的物体运动快，远处的物体运动慢&lt;/strong&gt;。&lt;/p&gt;
 &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-7.jpg&quot; alt=&quot;[透视]&quot;&gt;&lt;/p&gt;
&lt;p&gt; （透视原理图）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;示例：云朵与观察者的距离有远近之分（不可能所有的云都在一个平面上），设置云朵的飘动动画时，可根据云朵的大小（远近）设置不同的运动速度，近处的云朵飘动的速度比远处的快，从而形成透视。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c4&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -webkit-&lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: cloudFloat linear &lt;span class=&quot;number&quot;&gt;6s&lt;/span&gt; infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.cover_clouds&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.c7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -webkit-&lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: cloudFloat linear &lt;span class=&quot;number&quot;&gt;10s&lt;/span&gt; infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-9.gif&quot; alt=&quot;[透视]&quot;&gt;&lt;/p&gt;（案例：iphone6s推广游戏）&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;节奏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 善用&lt;strong&gt;曲线&lt;/strong&gt;和&lt;strong&gt;缓动&lt;/strong&gt;可使效果更生动。&lt;br&gt; &lt;strong&gt;多个元素保持相同节奏&lt;/strong&gt;，保证画面的动画不过分凌乱。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;示例：匀速的呼吸与缓动的呼吸。&lt;/p&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.breath&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    breath &lt;span class=&quot;number&quot;&gt;6s&lt;/span&gt; linear infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.breath&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    breath &lt;span class=&quot;number&quot;&gt;6s&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;cubic-bezier&lt;/span&gt;(.2,.73,.71,.44) infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-11.gif&quot; alt=&quot;[节奏]&quot;&gt;&lt;/p&gt;
&lt;p&gt;  (左图：匀速呼吸效果图；右图：缓动呼吸效果图)&lt;br&gt;跟随动画进行呼吸，可以明显感觉到缓动的呼吸更贴近我们实际的呼吸情况。呼吸函数如下：&lt;/p&gt;
  &lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-12.png&quot; alt=&quot;[节奏]&quot;&gt;&lt;/p&gt;
&lt;p&gt;  （图片来源：&lt;a href=&quot;http://isux.tencent.com/animation-factor.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;让界面动画更自然——ISUX&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;跟随&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 跟随动作是将物体的各部位拆解，通常是&lt;strong&gt;没有骨架&lt;/strong&gt;的部位较容易产生跟随的动作。例如：一个奔跑的人突然停下，他的衣服头发等可能仍会运动。其中，人是“主体”，衣服头发等是“附属物”。&lt;br&gt; 附属物的动作取决于：&lt;strong&gt;主体的动作&lt;/strong&gt;，&lt;strong&gt;附属物本身的重量和质地&lt;/strong&gt;，以及&lt;strong&gt;空气的阻力&lt;/strong&gt;。&lt;br&gt; &lt;strong&gt;主体与附属物之间动作的重叠和追随&lt;/strong&gt;，就是鉴定动作流畅性与自然度好坏的标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例：首页主体人物动作触发后，进行小范围的四向运动以模拟人物身体颤动的效果。人物头饰（花及骨头）与运动主体（人）并非一体，属于附属物。附属物的运动受主体的运动影响出现同向、延时的运动。&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/css3-animation/4-18.gif&quot; alt=&quot;[跟随]&quot;&gt;&lt;/p&gt;（案例：拍拍七夕活动页—七叻个夕）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不用left/right/width/height/margin-top等&lt;/li&gt;
&lt;li&gt;少用color/background等&lt;/li&gt;
&lt;li&gt;使用translate/opacity&lt;/li&gt;
&lt;li&gt;适当开启GPU加速&lt;/li&gt;
&lt;li&gt;适当使用will-change&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itechzero.com/css3-transition-property-transition-effect-explain.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3 transition 属性过渡效果 详解,Techzero ,2014-04-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/aaronjs/p/4642015.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解CSS3 Animation 帧动画,Aaron,2015-07-13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tuicool.com/articles/neqMVr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3 timing-function: steps() 详解,那个傻瓜瓜,2014-12-30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zuojj.com/archives/1292.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主流动画实现方式总结,Benjamin,2015-01-25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cssanimation.rocks/principles/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animation Principles for the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/12_basic_principles_of_animation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12 basic principles of animation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求中常见的css3动画&quot;&gt;&lt;a href=&quot;#需求中常见的css3动画&quot; class=&quot;headerlink&quot; title=&quot;需求中常见的css3动画&quot;&gt;&lt;/a&gt;需求中常见的css3动画&lt;/h2&gt;&lt;p&gt;需求中常见的css3动画一般有&lt;strong&gt;补间动画（又叫
    
    </summary>
    
    
      <category term="CSS3" scheme="http://aotu.io/tags/CSS3/"/>
    
      <category term="animation" scheme="http://aotu.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>使用ThreeJS在浏览器中展示全景图</title>
    <link href="http://aotu.io/notes/2016/01/02/3D-panorama/"/>
    <id>http://aotu.io/notes/2016/01/02/3D-panorama/</id>
    <published>2016-01-01T23:06:45.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;在浏览器中实现全景浏览, 听起来是很玄的事情. 但如果你清楚它的原理, 这事就简单多了.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的一段时间, 朋友圈中出现了一批使用全景图浏览技术的H5页面. 比如探班吴亦凡系列, 或者是探访京东总部大楼找优惠券页面. 在当时, 这几个页面取得了不错的宣传效果. 那么, 这种新奇的全景效果到底是怎样实现的呢?&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;现在的智能手机一般都自带全景图拍摄功能. 就算没有, 通过安装一些第三方软件也可以拥有这个功能, 但通过这些软件拍出来的只是一个非常宽的照片, 还无法达到360随意转动观看的效果. 要制作像上面那样的360全景观看页面, 我们需要从最基础的开始. 首先, 什么是全景图?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;360度全景图也称为三维全景图、全景环视图。360度全景技术是一种运用数码相机对现有场景进行多角度环视拍摄之后，再利用计算机进行后期缝合，并加载播放程序来完成的一种三维虚拟展示技术。 – &lt;a href=&quot;http://baike.baidu.com/link?url=qsNK14ZSsECIkmQN6asaJDDNmCjS2cYwqldh_I4GRzuqb5CH7lrZ9ic34mQuJE7WtaiWaz7OXxwXQDZQ0kqNHK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;360度全景图_百度百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说, 我们可以使用拍到的全景图, &lt;strong&gt;使用计算机进行后期缝合&lt;/strong&gt;, 并加载播放程序来完成三维显示. 具体到使用ThreeJS实现全景图这个场景, 我们需要做什么呢?&lt;/p&gt;
&lt;p&gt;其实, 粗略一想也可以想到, 如果我们将拍摄到的全景图贴在一个圆柱的侧面上, 我们站在圆柱中心朝四周看的话, 应该就有全景观察的效果. 不过这样做也有坏处, 也就是我们的头顶跟脚底都是无法看到的区域. 我们需要使用其他的方式来实现. 在这之前, 我们需要了解一下ThreeJS中的相机.&lt;/p&gt;
&lt;h2 id=&quot;ThreeJS世界中的相机&quot;&gt;&lt;a href=&quot;#ThreeJS世界中的相机&quot; class=&quot;headerlink&quot; title=&quot;ThreeJS世界中的相机&quot;&gt;&lt;/a&gt;ThreeJS世界中的相机&lt;/h2&gt;&lt;p&gt;在ThreeJS中, 相机还分为CubeCamera(立方体相机), PerspectiveCamera(透视相机)以及OrthographicCamera(正交相机). 其中, CubeCamera是创建动态贴图用的, OrthographicCamera创建的照相机不具有透视效果. 在这里, 我们用到的是PerspectiveCamera.&lt;/p&gt;
&lt;p&gt;定义一个透视相机只需要一句话:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; camera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.PerspectiveCamera(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fov,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    aspect,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    near,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    far&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/camera.png&quot; alt=&quot;camera示意图&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这一段代码中, fov代表相机的视角, 即视野上平面与下平面的角度, aspect是相机的宽高比, near是视野近平面的距离, far是远平面的距离.&lt;br&gt;然而, 在3D的世界中, 仅凭上面这几个参数, 我们只能确定一个照相机的自身基本属性, 却无法确定这台照相机究竟位于什么位置, 是什么样的角度. ThreeJS中, camera.position属性是一个三维向量, 我们可以用这个属性定义相机相对于原点的位置. camera.lookAt(Vector3)函数可以定义照相机的观察方向, 参数同样是一个三维向量. 对于照相机而言, 还有一个参数显得非常重要, 这就是相机的上方向. 同样的空间位置, 朝向同一个方向, 照相机还可以是横着, 也可以竖着, 最后看到的效果也不会一样. 所以camera还有一个up属性, 定义照相机的上方向. 如上图蓝色空心箭头所示.&lt;/p&gt;
&lt;h2 id=&quot;动手做全景展示1&quot;&gt;&lt;a href=&quot;#动手做全景展示1&quot; class=&quot;headerlink&quot; title=&quot;动手做全景展示1&quot;&gt;&lt;/a&gt;动手做全景展示1&lt;/h2&gt;&lt;p&gt;要让人产生全景的视觉效果, 很关键的一点是, 要让人看见他当前姿态所应当看见的景观. 如果将人眼比作一台照相机, 我们很容易想到, 我们如果将全景图贴在一个球形的内表面, 那么人眼这台照相机所看到的景象就是上下左右360无死角的全景.&lt;/p&gt;
&lt;p&gt;想想总是美如画的. 我们不妨实践一下. 首先, 去google搜索关键字’全景图 360’, 随意下载一个全景图. 接下来, 我们需要将这个全景图贴到球形的表面. 这一步, 我们再一次用到了Blender.&lt;/p&gt;
&lt;p&gt;首先, 新建一个工程, 然后往场景中添加一个经纬球.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/ball.png&quot; alt=&quot;经纬球&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我们希望使用之前下载到的全景图作为这个球体的贴图. 所以, 我们需要首先对这个球体做uv展开. 对这个球使用球面投射, 方向选择对齐到物体, 选上缩放至边界框, 接着我们看到UV展开图是这样的:&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/uv_1.png&quot; alt=&quot;UV展开图1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这个UV展开图非常不规则, 就算有了全景图, 我们也没法往上贴. 这是因为上下两个顶点处汇集了所有的经线, 使得Blender也无法准确得知我们想要怎样的贴图. 这种时候, 我们需要将球体的南北两个极点删除. 这样的话, 球体的上下两个顶点就成为了两个空心的圆圈. 然而, 模型空了两个洞不太好. 接下来, 使用Extude工具推挤出新的纬圈, 酌情缩小一些.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/delete_top.png&quot; alt=&quot;删除了极点&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;重新进行UV展开, 会看到这次的UV展开非常平整.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/uv_2.png&quot; alt=&quot;UV展开图2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;将新的纬圈设定scale为0, 再删除重叠的节点, 南北极就可以重新汇聚到一个点了. 接下来我们把全景图贴上, 一个全景球就这样诞生了.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/panoball.png&quot; alt=&quot;全景球&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我们将这个全景球通过io_three插件导出为json. 新建一个页面, 引入three.js. 核心代码大概是这样子:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;objloader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.ObjectLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objloader.load(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;js/360.json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		scene = obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//scene.add(new THREE.AmbientLight(0xffffff));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//material = scene.children[0].material;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//material.side = THREE.BackSide;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//material.emissive = 0x000000;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		animate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要注意, 如果将注释部分的代码删去, 我们将会发现视野中一片黑. 这是因为Blender导出的模型默认使用的是遵守Phong光照模型的材质, 这种材质在没有配置自发光, 又没有外界光照的情况下就是一坨黑色. 所以我们还需要手动配置一下. blender导出的json是scene本身. scene是一个树状的结构, 在它的children属性中有所有的对象信息. 在这里, 我们需要配置一下贴图的方向以及自发光, 接下来就可以看到效果了.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/rendered1.png&quot; alt=&quot;效果1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;动手做全景展示2&quot;&gt;&lt;a href=&quot;#动手做全景展示2&quot; class=&quot;headerlink&quot; title=&quot;动手做全景展示2&quot;&gt;&lt;/a&gt;动手做全景展示2&lt;/h2&gt;&lt;p&gt;上面这样的实现其实也有一个弊端. 球状模型的顶点与面的数量十分逆天. 这些元素的数量越多, 耗费的浏览器资源就会越多. 那么有没有更加节能环保的方法呢?&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/problem.png&quot; alt=&quot;问题&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;答案是肯定的. 既然我们的人眼可以被类比为照相机, 那么如果摆多几台照相机, 将拍到的照片无重叠地拼在一起, 一样可以获得全景视觉.&lt;/p&gt;
&lt;p&gt;这里, 我们使用6台90度视角, 纵宽比1的照相机, 从球体中心分别朝向立方体六个面的方向.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/6camera.png&quot; alt=&quot;6个照相机&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;将6个渲染图分别保存下来.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/pictures.png&quot; alt=&quot;6个渲染图&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;接下来新建页面, 将这六张图片分别贴到立方体的六个面就大功告成了. 核心代码:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;loader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.TextureLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    虽然使用THREE.ImageUtils.loadTexture也没问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    不过估计是为了适应Javascript的异步式编程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ThreeJS也逐步将一些会阻塞的api转换为异步回调的模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    原有的老api会被标记为deprecated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gardenMaterials = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/px.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/nx.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/py.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/ny.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/pz.png&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;garden/nz.png&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.all(gardenMaterials.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;val&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//加载图片, 新建材质, 传给下一个步骤.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loader.load(val, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;texture&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resolve(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.MeshBasicMaterial(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                map: texture,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                side: THREE.BackSide&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;materials&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将材质贴到正方体的6个面.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    geometry = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.BoxGeometry(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cube = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Mesh(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        geometry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.MeshFaceMaterial(materials)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scene.add(cube);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;渲染出来的效果, 其实是完全一样的.&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/rendered2.png&quot; alt=&quot;效果2&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;使用这两种方法做出来的全景展示其实还会有一些小问题, 比如展示空间的底部与顶部会有聚焦在一点的现象:&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/2016-01-01/point.png&quot; alt=&quot;顶部与底部&quot;&gt;&lt;/p&gt;&lt;br&gt;这种情况单靠一个全景图是无法解决的, 只能通过对底部与顶部多拍一个照片来补救. 目前, 全景展示的技术已经有许多应用, 比如谷歌地图百度地图的街景展示, 或者是上面提到的几个H5页面中也有用到. 作为一名前端工程师, 懂得其中的原理并付诸实践, 这是非常重要的.&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在浏览器中实现全景浏览, 听起来是很玄的事情. 但如果你清楚它的原理, 这事就简单多了.&lt;br&gt;
    
    </summary>
    
    
      <category term="three.js" scheme="http://aotu.io/tags/three-js/"/>
    
      <category term="panorama" scheme="http://aotu.io/tags/panorama/"/>
    
  </entry>
  
  <entry>
    <title>初识Adobe After Effects效果制作</title>
    <link href="http://aotu.io/notes/2015/12/29/ae/"/>
    <id>http://aotu.io/notes/2015/12/29/ae/</id>
    <published>2015-12-28T22:05:18.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;Adobe After Effects简称“AE”是Adobe公司推出的一款图形视频处理软件，用于高端视频特效系统的专业特效合成。随着h5页面动效的越来越复杂以及h5效果视频化趋势，AE这款软件也渐渐成为了我们制作绚丽动效的必备神器。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;那我们通过尝试制做简单手机天气动效，来了解AE的特效吧&quot;&gt;&lt;a href=&quot;#那我们通过尝试制做简单手机天气动效，来了解AE的特效吧&quot; class=&quot;headerlink&quot; title=&quot;那我们通过尝试制做简单手机天气动效，来了解AE的特效吧&quot;&gt;&lt;/a&gt;那我们通过尝试制做简单手机天气动效，来了解AE的特效吧&lt;/h3&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/weather.gif&quot;&gt;&lt;/p&gt;    
&lt;h3 id=&quot;制作程序流程&quot;&gt;&lt;a href=&quot;#制作程序流程&quot; class=&quot;headerlink&quot; title=&quot;制作程序流程&quot;&gt;&lt;/a&gt;制作程序流程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.工具：&lt;code&gt;After Effects&lt;/code&gt; 、&lt;code&gt;Photoshop&lt;/code&gt;&lt;br&gt;2.设计流程：&lt;code&gt;After Effects&lt;/code&gt; 在一个合成中创建转场效果，另外一个合成中创建展示效果，导出到PS。&lt;br&gt;3.进行帧处理，优化导出&lt;code&gt;GIF&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;接下来，我们开始一步一步开始吧&quot;&gt;&lt;a href=&quot;#接下来，我们开始一步一步开始吧&quot; class=&quot;headerlink&quot; title=&quot;接下来，我们开始一步一步开始吧&quot;&gt;&lt;/a&gt;接下来，我们开始一步一步开始吧&lt;/h3&gt;&lt;h3 id=&quot;素材&quot;&gt;&lt;a href=&quot;#素材&quot; class=&quot;headerlink&quot; title=&quot;素材&quot;&gt;&lt;/a&gt;素材&lt;/h3&gt;&lt;h4 id=&quot;1-伦敦背景图&quot;&gt;&lt;a href=&quot;#1-伦敦背景图&quot; class=&quot;headerlink&quot; title=&quot;1.伦敦背景图&quot;&gt;&lt;/a&gt;1.伦敦背景图&lt;/h4&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/background.jpg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-手机透视效果模板&quot;&gt;&lt;a href=&quot;#2-手机透视效果模板&quot; class=&quot;headerlink&quot; title=&quot;2.手机透视效果模板&quot;&gt;&lt;/a&gt;2.手机透视效果模板&lt;/h4&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/iphone.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本构建&quot;&gt;&lt;a href=&quot;#基本构建&quot; class=&quot;headerlink&quot; title=&quot;基本构建&quot;&gt;&lt;/a&gt;基本构建&lt;/h3&gt;&lt;h4 id=&quot;创建背景转场效果合成&quot;&gt;&lt;a href=&quot;#创建背景转场效果合成&quot; class=&quot;headerlink&quot; title=&quot;创建背景转场效果合成&quot;&gt;&lt;/a&gt;创建背景转场效果合成&lt;/h4&gt;&lt;h4 id=&quot;步骤1&quot;&gt;&lt;a href=&quot;#步骤1&quot; class=&quot;headerlink&quot; title=&quot;步骤1&quot;&gt;&lt;/a&gt;步骤1&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;打开AE，合成&amp;gt;新建合成(Cmd+N)，尺寸为&lt;code&gt;518*715&lt;/code&gt;，帧数&lt;code&gt;29&lt;/code&gt;，持续&lt;code&gt;6s&lt;/code&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/1.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤2&quot;&gt;&lt;a href=&quot;#步骤2&quot; class=&quot;headerlink&quot; title=&quot;步骤2&quot;&gt;&lt;/a&gt;步骤2&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;导入伦敦背景图像，将图像丢入合成1，调整背景图像尺寸，使其适合画布&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/2.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤3&quot;&gt;&lt;a href=&quot;#步骤3&quot; class=&quot;headerlink&quot; title=&quot;步骤3&quot;&gt;&lt;/a&gt;步骤3&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;创建3个蓝色框(用形状图层)，这些蓝色框将从屏幕上方下落到屏幕底部，宽度&lt;code&gt;172&lt;/code&gt;、&lt;code&gt;174&lt;/code&gt;、&lt;code&gt;172px&lt;/code&gt;(在AE中，尺寸特别不好确定，我们可以COM+R打开标尺去匹配)，色值&lt;code&gt;#063857&lt;/code&gt;、&lt;code&gt;#145071&lt;/code&gt;、&lt;code&gt;#416C8D&lt;/code&gt;。三个方框上方的方框宽度640px,输入相应文本。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/3.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤4&quot;&gt;&lt;a href=&quot;#步骤4&quot; class=&quot;headerlink&quot; title=&quot;步骤4&quot;&gt;&lt;/a&gt;步骤4&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用钢笔勾勒出简单云朵和6片雪花空心圆(或者去找素材,这里的云朵，就是找的png图片)&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/4.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建手机展示效果合成&quot;&gt;&lt;a href=&quot;#创建手机展示效果合成&quot; class=&quot;headerlink&quot; title=&quot;创建手机展示效果合成&quot;&gt;&lt;/a&gt;创建手机展示效果合成&lt;/h4&gt;&lt;h4 id=&quot;步骤1-1&quot;&gt;&lt;a href=&quot;#步骤1-1&quot; class=&quot;headerlink&quot; title=&quot;步骤1&quot;&gt;&lt;/a&gt;步骤1&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;创建合成2，尺寸&lt;code&gt;1280 x 720&lt;/code&gt;帧数&lt;code&gt;29&lt;/code&gt;，时间&lt;code&gt;6s&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤2-1&quot;&gt;&lt;a href=&quot;#步骤2-1&quot; class=&quot;headerlink&quot; title=&quot;步骤2&quot;&gt;&lt;/a&gt;步骤2&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;导入iPhone背景,调整尺寸，增加背景层扩展。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/5.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;步骤3-1&quot;&gt;&lt;a href=&quot;#步骤3-1&quot; class=&quot;headerlink&quot; title=&quot;步骤3&quot;&gt;&lt;/a&gt;步骤3&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;把合成1拖到合成2里面,选中合成1，在效果面板，选择效果&amp;gt;扭曲&amp;gt;边角定位，让合成1的4个角对上模板中屏幕的4个角，变成如下形式。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/6.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;p&gt;以上基本的合成构建都已经做完了，那接下来，我们开始实现动效&lt;/p&gt;
&lt;h3 id=&quot;动效制作&quot;&gt;&lt;a href=&quot;#动效制作&quot; class=&quot;headerlink&quot; title=&quot;动效制作&quot;&gt;&lt;/a&gt;动效制作&lt;/h3&gt;&lt;h4 id=&quot;动效制作预想&quot;&gt;&lt;a href=&quot;#动效制作预想&quot; class=&quot;headerlink&quot; title=&quot;动效制作预想&quot;&gt;&lt;/a&gt;动效制作预想&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;3个蓝色方框变长，不同时的落下，然后回弹缩小。&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;透明框从底部往上移动，自始至终宽度不变。&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;4个框抵达目的地后，文字开始出现，蓝色框文字是比例扩大+从不透明变透明，透明框中得文字是从不透明变透明。&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;云朵图标，同时伴随雪花。&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;Snowy文字出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;动效实现&quot;&gt;&lt;a href=&quot;#动效实现&quot; class=&quot;headerlink&quot; title=&quot;动效实现&quot;&gt;&lt;/a&gt;动效实现&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在实现动效之前，我们先说说，AE里面如何实现动效，两种方案，一种是效果菜单下的效果动效，另一种就是AE对图层的变换处理包含：锚点、位置、缩放、旋转、不透明度，通过改变激活这几个按钮，改变图层的参数形成关键帧，从而形成动画。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/7.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;三个蓝色框特效&quot;&gt;&lt;a href=&quot;#三个蓝色框特效&quot; class=&quot;headerlink&quot; title=&quot;三个蓝色框特效&quot;&gt;&lt;/a&gt;三个蓝色框特效&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;打开背景合成，选中三个色块&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/8.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;备注&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.这里应用了位置和缩放，来实现动效。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.位置上，三个蓝色的框，通过缩放&lt;code&gt;scale 0-100%&lt;/code&gt;，从上到下，不同延迟。    &lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;透明框&quot;&gt;&lt;a href=&quot;#透明框&quot; class=&quot;headerlink&quot; title=&quot;透明框&quot;&gt;&lt;/a&gt;透明框&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;透明框的运动，从下到上缓慢的位移。&lt;/p&gt;
&lt;h4 id=&quot;底部文字&quot;&gt;&lt;a href=&quot;#底部文字&quot; class=&quot;headerlink&quot; title=&quot;底部文字&quot;&gt;&lt;/a&gt;底部文字&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.三个蓝色框，当蓝色框触及到底部时，文字快速弹出，不透明度从&lt;code&gt;0&lt;/code&gt;-&amp;gt;&lt;code&gt;100%&lt;/code&gt;,比例从&lt;code&gt;0&lt;/code&gt;-&amp;gt;&lt;code&gt;100%&lt;/code&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.透明框中的文字随透明框一起运动(位置设置可以参考透明框)，但是，左侧的文字先到，右侧的-4度后到，注意时间轴中得设置。&lt;/p&gt;
&lt;h4 id=&quot;云朵&quot;&gt;&lt;a href=&quot;#云朵&quot; class=&quot;headerlink&quot; title=&quot;云朵&quot;&gt;&lt;/a&gt;云朵&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;透明框的文本开始出现时，云朵出现，先是透明度从0-100%；而比例开始时是60%，当透明度到了&lt;code&gt;100%&lt;/code&gt;时，从&lt;code&gt;60%&lt;/code&gt;-&amp;gt;&lt;code&gt;100%&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;雪花小圆点&quot;&gt;&lt;a href=&quot;#雪花小圆点&quot; class=&quot;headerlink&quot; title=&quot;雪花小圆点&quot;&gt;&lt;/a&gt;雪花小圆点&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当云朵动效完成后，雪花小圆点开始逐个出现。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.注意小圆点会错落的向右移动，然后弹回，注意运动顺序的调节&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.注意小圆点逐个出现，因此透明度的变化要在时间轴上依次设置。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/9.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;Snowy文字效果&quot;&gt;&lt;a href=&quot;#Snowy文字效果&quot; class=&quot;headerlink&quot; title=&quot;Snowy文字效果&quot;&gt;&lt;/a&gt;Snowy文字效果&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里运用了蒙版运动，来打造Snowy文本逐渐出现的效果，注意Snowy不透明度也要变化(蒙版，通过图层点击右键添加蒙层，然后在蒙层中选择alpha蒙层)&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/10.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;切换到合成手机导出效果&quot;&gt;&lt;a href=&quot;#切换到合成手机导出效果&quot; class=&quot;headerlink&quot; title=&quot;切换到合成手机导出效果&quot;&gt;&lt;/a&gt;切换到合成手机导出效果&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AE文件可以导出多种形式文件，主菜单合成渲染（主要合成导出序列帧相关）和导出菜单（文件－&amp;gt;创建－&amp;gt;创建代理）就可以设置需要的格式，常见的格式有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3GP&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MP4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MP3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MOV&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GIF&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SWF&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PNG序列帧图片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里呢，我做完动效后，是导出&lt;code&gt;.mov&lt;/code&gt;文件，然后把&lt;code&gt;.mov&lt;/code&gt;文件导入到&lt;code&gt;ps&lt;/code&gt;，&lt;code&gt;COM+OPTION+SHIFT+S&lt;/code&gt;导出&lt;code&gt;gif&lt;/code&gt;文件，效果如下（记得要选择循环播放额，不然只会播放一次）。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/11.jpg&quot;&gt;&lt;/p&gt;    &lt;p&gt;&lt;/p&gt;
&lt;p&gt;到此，这个小例子我们就实现了，效果就是初始的&lt;code&gt;GIF&lt;/code&gt;效果图，源文件&lt;code&gt;下载&lt;/code&gt; &lt;a href=&quot;http://doc.pfan123.com/public/weather.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;weather&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，对比一下H5中&lt;code&gt;AE&lt;/code&gt;视频动画、&lt;code&gt;GIF&lt;/code&gt;动画、&lt;code&gt;Canvas&lt;/code&gt;动画之间的差异&lt;/p&gt;
&lt;h2 id=&quot;三者对比&quot;&gt;&lt;a href=&quot;#三者对比&quot; class=&quot;headerlink&quot; title=&quot;三者对比&quot;&gt;&lt;/a&gt;三者对比&lt;/h2&gt;&lt;p&gt;这里将本例，分别用了3种形式做&lt;code&gt;H5&lt;/code&gt;动画，&lt;a href=&quot;http://jdc.jd.com/fd/promote/201512/ae/video.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;AE&lt;/code&gt;动画效果&lt;/a&gt;（AE效果可能要注意一下，由于没有找到比较好的视频压缩工具，初始动画有点卡，循环播放是很流畅的）、&lt;a href=&quot;http://jdc.jd.com/fd/promote/201512/ae/canvas.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Canvas&lt;/code&gt;动画效果&lt;/a&gt;、&lt;a href=&quot;http://jdc.jd.com/fd/promote/201512/ae/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;GIF&lt;/code&gt;动画效果&lt;/a&gt;，看看三者之间的差异，二维码如下：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/ae/12.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h5 id=&quot;备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待&quot;&gt;&lt;a href=&quot;#备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待&quot; class=&quot;headerlink&quot; title=&quot;备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待&quot;&gt;&lt;/a&gt;备注：请在wifi的环境下体验，由于动画帧数比较多173帧，体验可能比较慢，请耐心等待&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;AE动画效果&lt;/code&gt;，动效整体还原度比较好，支持流媒体加载，但是&lt;code&gt;Android&lt;/code&gt;与&lt;code&gt;IOS&lt;/code&gt;展现形式不一样；&lt;code&gt;IOS&lt;/code&gt;支持格式比&lt;code&gt;Android&lt;/code&gt;多，如&lt;code&gt;.mov格式&lt;/code&gt;；&lt;code&gt;IOS&lt;/code&gt;可以隐藏播放器控制条，&lt;code&gt;Android&lt;/code&gt;无法解决；初始效果与文件大小影响比较大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Canvas动画效果&lt;/code&gt;，动画还原度无法达到&lt;code&gt;GIF&lt;/code&gt;、&lt;code&gt;AE&lt;/code&gt;的效果，复合动画帧比较多，图片比较大，对做雪碧图影响较大，做出的动画会出现闪烁低端&lt;code&gt;Android&lt;/code&gt;出现明显卡顿。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;GIF动画效果&lt;/code&gt;，帧比较多，在部分低端&lt;code&gt;Android&lt;/code&gt;表现卡顿，&lt;code&gt;GIF&lt;/code&gt;格式图片，无法很好压缩。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AE制做动画特效的神器，还有很多很多好玩的特效等待我们去学习思考，以及结合到平时的工作中。在移动端h5开发中，经常会遇到比较复杂的交互特效帧比较多，可能很多时候大家会选择&lt;code&gt;GIF&lt;/code&gt;，帧动画，&lt;code&gt;Canvas&lt;/code&gt;动画来实现效果，可是往往做出来的动画展示效果，无法达到预想的效果，或多或少的导致设备卡顿，加载过慢等现象。在我们了解了这些之后，可以通过&lt;code&gt;AE&lt;/code&gt;换一种尝试，做更有趣的动画效果。&lt;/p&gt;
&lt;h4 id=&quot;学习资料：&quot;&gt;&lt;a href=&quot;#学习资料：&quot; class=&quot;headerlink&quot; title=&quot;学习资料：&quot;&gt;&lt;/a&gt;学习资料：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.videocopilot.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;videocopilot&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.newcger.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;newcger&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Adobe After Effects简称“AE”是Adobe公司推出的一款图形视频处理软件，用于高端视频特效系统的专业特效合成。随着h5页面动效的越来越复杂以及h5效果视频化趋势，AE这款软件也渐渐成为了我们制作绚丽动效的必备神器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Adobe After Effects" scheme="http://aotu.io/tags/Adobe-After-Effects/"/>
    
      <category term="AE" scheme="http://aotu.io/tags/AE/"/>
    
      <category term="AE movie" scheme="http://aotu.io/tags/AE-movie/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用Node.js创建命令行脚本工具</title>
    <link href="http://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/"/>
    <id>http://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/</id>
    <published>2015-12-23T13:19:07.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文译自 &lt;a href=&quot;https://developer.atlassian.com/blog/2015/11/scripting-with-node/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building command line tools with Node.js&lt;/a&gt;，介绍了如何通过Node.js来创建命令行脚本工具，介绍了很多实用的&lt;code&gt;npm&lt;/code&gt;包等。翻译水平有限，敬请指正~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在我的职业生涯中已经写过了上百个 &lt;code&gt;Bash&lt;/code&gt; 脚本，但我的 &lt;code&gt;Bash&lt;/code&gt; 依然写得很糟糕，每一次我都不得不去查一些简单逻辑结构的语法。如果我想通过 &lt;code&gt;curl&lt;/code&gt; 或者 &lt;code&gt;sed&lt;/code&gt; 来做一些事情，我也必须去查找 &lt;code&gt;man&lt;/code&gt; 文档。&lt;/p&gt;
&lt;p&gt;然后，有一天，我看到六个字母的语言[译者注：这里指NodeJS] — 一门在过去十年里我几乎 &lt;em&gt;每一天&lt;/em&gt; 都在使用的语言，这才让我幡然醒悟。结果是你可以使用 &lt;code&gt;JavaScript&lt;/code&gt; 来写脚本！&lt;/p&gt;
&lt;p&gt;在这篇教程中，我将会在使用 &lt;code&gt;Node.js&lt;/code&gt; 和 &lt;code&gt;npm&lt;/code&gt; 创建一个脚本或者命令行工具方面给你一些我的想法。特别地我们将会包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;npm&lt;/code&gt; 封装一个新的 &lt;code&gt;shell&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;解析命令行参数&lt;/li&gt;
&lt;li&gt;从输入流中读取文本和密码&lt;/li&gt;
&lt;li&gt;发送 snippet&lt;/li&gt;
&lt;li&gt;输出错误与代码&lt;/li&gt;
&lt;li&gt;终端输出彩色化&lt;/li&gt;
&lt;li&gt;渲染 &lt;code&gt;ACSII&lt;/code&gt; 进度条&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我热衷于已经可以工作的例子，所以为了解释这些概念我们将会创建一个新的 &lt;code&gt;shell&lt;/code&gt; 命令，它的名字为 &lt;code&gt;snippet&lt;/code&gt; ，可以在我们本地磁盘的文件创建一个 &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/snippets-719095082.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket Snippet&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这是我们的最终目标成果：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;snippet用法&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/snippet-usage.gif&quot; alt=&quot;snippet用法&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;封装-shell-命令&quot;&gt;&lt;a href=&quot;#封装-shell-命令&quot; class=&quot;headerlink&quot; title=&quot;封装 shell 命令&quot;&gt;&lt;/a&gt;封装 shell 命令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; 不单单用来管理你的应用和网页的依赖，你还能用它来封装和分发新的 &lt;code&gt;shell&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;第一步就是通过 &lt;code&gt;npm init&lt;/code&gt; [译者注：可以通过 &lt;code&gt;npm init -f&lt;/code&gt;直接快速生成一个&lt;code&gt;package.json&lt;/code&gt;]来创建一个新的 &lt;code&gt;npm&lt;/code&gt; 项目：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: bitbucket-snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version: 0.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description: A &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;-line tool &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; creating Bitbucket snippets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;entry point: index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;license: Apache-2.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会在我们的项目中创建一个新的 &lt;code&gt;package.json&lt;/code&gt; 文件，那时我们将需要创建一个 &lt;code&gt;JS&lt;/code&gt; 文件包含我们的脚本。让我们根据Node.js的传统命名为 &lt;code&gt;index.js&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello, world!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意我们必须加一些 &lt;code&gt;东西&lt;/code&gt; 来告诉我们的 &lt;code&gt;shell&lt;/code&gt; 如何处理我们的脚本。&lt;/p&gt;
&lt;p&gt;接下来我们需要在我们 &lt;code&gt;package.json&lt;/code&gt; 里面的最顶级增加 &lt;code&gt;bin&lt;/code&gt; 部分。设置的属性（在我们的例子中是 &lt;code&gt;snippet&lt;/code&gt;）将会变成用户在他们的终端处理脚本使用的命令，属性值就是相对于 &lt;code&gt;package.json&lt;/code&gt; 的脚本位置。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;author&quot;: &quot;Tim Pettersen&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;license&quot;: &quot;Apache-2.0&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;bin&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;snippet&quot;: &quot;./index.js&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们已经有一个可以工作的 &lt;code&gt;shell&lt;/code&gt; 命令了！让我们安装它并且测试结果。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, world!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;真整洁！ &lt;code&gt;npm install -g&lt;/code&gt; 实际上是将我们脚本链接到 &lt;code&gt;path&lt;/code&gt; 变量的位置，所以我们能够在任何地方使用它。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ readlink /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../lib/node_modules/bitbucket-snippet/index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在开发环境中我们实际上使用 &lt;code&gt;npm link&lt;/code&gt; 便利地将我们的 &lt;code&gt;index.js&lt;/code&gt; 软链接到 &lt;code&gt;path&lt;/code&gt; 变量的位置。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/snippet -&amp;gt; /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lib/node_modules/bitbucket-snippet/index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lib/node_modules/bitbucket-snippet -&amp;gt; /Users/kannonboy/src/bitbucket-snippet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当我们开发完成的时候，我们可以通过 &lt;code&gt;npm publish&lt;/code&gt; 将我们的脚本发布到公共 &lt;code&gt;npm&lt;/code&gt; 仓库，然后任何人都可以下载安装到他们的机器上：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g bitbucket-snippet&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是让我们先让我们的脚本能够工作先！&lt;/p&gt;
&lt;h2 id=&quot;解析命令行参数&quot;&gt;&lt;a href=&quot;#解析命令行参数&quot; class=&quot;headerlink&quot; title=&quot;解析命令行参数&quot;&gt;&lt;/a&gt;解析命令行参数&lt;/h2&gt;&lt;p&gt;我们的脚本现在需要一些用户的输入：他们的Bitbucket名字，他们的密码，还有作为 &lt;code&gt;snippet&lt;/code&gt;上传的文件位置。典型的方法就是通过命令的参数传输这些值。&lt;/p&gt;
&lt;p&gt;你可以通过 &lt;code&gt;process.argv&lt;/code&gt; 拿到序列化的参数，但有很多 &lt;code&gt;npm&lt;/code&gt; 包在解析参数还有选项方面提供了很好的抽象给你。我最喜欢的就是 &lt;a href=&quot;https://www.npmjs.com/package/commander&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commander&lt;/a&gt;，来自 &lt;code&gt;Ruby gem&lt;/code&gt;同一个名字的灵感。&lt;/p&gt;
&lt;p&gt;一个简单的命令安装它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save commander&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面命令将会把最新版的 &lt;code&gt;commander&lt;/code&gt; 加入 &lt;code&gt;package.json&lt;/code&gt;。我们这时可以通过简单声明式的方式定义我们的选项：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello, world!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; program = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;commander&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  .arguments(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;file&amp;gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  .option(&lt;span class=&quot;string&quot;&gt;&#39;-u, --username &amp;lt;username&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;The user to authenticate as&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  .option(&lt;span class=&quot;string&quot;&gt;&#39;-p, --password &amp;lt;password&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;The user\&#39;s password&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  .action(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;user: %s pass: %s file: %s&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+        program.username, program.password, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+  .parse(process.argv);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码可读性很强。事实上，这是一个保守的说法。相对于那些我们需要通过 &lt;code&gt;switch&lt;/code&gt; 来控制的像 &lt;code&gt;Bash&lt;/code&gt;，这是一个艺术品。至少，我写的 &lt;code&gt;Bash&lt;/code&gt; 是这样子的。&lt;/p&gt;
&lt;p&gt;让我们快速测试：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ snippet -u kannonboy -p correcthorsebatterystaple file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user: kannonboy pass: correcthorsebatterystaple file: file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很棒！&lt;code&gt;commander&lt;/code&gt; 还提供一些简单的帮助输出给我们，基于我们上面提供的配置。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ snippet --help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Usage: snippet [options] &amp;lt;file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -h, --help                 output usage information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -u, --username &amp;lt;username&amp;gt;  The user to authenticate as&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p, --password &amp;lt;password&amp;gt;  The user&lt;span class=&quot;string&quot;&gt;&#39;s password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我们已经拿到了参数了。但是，让用户在空白的地方输入他们的密码作为选项有一点难用。让我们解决它。&lt;/p&gt;
&lt;h2 id=&quot;从输入流中读取文本和密码&quot;&gt;&lt;a href=&quot;#从输入流中读取文本和密码&quot; class=&quot;headerlink&quot; title=&quot;从输入流中读取文本和密码&quot;&gt;&lt;/a&gt;从输入流中读取文本和密码&lt;/h2&gt;&lt;p&gt;另一种通用的取回用户的内容的脚本方式是从标准输入流中读。这可以通过 &lt;code&gt;process.stdin&lt;/code&gt; 实现，但是再说一次，已经有很多 &lt;code&gt;npm&lt;/code&gt; 包提供了非常好的 API 给我们使用。很多都是基于 &lt;code&gt;callback&lt;/code&gt; 或者 &lt;code&gt;promises&lt;/code&gt;，但是我们将使用 &lt;a href=&quot;https://www.npmjs.com/package/co-prompt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co-prompt&lt;/a&gt; （基于 &lt;a href=&quot;https://www.npmjs.com/package/co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;co&lt;/a&gt;），因此我们可以利用 ES6 的 &lt;code&gt;yield&lt;/code&gt; 关键词。这让我们写异步的代码而不需要 &lt;code&gt;callbacks&lt;/code&gt; ，看起来更加脚本化。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save co co-prompt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了组合使用 &lt;code&gt;yield&lt;/code&gt; 和 &lt;code&gt;co-prompt&lt;/code&gt; ，我们需要通过一些 &lt;code&gt;co&lt;/code&gt; 的魔法来包裹我们的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; co = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prompt = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co-prompt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; program = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;commander&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .option(&lt;span class=&quot;string&quot;&gt;&#39;-u, --username &amp;lt;username&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;The user to authenticate as&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .option(&lt;span class=&quot;string&quot;&gt;&#39;-p, --password &amp;lt;password&amp;gt;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;The user\&#39;s password&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .action(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+    co(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt(&lt;span class=&quot;string&quot;&gt;&#39;username: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; password = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt.password(&lt;span class=&quot;string&quot;&gt;&#39;password: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;user: %s pass: %s file: %s&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-          program.username, program.password, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+          username, password, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在快速测试一下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ snippet my_awesome_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;username: kannonboy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;password: *************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user: kannonboy pass: correcthorsebatterystaple file: my_awesome_file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很棒！唯一的窍门就是ES6的 &lt;code&gt;yield&lt;/code&gt;，所以这只能在用户运行在 node 4.0.0+上面。但是我们可以通过加入 &lt;code&gt;--harmony&lt;/code&gt; 标志让 0.11.2 版本的也可以正常使用。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- #!&lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;bin/env node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ #!&lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;bin/env node --harmony&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; co = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prompt = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co-prompt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发送-snippet&quot;&gt;&lt;a href=&quot;#发送-snippet&quot; class=&quot;headerlink&quot; title=&quot;发送 snippet&quot;&gt;&lt;/a&gt;发送 snippet&lt;/h2&gt;&lt;p&gt;Bitbucket拥有一套非常漂亮的 &lt;a href=&quot;https://confluence.atlassian.com/display/BITBUCKET/Snippets+endpoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API&lt;/a&gt;。在这个例子中我将关注传输单一的文件，但我们可以发送整个目录，改变我们的入口配置，加一些代码等，如果我们需要的话。我最喜欢的node HTTP 客户端是 &lt;a href=&quot;https://www.npmjs.com/package/superagent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;superagent&lt;/a&gt; ，所以让我们把它加入项目中。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save superagent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在就让我们将从用户收集到的数据发送给服务器。 &lt;code&gt;superagent&lt;/code&gt; 其中一个优点就是在它在处理文件上拥有非常好的API。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;superagent&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; co = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prompt = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co-prompt&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .action(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;file&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    co(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; *(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt(&lt;span class=&quot;string&quot;&gt;&#39;username: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; password = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt.password(&lt;span class=&quot;string&quot;&gt;&#39;password: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;user: %s pass: %s file: %s&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-         file, username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       .post(&lt;span class=&quot;string&quot;&gt;&#39;https://api.bitbucket.org/2.0/snippets/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       .auth(username, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       .attach(&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;, file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       .set(&lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       .end(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = res.body.links.html.href;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+         &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Snippet created: %s&#39;&lt;/span&gt;, link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在让我们测试一下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ snippet my_awesome_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;username: kannonboy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;password: *************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Snippet created: https://bitbucket.org/snippets/kannonboy/yq7r8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的 snippet 已经发送了！\o/&lt;/p&gt;
&lt;h2 id=&quot;输出错误与代码&quot;&gt;&lt;a href=&quot;#输出错误与代码&quot; class=&quot;headerlink&quot; title=&quot;输出错误与代码&quot;&gt;&lt;/a&gt;输出错误与代码&lt;/h2&gt;&lt;p&gt;到现在为止我们已经处理了一切正确的情况，但是如果我们上传失败或者用户输入错误的信息呢？&lt;code&gt;UNIX-y&lt;/code&gt;的方法来处理错误就是将标准的错误信息输出并且以非0的状态码结束程序，所以我们也这样子做。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .post(&lt;span class=&quot;string&quot;&gt;&#39;https://api.bitbucket.org/2.0/snippets/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .auth(username, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .attach(&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;, filename, file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .set(&lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .end(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!err &amp;amp;&amp;amp; res.ok) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = res.body.links.html.href;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Snippet created: %s&#39;&lt;/span&gt;, link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       process.exit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; errorMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res &amp;amp;&amp;amp; res.status === &lt;span class=&quot;number&quot;&gt;401&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       errorMessage = &lt;span class=&quot;string&quot;&gt;&quot;Authentication failed! Bad username/password?&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       errorMessage = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+       errorMessage = res.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(errorMessage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     process.exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样子就可以处理错误了。&lt;/p&gt;
&lt;h2 id=&quot;终端输出彩色化&quot;&gt;&lt;a href=&quot;#终端输出彩色化&quot; class=&quot;headerlink&quot; title=&quot;终端输出彩色化&quot;&gt;&lt;/a&gt;终端输出彩色化&lt;/h2&gt;&lt;p&gt;如果你的用户是在使用体面的 &lt;code&gt;shell&lt;/code&gt; ，这里也有一些包提供给你使用让你方便彩色化的输出。我喜欢 &lt;a href=&quot;https://www.npmjs.com/package/chalk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chalk&lt;/a&gt; ，因为它拥有干净可链式的API以及自动检测用户的 &lt;code&gt;shell&lt;/code&gt; 支持的颜色。这是有益的提示如果你想将你的脚本分享给 windows 用户的话。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save chalk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;chalk&lt;/code&gt; 的命令能够彩色输出同时还能方便跟常规字符串串联起来。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chalk = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;chalk&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;superagent&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; co = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .set(&lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .end(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!err &amp;amp;&amp;amp; res.ok) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = res.body.links.html.href;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Snippet created: %s&#39;&lt;/span&gt;, link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(chalk.bold.cyan(&lt;span class=&quot;string&quot;&gt;&#39;Snippet created: &#39;&lt;/span&gt;) + link);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       process.exit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; errorMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res &amp;amp;&amp;amp; res.status === &lt;span class=&quot;number&quot;&gt;401&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       errorMessage = &lt;span class=&quot;string&quot;&gt;&quot;Authentication failed! Bad username/password?&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       errorMessage = err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       errorMessage = res.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(errorMessage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(chalk.red(errorMessage));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     process.exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们旋转一下（这里我使用了截图，以便你能看到极好的颜色）。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;彩色化输出截图&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/terminal-colors.png&quot; alt=&quot;彩色化输出截图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;渲染-ACSII-进度条&quot;&gt;&lt;a href=&quot;#渲染-ACSII-进度条&quot; class=&quot;headerlink&quot; title=&quot;渲染 ACSII 进度条&quot;&gt;&lt;/a&gt;渲染 &lt;code&gt;ACSII&lt;/code&gt; 进度条&lt;/h2&gt;&lt;p&gt;&lt;code&gt;snippets&lt;/code&gt;的API实际上支持任何类型的文件（最多10MB），但是当文件比较大或者网速特别慢的时候就需要在命令行界面显示上传文件进度了。命令行解决方案就是优雅的 &lt;code&gt;ASCII&lt;/code&gt; 进度条。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/progress&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;progress&lt;/a&gt; 是现在最常用的 &lt;code&gt;npm&lt;/code&gt; 包用来渲染进度条。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save progress&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;progress&lt;/code&gt;的API非常简单而且可扩展，唯一的问题就是 &lt;code&gt;superagent&lt;/code&gt; 当前node版本没有事件能够订阅我们上传的进度。&lt;/p&gt;
&lt;p&gt;我们可以通过创建一个 &lt;a href=&quot;https://nodejs.org/api/stream.html#stream_class_stream_readable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可读的流&lt;/a&gt; 并且增加一个事件来触发请求。然后我们初始化进度条为0，当事件触发的时候不断增加。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ProgressBar = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;progress&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chalk = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;chalk&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;superagent&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var username = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt(&lt;span class=&quot;string&quot;&gt;&#39;username: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; password = &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; prompt.password(&lt;span class=&quot;string&quot;&gt;&#39;password: &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileSize = fs.statSync(file).size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileStream = fs.createReadStream(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; barOpts = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+   width: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+   total: fileSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+   clear: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProgressBar(&lt;span class=&quot;string&quot;&gt;&#39; uploading [:bar] :percent :etas&#39;&lt;/span&gt;, barOpts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ fileStream.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+   bar.tick(chunk.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .post(&lt;span class=&quot;string&quot;&gt;&#39;https://api.bitbucket.org/2.0/snippets/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .auth(username, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-   .attach(&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;, file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+   .attach(&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;, fileStream)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .set(&lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是一个比较快的网速下上传大约6MB的文件的截图：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;上传文件进度条&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/progress-bar.gif&quot; alt=&quot;上传文件进度条&quot;&gt;&lt;/p&gt;
&lt;p&gt;很棒！用户现在就能够看到他们上传的进度并且知道什么时候上传完成。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我们只不过接触了用Node开发命令行脚本的冰山一角。在每一期的 &lt;a href=&quot;http://blog.codinghorror.com/the-principle-of-least-power/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atwood’s Law&lt;/a&gt; 都有很多 &lt;code&gt;npm&lt;/code&gt; 包优雅地处理标准输入、管理并行任务、监听文件、管道流、压缩、ssh、git、还有任何你能用 &lt;code&gt;Bash&lt;/code&gt; 做到的。更多地，还有非常好的API来处理子进程如果你需要其他shell脚本处理（当JavaScript处理不了的时候）。&lt;/p&gt;
&lt;p&gt;我们上面例子的源码是在 &lt;a href=&quot;https://bitbucket.org/tpettersen/bitbucket-snippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;available on Bitbucket&lt;/a&gt; 的license下，并且已经发布到 &lt;a href=&quot;https://npmjs.org/package/bitbucket-snippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm仓库&lt;/a&gt;。我这里也提一些上面没有讲到的概念，比如 &lt;code&gt;OAuth&lt;/code&gt; ，这样子你就不需要每次都输入用户名跟密码。如果你想自己简单体验一下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g bitbucket-snippet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ snippet --help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你觉得本教程有帮助，发现了bug或者有其他更酷的Node.js脚本建议，可以在Twiiter私信我。（我是 &lt;a href=&quot;https://twitter.com/kannonboy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kannonboy&lt;/a&gt;）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文译自 &lt;a href=&quot;https://developer.atlassian.com/blog/2015/11/scripting-with-node/&quot;&gt;Building command line tools with Node.js&lt;/a&gt;，介绍了如何通过Node.js来创建命令行脚本工具，介绍了很多实用的&lt;code&gt;npm&lt;/code&gt;包等。翻译水平有限，敬请指正~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://aotu.io/tags/Node-js/"/>
    
      <category term="command line tools" scheme="http://aotu.io/tags/command-line-tools/"/>
    
  </entry>
  
  <entry>
    <title>Safari 9.0的新特性</title>
    <link href="http://aotu.io/notes/2015/12/23/new-safari-9/"/>
    <id>http://aotu.io/notes/2015/12/23/new-safari-9/</id>
    <published>2015-12-22T21:42:19.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;苹果的 OS 在不断发展，Safari 亦越变强大性感，在最新的 9.0 版本当中，Safari 增加了不少新的特性，这里主要介绍一下和 Web 前端密切相关的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Viewport-Changes&quot;&gt;&lt;a href=&quot;#Viewport-Changes&quot; class=&quot;headerlink&quot; title=&quot;Viewport Changes&quot;&gt;&lt;/a&gt;Viewport Changes&lt;/h2&gt;&lt;p&gt;关于新 Safari 对 Viewport 的影响我们先看下面一段引自苹果开发者官方文档的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Viewport meta tags using “width = content-width” cause the page to scale down to fit content that overflows the viewport bounds. You can override this behavior by adding “shrink-to-fit = no” to your meta tag as shown below. The added value will prevent the page from scaling to fit the viewport.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到 Safari 将会对有内容溢出 Viewport 区域的页面进行缩放适配，使溢出的内容完整展示而不出现滚动条，而在 Viewport 设置中引入了一个新属性 &lt;code&gt;shrink-to-fit = no&lt;/code&gt;，该属性可以禁止这种缩放行为的发生。&lt;/p&gt;
&lt;p&gt;下面我们具体看一下该体贴行为对页面的影响。&lt;/p&gt;
&lt;p&gt;在 Safari 9.0 之前的版本，当 viewport meta 标签的 content 属性有设置的时候，&lt;strong&gt;如果页面内容溢出 viewport 的定义区域&lt;/strong&gt;，那么页面将会出现滚动条，如下面的页面，该页面的 viewport 设置为：&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta &lt;span class=&quot;attr&quot;&gt;name=&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content=&quot;width=device-width,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;initial-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;maximum-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;user-scalable=no&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://missoy.me/mihan/h5/shop/index_nofit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NotFixed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/fit.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而在 Safari 9.0 的版本，即使 viewport 设置了 &lt;code&gt;initial-scale=1.0&lt;/code&gt; 和 &lt;code&gt;user-scalable=no&lt;/code&gt;，Safari 不仅重置了设定好的最小缩放值限制，而且还重新恢复了用户对页面进行缩放的操作权限，&lt;a href=&quot;http://missoy.me/mihan/h5/shop/index_nofit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上述页面&lt;/a&gt;在 Safari 9.0 中的截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/notfit.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上面的截图可以看到，Safari的缩放行为对页面视觉破坏性还是比较厉害的，如果溢出的内容很多的话，页面就会被缩得更小了。&lt;/p&gt;
&lt;p&gt;在 viewport 设置添加 &lt;code&gt;shrink-to-fit = no&lt;/code&gt; 这个属性后，设置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta &lt;span class=&quot;attr&quot;&gt;name=&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content=&quot;width=device-width,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;initial-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;maximum-scale=1.0,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;user-scalable=no,shrink-to-fit&lt;/span&gt; = no&lt;span class=&quot;string&quot;&gt;&quot; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Safari 就不会再对页面进行缩放处理，恢复之前版本的处理方式，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://missoy.me/mihan/h5/shop/index_fit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fixed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/fit.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在日常的需求中，尽管内容溢出页面的情况不会太常见，但为了增强页面的容错能力，保证页面视觉的正常显示，在 viewport 设置中应该加上 &lt;code&gt;shrink-to-fit = no&lt;/code&gt; 新属性。&lt;/p&gt;
&lt;h2 id=&quot;Safari内容拦截扩展&quot;&gt;&lt;a href=&quot;#Safari内容拦截扩展&quot; class=&quot;headerlink&quot; title=&quot;Safari内容拦截扩展&quot;&gt;&lt;/a&gt;Safari内容拦截扩展&lt;/h2&gt;&lt;p&gt;Safari 9.0 新增了内容拦截扩展，该扩展程序能够便捷高效地拦截 cookies、图片、资源文件、弹窗等内容，不仅可以在 OS X 上使用，在 iOS 上也同样适用。&lt;/p&gt;
&lt;h3 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h3&gt;&lt;p&gt;内容拦截扩展程序负责提供一个 JSON 文件给 Safari，这个 JSON 文件包含了一个数组，数组里面可以配置相关规则（主要由 triggers 和 actions 组成 ）拦截指定的内容，Safari 会将该 JSON 文件转换成字节代码，转换后的字节代码被应用到所有加载资源，有效地避免了用户浏览器的信息泄露到扩展程序。&lt;/p&gt;
&lt;p&gt;内容拦截扩展程序的核心就是通过 JSON 文件的配置和传送，Safari 接收到之后就可以根据 JSON 的配置对相应的加载资源进行适配完成拦截。&lt;/p&gt;
&lt;p&gt;Xcode内设有内容拦截应用模版（Content Blocker App Extension template），里面有一个 &lt;code&gt;blockerList.json&lt;/code&gt; JSON 文件，默认设置是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;action&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;trigger&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;url-filter&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;webkit.org/images/icon-gold.png&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示对站点 webkit.org 的一张名为 icon-gold.png 的图片进行拦截。&lt;/p&gt;
&lt;p&gt;除了可以从加载资源上拦截外，还可以通过 CSS 选择器对元素进行隐藏，如下面的配置会将站点所有 class 名为 “ads” 的 div 进行 &lt;code&gt;display: none !important;&lt;/code&gt; 样式处理。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;action&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;selector&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;div.ads&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;css-display-none&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;trigger&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;url-filter&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;.*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt; 注意：由于 32 位架构的设备性能限制，iOS上的内容拦截扩展只适用在 64 位架构的设备上，苹果从 A7 处理器开始采用 64位架构，因此 iPhone 5s + 的机器才可能使用此扩展应用 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于参数 action 和 trigger 的更多介绍可以参阅：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_8.jpg&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/3476/content-blockers-first-look/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to WebKit Content Blockers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hackingwithswift.com/safari-content-blocking-ios9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Safari Content Blocking in iOS 9: a tutorial by example&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;一个简单的内容拦截扩展应用&quot;&gt;&lt;a href=&quot;#一个简单的内容拦截扩展应用&quot; class=&quot;headerlink&quot; title=&quot;一个简单的内容拦截扩展应用&quot;&gt;&lt;/a&gt;一个简单的内容拦截扩展应用&lt;/h4&gt;&lt;p&gt;实现一个拦截扩展应用很简单，现在我们以 &lt;a href=&quot;http://missoy.me/mihan/h5/shop/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拍拍小店首页&lt;/a&gt; 为例，拦截顶部广告区域：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Update Xcode 到最新版本，打开 Xcode，新建立一个 iOS Single View Application 项目（blocker-demo），如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后新建立一个 Target，在 Application Extension 模版中选中 Content Blocker Extension：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_3.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成之后，就可以在项目中看到刚才新增的 Target 文件夹（blocker），可以找到一个名为 &lt;code&gt;blockerList.json&lt;/code&gt;的 JSON 文件，在里面就可以配置需要拦截内容的规则了，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_4.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;（顶部广告区域的 class 名为 &lt;code&gt;mod_ad&lt;/code&gt;， 例子中的配置将会将顶部广告区域隐藏。）&lt;/p&gt;
&lt;p&gt;然后以整个项目为编译对象，选择需要测试的模块器（这里选择了 iPhone6）运行程序 ，&lt;strong&gt; 切记不要选中 content blocker 的 Target 为编译对象运行，在模拟器上不能生效 &lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;运行后我们看到白茫茫的一片，模拟器默认打开了刚才新建立的应用，这时候我们需要回到主界面（command + shift + h）进入系统设置界面， 到 Safari &amp;gt;Content Blockers 里面启动内容拦截扩展，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_5.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动 Safari，打开&lt;a href=&quot;http://missoy.me/mihan/h5/shop/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拍拍小店首页&lt;/a&gt;，这时候我们可以看到，启动内容拦截扩展之后，顶部的广告区域被隐藏了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_6.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;用 Safari 的 Web 检查器看了一下页面，发现用户样式表里针对顶部广告区域多了一个 &lt;code&gt;display: none !important;&lt;/code&gt;样式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/blocker_7.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后需要将程序打包，才能在真机运行，貌似需要 688RMB 的开发者帐号，土豪们可以尽情试一试。&lt;/p&gt;
&lt;h3 id=&quot;OS-X&quot;&gt;&lt;a href=&quot;#OS-X&quot; class=&quot;headerlink&quot; title=&quot;OS X&quot;&gt;&lt;/a&gt;OS X&lt;/h3&gt;&lt;p&gt;在 OS X Safari 的扩展创建器（Extension Builder）加入拦截 JSON 文件（如下图）或者在 Safari 扩展对象中使用新增的 setContentBlocker API 就可以实现内容拦截功能了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewInSafari/Art/ExtensionBuilder_AdBlocker_2x.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 需要注意的是，用于拦截内容的 onbeforeload 事件和 canLoad 信息已被弃用 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更多有关 Safari 内容拦截扩展介绍：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hackingwithswift.com/safari-content-blocking-ios9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Safari Content Blocking in iOS 9: a tutorial by example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/CocoonJin/p/4701050.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 9之Safari广告拦截器（Content Blocker）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;System-Font-Support&quot;&gt;&lt;a href=&quot;#System-Font-Support&quot; class=&quot;headerlink&quot; title=&quot;System Font Support&quot;&gt;&lt;/a&gt;System Font Support&lt;/h2&gt;&lt;h3 id=&quot;apple-system&quot;&gt;&lt;a href=&quot;#apple-system&quot; class=&quot;headerlink&quot; title=&quot;-apple-system&quot;&gt;&lt;/a&gt;-apple-system&lt;/h3&gt;&lt;p&gt;苹果操作系统会从两种不同外观和大小的字体进行自动转换去调节系统新字体 “San Francisco”，可以通过 CSS 规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font-family: -apple-system, sans-serif;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让系统智能选择适配操作系统的字体。&lt;/p&gt;
&lt;p&gt;可以看一下下面两张在系统 OS X 10.11.1 下的对比图：&lt;/p&gt;
&lt;p&gt;没有添加 &lt;code&gt;-apple-system&lt;/code&gt; 属性值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/sys-font-no.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;添加了 &lt;code&gt;-apple-system&lt;/code&gt; 属性值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/sys-font-yes.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到添加了 &lt;code&gt;-apple-system&lt;/code&gt;，字体变得更圆润锐利&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议：在 &lt;code&gt;font-family&lt;/code&gt; 属性加上 &lt;code&gt;-apple-system&lt;/code&gt; 属性值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图片看不出差别的同学请用 OS X Safari 9.0 打开以下链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://missoy.me/mihan/demo/sys-font.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System Font Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/sys-font-qrcode.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多关于 System Font Support 介绍 ：&lt;a href=&quot;https://webkit.org/blog/3709/using-the-system-font-in-web-content/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using the System Font in Web Content&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;附：&lt;a href=&quot;http://www.jiemian.com/article/392197.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《在吐槽iOS 9的新字体之前，你应该了解这些》&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;iOS-text-style-keywords&quot;&gt;&lt;a href=&quot;#iOS-text-style-keywords&quot; class=&quot;headerlink&quot; title=&quot;iOS text-style keywords&quot;&gt;&lt;/a&gt;iOS text-style keywords&lt;/h3&gt;&lt;p&gt;Safari 9.0除了支持 &lt;code&gt;-apple-system&lt;/code&gt; 新字体特性之外，在 iOS 平台提供了更丰富更具活力的文本样式，该文本样式不仅仅是特定的字体，包括所有的 &lt;code&gt;font&lt;/code&gt; 样式，如字重和字号，因此只能以 &lt;code&gt;font&lt;/code&gt; 来定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;font: -apple-system-body;&lt;/li&gt;
&lt;li&gt;font: -apple-system-headline;&lt;/li&gt;
&lt;li&gt;font: -apple-system-subheadline;&lt;/li&gt;
&lt;li&gt;font: -apple-system-caption1;&lt;/li&gt;
&lt;li&gt;font: -apple-system-caption2;&lt;/li&gt;
&lt;li&gt;font: -apple-system-footnote;&lt;/li&gt;
&lt;li&gt;font: -apple-system-short-body;&lt;/li&gt;
&lt;li&gt;font: -apple-system-short-headline;&lt;/li&gt;
&lt;li&gt;font: -apple-system-short-subheadline;&lt;/li&gt;
&lt;li&gt;font: -apple-system-short-caption1;&lt;/li&gt;
&lt;li&gt;font: -apple-system-short-footnote;&lt;/li&gt;
&lt;li&gt;font: -apple-system-tall-body;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加上这些属性在 iOS 上会有不同的表现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/sys-font.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;有兴趣的同事去 &lt;a href=&quot;http://missoy.me/mihan/demo/sys-font.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; 页看一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/sys-font-qrcode.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS-Scroll-Snapping&quot;&gt;&lt;a href=&quot;#CSS-Scroll-Snapping&quot; class=&quot;headerlink&quot; title=&quot;CSS Scroll Snapping&quot;&gt;&lt;/a&gt;CSS Scroll Snapping&lt;/h2&gt;&lt;p&gt;2015年3月26日，W3C的CSS工作组发布了CSS滚动界限点模块（CSS Scroll Snap Points Level 1）的首份工作草案（First Public Working Draft）。在浏览可以连续上下滚动或左右滚动的连续页面或一组图片时，通过触摸屏的触摸滑动或鼠标滚轴的滚动操作可以获得较好用户体验。&lt;/p&gt;
&lt;p&gt;Safari 9.0 的新特性支持强大的 CSS Scroll Snap，利用这个特性，我们可以用CSS轻松实现网站常见的轮播图滚动特效&lt;/p&gt;
&lt;p&gt;我们先看一下 &lt;a href=&quot;http://missoy.me/mihan/demo/scroll-snap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; 感受一下 ，请用 Safari 9.0 打开&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/scroll-snap_9.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 Scroll Snap 需要的结构包含装载滚动元素的容器和需要滚动的元素：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;scroll_container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;scroll_elements&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;scroll_elements&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;scroll_elements&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;scroll_elements&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Scroll Snap 一共有5个CSS属性可使用，分别是 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;scroll-snap-type：定义滚动界限的类型，有三个属性值可选， &lt;code&gt;none&lt;/code&gt; | &lt;code&gt;mandatory&lt;/code&gt; | &lt;code&gt;proximity&lt;/code&gt;，初始值为 &lt;code&gt;none&lt;/code&gt;，&lt;strong&gt;目前 WebKit 只支持 &lt;code&gt;mandatory&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scroll-snap-points-x：定义滚动容器 X 轴方向的 scroll sanp 点，有两个属性值可选，&lt;code&gt;none&lt;/code&gt;| &lt;code&gt;repeat(&amp;lt;length&amp;gt;)&lt;/code&gt;，初始值为 &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scroll-snap-points-y：定义滚动容器 Y 轴方向的 scroll sanp 点，有两个属性值可选，&lt;code&gt;none&lt;/code&gt; | &lt;code&gt;repeat(&amp;lt;length&amp;gt;)&lt;/code&gt;，初始值为 &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scroll-snap-destination：定义滚动元素在滚动容器的对齐坐标点，属性值为 &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;，初始值为：&lt;code&gt;0px 0px&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scroll-snap-coordinate：定义滚动元素与滚动容器对齐点重合的坐标点，属性值为 &lt;code&gt;none&lt;/code&gt; | &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;，初始值为 &lt;code&gt;none&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;属性 &lt;em&gt;scroll-snap-type&lt;/em&gt; 、&lt;em&gt;scroll-snap-points-x&lt;/em&gt;、&lt;em&gt;scroll-snap-points-y&lt;/em&gt; 和 &lt;em&gt;scroll-snap-destination&lt;/em&gt; 应用在容器元素&lt;/p&gt;
&lt;p&gt;属性 &lt;em&gt;scroll-snap-coordinate&lt;/em&gt; 应用在滚动元素&lt;/p&gt;
&lt;p&gt;滚动容器 scroll snap 坐标点 和 滚动元素 scroll snap 坐标点分别如下图红色十字和黄色十字所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/scroll-snap_10.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时的设置是：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.scroll_container&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-scroll-snap-type&lt;/span&gt;: mandatory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-scroll-snap-destination&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.scroll_elements&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;-webkit-scroll-snap-coordinate&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;属性详细使用情况请参阅 &lt;a href=&quot;http://www.w3.org/TR/css-snappoints-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Scroll Snap Points Module Level 1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;需要注意的&quot;&gt;&lt;a href=&quot;#需要注意的&quot; class=&quot;headerlink&quot; title=&quot;需要注意的&quot;&gt;&lt;/a&gt;需要注意的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;该草案还在不断修进改进，WebKit 目前只支持带 -webkit- 前辍的写法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要启用 scroll snap 效果，滚动容器必须具有非 &lt;code&gt;none&lt;/code&gt; 值的属性 &lt;code&gt;scroll-snap-type&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滚动容器 &lt;code&gt;scroll-snap-points-x&lt;/code&gt; 和 &lt;code&gt;scroll-snap-points-y&lt;/code&gt; 的属性设置会忽略滚动元素 &lt;code&gt;scroll-snap-coordinate&lt;/code&gt; 属性设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滚动容器 &lt;code&gt;scroll-snap-destination&lt;/code&gt; 属性与滚动元素 &lt;code&gt;scroll-snap-coordinate&lt;/code&gt; 总是成对出现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滚动内容发生改变（如滚动容器大小、滚动元素大小、节点的改变等）使得滚动元素的 scroll snap 点不在滚动容器的 scroll snap 点的时候，滚动偏移值会发生改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同尺寸的滚动元素混合在一起发生滚动的时候，在 X 或 Y 轴方向上离滚动容器 scroll snap 点最近的滚动元素 scroll snap 点方向轴将会与滚动容器 scroll snap 点的方向轴重合（存在滚动区域的时候）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于 scroll-snap 属性 Demo 可查看 &lt;a href=&quot;https://www.webkit.org/blog/4017/scroll-snapping-with-css-snap-points/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scroll Snapping with CSS Snap Points&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Initial-Letter-Support&quot;&gt;&lt;a href=&quot;#Initial-Letter-Support&quot; class=&quot;headerlink&quot; title=&quot;Initial Letter Support&quot;&gt;&lt;/a&gt;Initial Letter Support&lt;/h2&gt;&lt;p&gt;Safari 9.0 支持 CSS &lt;code&gt;initial-letter&lt;/code&gt;(要带 -webkit- 前辍) 属性了，以前我们通过伪元素 &lt;code&gt;::first-letter&lt;/code&gt;实现首字下沉的效果，但是局限性比较多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首字母的高度需要通过调整字号大小实现，比较难精确到需要设置的高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;段落字号改变的时候，首字母字号并不能自适应改变，因此并不能自适应实现对齐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/initial-letter_2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSS &lt;code&gt;initial-letter&lt;/code&gt; 属性能很好的解决这些问题，我们先看一下它的属性值： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;normal – 初始值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[&amp;lt;number&amp;gt; &amp;lt;integer&amp;gt;] – 定义首字母的大小和下沉位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;number&amp;gt; 首字母的大小，大小值为正数值，字高占据的行数为单位，如 “2” 表示首字母高大小占据段落两行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;integer&amp;gt; 首字母下沉的位置，大小值为不为0的整数，若缺省，则以第一个参数 &amp;lt;number&amp;gt;数值为准&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;initial-letter&lt;/code&gt;属性应用在伪元素 &lt;code&gt;::first-letter&lt;/code&gt; 或容器第一个行内子元素&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css-inline/#initial-letter-styling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3文档介绍&lt;/a&gt;的 EXAMPLE 截图引用如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/initial-letter.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实验 &lt;a href=&quot;http://missoy.me/mihan/demo/initial-letter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/initial-letter_3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Backdrop-Filters&quot;&gt;&lt;a href=&quot;#Backdrop-Filters&quot; class=&quot;headerlink&quot; title=&quot;Backdrop Filters&quot;&gt;&lt;/a&gt;Backdrop Filters&lt;/h2&gt;&lt;p&gt;CSS背景滤镜属性 &lt;code&gt;backdrop-filter&lt;/code&gt; 可以让元素的背景或元素层级以下的元素加上滤镜效果，以下的属性值在 Safari 9.0 得到了全面支持： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;blur(&amp;lt;length&amp;gt;)&lt;/code&gt;：模糊，原始效果值为 &lt;code&gt;0px&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;brightness([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ])&lt;/code&gt;：亮度，原始效果值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;contrast([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ])&lt;/code&gt;：对比度，原始效果值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;drop-shadow( &amp;lt;length&amp;gt;{2,3} &amp;lt;color&amp;gt;?)&lt;/code&gt;：投影，原始效果值为所有长度值为 &lt;code&gt;0&lt;/code&gt;，长度值至少2个，最多3个，&lt;strong&gt;注意：不支持投影扩展值和混合投影&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;grayscale([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ] )&lt;/code&gt;：灰度，原始效果值为 &lt;code&gt;0&lt;/code&gt;，最大值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hue-rotate( &amp;lt;angle&amp;gt;)&lt;/code&gt;：相位，原始效果值为 &lt;code&gt;0deg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;invert( [ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ])&lt;/code&gt;：反相，原始效果值为 &lt;code&gt;0&lt;/code&gt;，最大值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;opacity([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ] )&lt;/code&gt;：透明度，原始效果值为 &lt;code&gt;1&lt;/code&gt;，最大值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;saturate([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ])&lt;/code&gt;：饱和度，原始效果值为 &lt;code&gt;1&lt;/code&gt;，不接受负值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sepia([ &amp;lt;number&amp;gt; | &amp;lt;percentage&amp;gt; ])&lt;/code&gt;：乌贼墨，原始效果值为 &lt;code&gt;0&lt;/code&gt;，最大值为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;100%&lt;/code&gt;，不接受负值 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;滤镜属性 &lt;code&gt;filter&lt;/code&gt; 同样具有以上的属性值，与背景滤镜&lt;code&gt;backdrop-filter&lt;/code&gt; 不同的是，&lt;code&gt;filter&lt;/code&gt; 作用于元素本身（文本、背景等）以其子元素，而 &lt;code&gt;backdrop-filter&lt;/code&gt; 只作用于元素本身的背景（文本及其子元素不受影响）以及其层级下面的其它元素，具体的测试参考下面的 &lt;a href=&quot;http://missoy.me/mihan/demo/filter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/filter2.jpg&quot; alt=&quot;image&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/filter.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多关于 &lt;code&gt;backdrop-filter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;WebKit.org：&lt;a href=&quot;https://webkit.org/blog/3632/introducing-backdrop-filters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Backdrop Filters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;w3c文档：&lt;a href=&quot;https://drafts.fxtf.org/filters/#typedef-filter-function-list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;typedef-filter-function-list&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS3-Feature-Queries&quot;&gt;&lt;a href=&quot;#CSS3-Feature-Queries&quot; class=&quot;headerlink&quot; title=&quot;CSS3 Feature Queries&quot;&gt;&lt;/a&gt;CSS3 Feature Queries&lt;/h2&gt;&lt;p&gt;Safari 9.0 支持了 CSS3 功能查询 &lt;code&gt;@supports&lt;/code&gt;，可以对 CSS 属性(包括但不限于带前辍的属性，如 -webkit-,-moz- 等)进行检测&lt;/p&gt;
&lt;h3 id=&quot;单个条件查询&quot;&gt;&lt;a href=&quot;#单个条件查询&quot; class=&quot;headerlink&quot; title=&quot;单个条件查询&quot;&gt;&lt;/a&gt;单个条件查询&lt;/h3&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 检测是否支持 display:flexbox，如果支持侧执行中括号的内容 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@supports&lt;/span&gt; ( &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flexbox ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-class&quot;&gt;.selector&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多个单件查询&quot;&gt;&lt;a href=&quot;#多个单件查询&quot; class=&quot;headerlink&quot; title=&quot;多个单件查询&quot;&gt;&lt;/a&gt;多个单件查询&lt;/h3&gt;&lt;p&gt;可以使用逻辑关键字 &lt;code&gt;not&lt;/code&gt;、&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt; 进行多个单件查询&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@supports ( &lt;span class=&quot;keyword&quot;&gt;box-shadow: &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;keyword&quot;&gt;black &lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;          ( -moz-&lt;span class=&quot;keyword&quot;&gt;box-shadow: &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;keyword&quot;&gt;black &lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;          ( -webkit-&lt;span class=&quot;keyword&quot;&gt;box-shadow: &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;keyword&quot;&gt;black &lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;          ( -o-&lt;span class=&quot;keyword&quot;&gt;box-shadow: &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;px &lt;span class=&quot;keyword&quot;&gt;black &lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .selector&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;需要注意的地方&quot;&gt;&lt;a href=&quot;#需要注意的地方&quot; class=&quot;headerlink&quot; title=&quot;需要注意的地方&quot;&gt;&lt;/a&gt;需要注意的地方&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@supports&lt;/code&gt; 后面总是跟着一个空格符和一个括号，&lt;code&gt;逻辑关键字&lt;/code&gt;前后总有一个空格符。因此，写查询条件的时候&lt;/p&gt;
  &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 错误的写法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;display:&lt;/span&gt; flexbox &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@supports&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;display:&lt;/span&gt; flexbox)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@supports&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;display:&lt;/span&gt; flexbox)and(-webkit-scroll-snap-&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt;mandatory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 正确的写法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@supports&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;display:&lt;/span&gt; flexbox) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@supports&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;display:&lt;/span&gt; flexbox) and (-webkit-scroll-snap-&lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt;mandatory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个单件查询，当有多个逻辑关键字混合使用的时候，查询语句最外层最多只有一个逻辑关键字：&lt;/p&gt;
  &lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 错误的写法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@supports (A) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; (B) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (C) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 正确的写法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@supports (A) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; ((B) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (C)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@supports ((A) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; (B)) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; (C) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@supports&lt;/code&gt; 更详细说明可参考：&lt;a href=&quot;http://www.w3.org/TR/css3-conditional/#at-supports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;at-supports&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://missoy.me/mihan/demo/@supports.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/@supports2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS4-Selectors&quot;&gt;&lt;a href=&quot;#CSS4-Selectors&quot; class=&quot;headerlink&quot; title=&quot;CSS4 Selectors&quot;&gt;&lt;/a&gt;CSS4 Selectors&lt;/h2&gt;&lt;p&gt;以下 CSS4 选择器在 Safari 9.0 完全支持了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性选择器忽略大小写标识（Case-insensitive attribute selectors）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:any-link&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:lang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:matches&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:placeholder-shown&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Case-insensitive&quot;&gt;&lt;a href=&quot;#Case-insensitive&quot; class=&quot;headerlink&quot; title=&quot;Case-insensitive&quot;&gt;&lt;/a&gt;Case-insensitive&lt;/h3&gt;&lt;p&gt;一般情况下，选择符中属性名和值的大小写敏感性取决于文档语言的敏感性，为了使其匹配忽略大小写敏感性以及其文档语言的敏感性，可以在属性选择器的关闭符&lt;code&gt;]&lt;/code&gt;前加上标识符 &lt;code&gt;i&lt;/code&gt;，这样不管在什么文档，都能忽略大小写敏感性，如以下例子：&lt;/p&gt;
&lt;p&gt;结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;box&amp;quot; title=&amp;quot;BOX&amp;quot;&amp;gt;Box&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;样式：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* .box初始背景色为白色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;word-break&lt;/span&gt;: break-all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;word-wrap&lt;/span&gt;: break-word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 属性值大小写敏感，完全匹配，.box背景变黑色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[title=&quot;BOX&quot;]&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 用了 CSS4 的 Case-insensitive 属性选择器，若浏览器支持，大小写不再敏感，能完成匹配，.box背景生效变为灰色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[title=&quot;box&quot; i]&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 Case-insensitive 更详细介绍：&lt;a href=&quot;http://www.w3.org/TR/selectors4/#attribute-case&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3介绍文档 - Case-insensitive&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;测试 &lt;a href=&quot;http://missoy.me/mihan/demo/css4_selector.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/css4_selector.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;伪类-any-link&quot;&gt;&lt;a href=&quot;#伪类-any-link&quot; class=&quot;headerlink&quot; title=&quot;伪类 :any-link&quot;&gt;&lt;/a&gt;伪类 :any-link&lt;/h3&gt;&lt;p&gt;w3文档介绍大概的描述是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果元素有定义伪类 &lt;code&gt;:link&lt;/code&gt;或 &lt;code&gt;:visited&lt;/code&gt; ，&lt;code&gt;:any-link&lt;/code&gt;将会对其进行匹配。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是写了 Demo 验证了一下&lt;/p&gt;
&lt;p&gt;HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://aotu.io/&amp;quot; title=&amp;quot;&amp;quot; class=&amp;quot;lk&amp;quot;&amp;gt;凹凸Team链接&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CSS:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 黑色背景 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:link&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 黄色背景 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:visited&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ff0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 红色背景 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:any-link&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ff3737&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 白色背景 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 灰色背景 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.lk&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:active&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:any-link&lt;/code&gt; Safari 9.0 生效了，Chrome、Firefox 并没有生效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伪类 &lt;code&gt;:any-link&lt;/code&gt; 的确会对已定义有的伪类&lt;code&gt;:link&lt;/code&gt; 和 &lt;code&gt;:visited&lt;/code&gt;匹配，并重新覆盖元素相同的CSS属性， 而 &lt;code&gt;:hover&lt;/code&gt; 和 &lt;code&gt;:active&lt;/code&gt; 并没有匹配成功，&lt;code&gt;:hover&lt;/code&gt; 和 &lt;code&gt;:active&lt;/code&gt; 依然生效&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS代码解析的时候渲染 &lt;code&gt;:any-link&lt;/code&gt; 前就渲染了 &lt;code&gt;:link&lt;/code&gt; 和 &lt;code&gt;:visited&lt;/code&gt;，因此匹配成功了，而 &lt;code&gt;:hover&lt;/code&gt; 和 &lt;code&gt;:active&lt;/code&gt; 出现在 &lt;code&gt;:any-link&lt;/code&gt; 后面，并不能匹配成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若加上 &lt;code&gt;-webkit-&lt;/code&gt; 前辍，Chrome 亦能生效。&lt;/p&gt;
&lt;p&gt;如果将 &lt;code&gt;:any-link&lt;/code&gt; 出现位置改变，&lt;code&gt;:any-link&lt;/code&gt; 始终匹配出现在他之前的 Link 相关伪类，有兴趣的同学可以试一下。&lt;/p&gt;
&lt;p&gt;小小总结了一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:any-link&lt;/code&gt; Safari 9.0 不需要加前辍，Chrome、Firefox 浏览器需要加 &lt;code&gt;-webkit-&lt;/code&gt;、&lt;code&gt;-moz-&lt;/code&gt; 前辍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:any-link&lt;/code&gt; 匹配有效性和书写顺序有关，&lt;code&gt;:any-link&lt;/code&gt; 只对出现在其之前的 Link 伪类匹配生效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;建议&quot;&gt;&lt;a href=&quot;#建议&quot; class=&quot;headerlink&quot; title=&quot;建议&quot;&gt;&lt;/a&gt;建议&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;写 a 标签样式的时候，在 &lt;code&gt;:hover&lt;/code&gt; 和 &lt;code&gt;:active&lt;/code&gt; 前应该加上 &lt;code&gt;:any-link&lt;/code&gt; 伪类样式，覆盖系统默认的 &lt;code&gt;:link&lt;/code&gt; 和 &lt;code&gt;:visited&lt;/code&gt;伪类样式。如下所示：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;-webkit-any-link&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;-moz-any-link&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;any-link&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;hover&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:&lt;span class=&quot;selector-tag&quot;&gt;active&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 &lt;code&gt;:any-link&lt;/code&gt; 更详细介绍： &lt;a href=&quot;http://www.w3.org/TR/selectors4/#the-any-link-pseudo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3介绍文档 - :any-link&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;实验 &lt;a href=&quot;http://missoy.me/mihan/demo/css4_selector.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/css4_selector.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;伪类-matches&quot;&gt;&lt;a href=&quot;#伪类-matches&quot; class=&quot;headerlink&quot; title=&quot;伪类 :matches()&quot;&gt;&lt;/a&gt;伪类 :matches()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;:matches()&lt;/code&gt; 是一种类似函数的伪类，可以将不同的选择器以数组形式混合形成一个选择器组，我们可以将之看作是CSS的一种语法糖，请看下面的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:matches(section, article, aside, nav) h1 {
  color: #BADA55;
}

/* 相当于下面的代码 */
section h1,
article h1, 
aside h1,
nav h1 {
  color: #BADA55;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更方便书写一些复杂的选择器，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:matches(section, article, aside, nav) :matches(h1, h2, h3, h4, h5, h6) {
    color: #BADA55;
}

/* 相当于下面的代码 */
section h1, section h2, section h3, section h4, section h5, section h6, 
article h1, article h2, article h3, article h4, article h5, article h6, 
aside h1, aside h2, aside h3, aside h4, aside h5, aside h6, 
nav h1, nav h2, nav h3, nav h4, nav h5, nav h6 {
    color: #BADA55;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;减少重复的书写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.links:matches(:hover, :focus, :active) {
    color: #BADA55;
}

/* 相当于下面的代码 */
.links:hover, .links:focus, .links:active {
    color: #BADA55;
}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;code&gt;:matches()&lt;/code&gt;不能嵌套而且不能与 &lt;code&gt;:not()&lt;/code&gt; 一起使用&lt;/strong&gt;，以下的写法都是不允许的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Doesn&amp;apos;t work */
:matches(:not(...))

/* Doesn&amp;apos;t work */
:not(:matches(...))

/* Doesn&amp;apos;t work */
:matches(:matches(...))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多关于 &lt;code&gt;:matches()&lt;/code&gt; 可参考 &lt;/p&gt;
&lt;p&gt;CSS-tricks ：&lt;a href=&quot;https://css-tricks.com/almanac/selectors/m/matches/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;:matches()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;W3文档：&lt;a href=&quot;http://www.w3.org/TR/selectors4/#matches&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;matches&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;伪类-placeholder-shown&quot;&gt;&lt;a href=&quot;#伪类-placeholder-shown&quot; class=&quot;headerlink&quot; title=&quot;伪类 :placeholder-shown&quot;&gt;&lt;/a&gt;伪类 :placeholder-shown&lt;/h3&gt;&lt;p&gt;如果元素 E 设置了属性 &lt;code&gt;placeholder&lt;/code&gt;，属性值不为空并出现在页面的时候，那么&lt;code&gt;E:placeholder-shown&lt;/code&gt; 就能匹配到该元素，当 &lt;code&gt;placeholder&lt;/code&gt; 文本在页面消失的时候，匹配到的相应样式也会消失，如以下 &lt;a href=&quot;http://missoy.me/mihan/demo/css4_selector.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; 所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/css4_selector.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;伪类-nth-child，-not，-lang&quot;&gt;&lt;a href=&quot;#伪类-nth-child，-not，-lang&quot; class=&quot;headerlink&quot; title=&quot;伪类 :nth-child，:not，:lang&quot;&gt;&lt;/a&gt;伪类 :nth-child，:not，:lang&lt;/h3&gt;&lt;p&gt;详细用法有兴趣的同学可以到 w3文档 查阅：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/selectors4/#the-lang-pseudo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;:lang - #the-lang-pseudo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/selectors4/#negation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;:not - #negation&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/selectors4/#the-nth-child-pseudo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;:nth-child - #the-nth-child-pseudo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Unprefixed-CSS-Properties&quot;&gt;&lt;a href=&quot;#Unprefixed-CSS-Properties&quot; class=&quot;headerlink&quot; title=&quot;Unprefixed CSS Properties&quot;&gt;&lt;/a&gt;Unprefixed CSS Properties&lt;/h2&gt;&lt;p&gt;以下CSS属性在 Safari 9.0 已完全支持，不用再带 &lt;code&gt;-webkit-&lt;/code&gt; 前辍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transition&lt;/li&gt;
&lt;li&gt;transition-delay&lt;/li&gt;
&lt;li&gt;transition-duration&lt;/li&gt;
&lt;li&gt;transition-property&lt;/li&gt;
&lt;li&gt;transition-timing-function&lt;/li&gt;
&lt;li&gt;animation&lt;/li&gt;
&lt;li&gt;cursor: zoom-in&lt;/li&gt;
&lt;li&gt;cursor: zoom-out&lt;/li&gt;
&lt;li&gt;perspective&lt;/li&gt;
&lt;li&gt;perspective-origin&lt;/li&gt;
&lt;li&gt;transform&lt;/li&gt;
&lt;li&gt;transform-origin&lt;/li&gt;
&lt;li&gt;transform-style&lt;/li&gt;
&lt;li&gt;@keyframes&lt;/li&gt;
&lt;li&gt;animation-name&lt;/li&gt;
&lt;li&gt;animation-duration&lt;/li&gt;
&lt;li&gt;animation-timing-function&lt;/li&gt;
&lt;li&gt;animation-iteration-count&lt;/li&gt;
&lt;li&gt;animation-direction&lt;/li&gt;
&lt;li&gt;animation-play-state&lt;/li&gt;
&lt;li&gt;animation-delay&lt;/li&gt;
&lt;li&gt;animation-fill-mode&lt;/li&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;li&gt;align-items&lt;/li&gt;
&lt;li&gt;align-self&lt;/li&gt;
&lt;li&gt;justify-content&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;flex-basis&lt;/li&gt;
&lt;li&gt;flex-direction&lt;/li&gt;
&lt;li&gt;flex-flow&lt;/li&gt;
&lt;li&gt;flex-grow&lt;/li&gt;
&lt;li&gt;flex-shrink&lt;/li&gt;
&lt;li&gt;flex-wrap&lt;/li&gt;
&lt;li&gt;break-after&lt;/li&gt;
&lt;li&gt;break-before&lt;/li&gt;
&lt;li&gt;break-inside&lt;/li&gt;
&lt;li&gt;columns&lt;/li&gt;
&lt;li&gt;column-count&lt;/li&gt;
&lt;li&gt;column-fill&lt;/li&gt;
&lt;li&gt;column-gap&lt;/li&gt;
&lt;li&gt;column-rule&lt;/li&gt;
&lt;li&gt;column-rule-color&lt;/li&gt;
&lt;li&gt;column-rule-style&lt;/li&gt;
&lt;li&gt;column-rule-width&lt;/li&gt;
&lt;li&gt;column-span&lt;/li&gt;
&lt;li&gt;column-width&lt;/li&gt;
&lt;li&gt;alt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Responsive-Design-Mode&quot;&gt;&lt;a href=&quot;#Responsive-Design-Mode&quot; class=&quot;headerlink&quot; title=&quot;Responsive Design Mode&quot;&gt;&lt;/a&gt;Responsive Design Mode&lt;/h2&gt;&lt;p&gt;Safari 9.0 推出了响应式设计模式，command + option + R 或在“开发 – 进入响应式设计模式”可以进入，界面如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/rdm.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现主流 iPhone/iPad 机型尺寸&lt;/li&gt;
&lt;li&gt;iOS8.1系统模拟（iphone、ipad、ipod touch）&lt;/li&gt;
&lt;li&gt;苹果系主流分辨率&lt;/li&gt;
&lt;li&gt;Safari 9.0.1 Mac&lt;/li&gt;
&lt;li&gt;Chrome – Mac/Windows&lt;/li&gt;
&lt;li&gt;FireFox – Mac/Windows&lt;/li&gt;
&lt;li&gt;IE7 - IE10 –Windows（ 好样的！）&lt;/li&gt;
&lt;li&gt;页面精度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击选中的机型图标还可以以不同的方式展示，如 iPhone 的横屏，iPad 的分屏等&lt;/p&gt;
&lt;p&gt;响应式设计模式 Chrome 浏览器早早就有，但单从苹果产品的调试去看，个人更喜欢 Safari 的响应式设计模式，无论从外观、体验以及专注度，都要优于 Chrome，Safari一直在进步，从不怀疑 Apple Developer 的级数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/chrome.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Web-Inspector-Redesign&quot;&gt;&lt;a href=&quot;#Web-Inspector-Redesign&quot; class=&quot;headerlink&quot; title=&quot;Web Inspector Redesign&quot;&gt;&lt;/a&gt;Web Inspector Redesign&lt;/h2&gt;&lt;p&gt;之前所了解到的 Web Inspector 版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/web_inspector_1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;（从苹果开发者文档介绍了解到的，没使用过，目测是 Safari 4.0 or 之前的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/web_inspector_2.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;（直接 google 图片了解到的，没使用过，目测是 Safari 6.0 重新设计那款）&lt;/p&gt;
&lt;p&gt;Safari 9.0 的 Web 检查器经过了重新设计，更直观易用，用户体验更棒。&lt;/p&gt;
&lt;p&gt;开发任务 Tab 切换更简易快捷，新的渲染时间线框架更容易更细致检测到页面渲染的情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/web_inspector_3.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;元素查看，样式修改调试方便，直接点光标直接处于编辑状态了，不明白 Chrome 的为什么点了默认全选，编辑态还有一个输入框的形态，Apple 的极简设计理念无处不在，处处体现着苹果 Design 的基因&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/web_inspector_4.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;断点调试器也哗啦啦地好看易用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/safari-9/web_inspector_5.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多的内容有兴趣的同学去体验一下吧，这里就不一一烧图了。&lt;/p&gt;
&lt;div style=&quot;color:#fff;&quot;&gt;如果说 Chrome Web Inspector 是一名角斗士，那么 Safari Web Inspector 就是一名会写诗的角斗士&lt;/div&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;苹果的 OS 在不断发展，Safari 亦越变强大性感，在最新的 9.0 版本当中，Safari 增加了不少新的特性，这里主要介绍一下和 Web 前端密切相关的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Safari 9.0" scheme="http://aotu.io/tags/Safari-9-0/"/>
    
      <category term="iOS" scheme="http://aotu.io/tags/iOS/"/>
    
      <category term="OS X" scheme="http://aotu.io/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>What Does the Foo Mean</title>
    <link href="http://aotu.io/notes/2015/12/18/etymology-of-foobar/"/>
    <id>http://aotu.io/notes/2015/12/18/etymology-of-foobar/</id>
    <published>2015-12-17T21:22:23.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;今天在 WebKit 看了 CSS 伪类的文章，其中对 &lt;code&gt;:matches()&lt;/code&gt; 的介绍出现了 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;bar&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:matches(.foo, .bar) {
    background-color: green;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;随即想起，以前在不少编程书里经常看到 &lt;code&gt;foo&lt;/code&gt;、&lt;code&gt;bar&lt;/code&gt; 这对 couple，一直不知道他们的具体含义，于是默默去 google 搜了一下，发现结果都几有意思。&lt;/p&gt;
&lt;p&gt;首先在 &lt;em&gt;Quora&lt;/em&gt; 里发现一位名为 &lt;em&gt;Thom Parkin&lt;/em&gt; 的网友回答：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“foo” has been (until very recently) always used as part of a pair (with “bar”) when representing arbitrary names in computer science.  This is primarily in the instance of examples.&lt;/p&gt;
&lt;p&gt;Much like the “Hello World” is a standard for examples in computer programming the use of “foo” and “bar” had grown in popularity.&lt;/p&gt;
&lt;p&gt;The origin comes from a common phrase much older than computers and computer programming.&lt;/p&gt;
&lt;p&gt;The choice of “foo” coupled with “bar” is derived from the coloquial acronym FUBAR (pronounced FOO-bar).&lt;/p&gt;
&lt;p&gt;Legendarily from the military world, it represents the phrase:&lt;br&gt;“Fucked Up Beyond All Recognition” (in ‘mixed company’ the first word could be “Fouled”).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概的意思是说：&lt;/p&gt;
&lt;p&gt;在计算计领域里，“foo” 和 “bar” 通常会成对出现，在举例的时候用作没有明确意义的命名，就好像 “Hellow World” 例子在计算机编程里面作为标准的例子一样，“foo” 和 “bar” 的使用已经变得很流行。&lt;/p&gt;
&lt;p&gt;而该词在常用的习语里面出现的时间远比在计算机或计算机编程里面出现的早，“foo” 和 “bar” 成对出现则起源于口语 “FUBAR” 一词（发音和 Foo-bar 一样）。&lt;/p&gt;
&lt;p&gt;来自军事世界的传说中，“FooBar” 的含义则是 “Fucked Up Beyond All Recognition，全句意思是 “糟糕糟到面目全非/真是混乱不堪” ？&lt;/p&gt;
&lt;p&gt;看完 &lt;em&gt;Thom Parkin&lt;/em&gt; 的解释，隐隐约约觉得此词来头不小，但是啊 &lt;em&gt;Thom&lt;/em&gt; 的介绍又不够详细，然后继续 search 一下，发现万能 Wiki Sir 对此有更详细的描述。&lt;/p&gt;
&lt;p&gt;Wiki Sir 直接就来一句 “Not to be confused with FUBAR”，心里只想说：666666&lt;/p&gt;
&lt;p&gt;Wiki 对 “Foobar” 一词的定义是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The terms foobar (/ˈfuːbɑr/), fubar, or foo, bar, baz and qux (alternatively, quux) and sometimes norf[1][2][3][4] and many others[5][6] are sometimes used as placeholder names (also referred to as metasyntactic variables) in computer programming or computer-related documentation.[7] They have been used to name entities such as variables, functions, and commands whose exact identity is unimportant and serve only to demonstrate a concept. The words themselves have no meaning in this usage. Foobar is sometimes used alone; foo, bar, and baz are sometimes used, when multiple entities are needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Foobar 还有一群兄弟姐妹，例如 “fubar” 、“baz”、“qux”、“quux”、“norf”，他们很多时候都会作为占位名（或者作为伪变量）被应用在计算机编程或与计算机相关的文档中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他们被用作变量命名、函数命名、和命令命名，这些命名基本都是不重要的，仅仅作为某个概念阐述的示例，他们本身并没有什么具体含义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Foobar有时候单独使用，而当多个这种用法出现的时候， “foo”，“bar”，“baz” 会组合使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嗯~~ 原来是这样~~&lt;/p&gt;
&lt;p&gt;那么出处呢？Wiki Sir 介绍得比较详细，有兴趣的同学自己 &lt;a href=&quot;https://en.wikipedia.org/wiki/Foobar#History_and_etymology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Click Here&lt;/a&gt; 去看看原文，在下也试下意译到本文&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Foo&lt;/em&gt; 一词起源于 20 世纪 30 年代的一个并没有任何意义的词（nonsense word）和 20 世界 40 年代军事术语里面的 “FUBAR” 以及大约在 20 世纪 60 年代麻省理工学院铁路模型技术俱乐部（TMRC）在一个程序上下文用到的词汇。然而，这些词汇之间明确的联系仍然不清晰，从而使得一些有趣的理论学说进一步去定义他们。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Foo&lt;/em&gt; 在文献 《Internet Engineering Task Force (IETF) &lt;a href=&quot;https://tools.ietf.org/html/rfc3092&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 3092&lt;/a&gt;》里有定义（文献标题为 Etymology of “Foo”），文献给出了 &lt;em&gt;foo&lt;/em&gt; 最早的使用记录，就是出现在 20 世纪 30 年代由美国 &lt;em&gt;Bill Holman&lt;/em&gt; 创作的连载漫画 &lt;em&gt;Smokey Stover&lt;/em&gt;，&lt;em&gt;foo&lt;/em&gt; 被用作没有具体含义的词，如下图的 “foomobile”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mihanX/foo-img-1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Smokey Stover driving a “foomobile”)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;作者 &lt;em&gt;Holman&lt;/em&gt; 说使用这个词是因为他在旧金山唐人街看到一尊中国玉雕像底部的“福”字，&lt;em&gt;foo&lt;/em&gt; 大概是 &lt;em&gt;福（fu）&lt;/em&gt; 的音译。而当时像 “福祿壽”、“福满处”等象征上帝的虚构形象在中国非常流行。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Smokey Stover&lt;/em&gt; 从 1935 连载到 1973，期间一直重点保留着 “foo” 的特征，就好像上面 “foomobile” 的插图。这个词在 20 世纪 30 年代非常流行，除了在 &lt;em&gt;Smokey Stover&lt;/em&gt; 出现，还在其它卡通和连载漫画里出现，如由 &lt;em&gt;Bob Clampett&lt;/em&gt; 创办的 &lt;em&gt;Looney Tunes（兔巴哥）&lt;/em&gt;卡通系列里的 &lt;em&gt;The Daffy Doc&lt;/em&gt; 和 &lt;em&gt;Porky in Wackyland&lt;/em&gt; 以及漫画 &lt;em&gt;Pogo&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;接着，&lt;em&gt;Foo&lt;/em&gt; 走进了军事俚语 “FUBAR”（Fucked Up Beyond All Recognition）一词中，合并到词里的 “FU”。在第二次世界大战里盟军飞行员用词汇 “foo fighter” 描述各种各样的 UFO 或者一些神秘的空中现象&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Foo&lt;/em&gt; 第一次在正式的程序类印刷品作为较为人知的词汇出现于 1965 年 TMRC 的一版印刷品，关于紧急开关（scram switches）方面的内容：&lt;/p&gt;
&lt;p&gt;在复杂的模型系统中，一些紧急开关被安装在许多场所附近可以利用的空间里，这些场所有可能会发生突发的不幸事故，如全速前进的火车遇到障碍物。这种模型系统的另一个特性就是调试模拟盘上的数码时钟。当有人按下紧急开关，数码时钟就停止工作，显示屏上亦随之换成 “FOO” 这个词。在 TMRC 里面，紧急开关也因此称作 “Foo开关”（Foo switches）。正因为这样，“foo” 一词录入了 TMRC 语言字典。&lt;/p&gt;
&lt;p&gt;有一本书描述了 MIT（麻省理工学院） 列车室靠门侧的两个分别标上 “foo” 和 “bar” 标签的按钮。在那时期，这两个词通常应用到各种按钮上；当 MIT 的黑客们有新奇想法的时候也会反复使用他们。因此，&lt;em&gt;foo&lt;/em&gt; 和 &lt;em&gt;bar&lt;/em&gt; 被广泛用作变化不定的命名。在 TMRC 语言字典精简版中有这样的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multiflush: stop-all-trains-button. Next best thing to the red door button. Also called FOO. Displays “FOO” on the clock when used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Multiflush（不知道叫啥）：停下所有列车按钮，门边的红色按钮，也叫做 “FOO”，当使用后，时钟上会显示 “FOO”。&lt;/p&gt;
&lt;p&gt;好了，现在终于知道 &lt;em&gt;foo&lt;/em&gt;、&lt;em&gt;bar&lt;/em&gt; 是什么了，简单总结下就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;20 世纪 30 年代，一位美国漫画达人在一尊中国玉雕像上看到一个中国字 – “福” ，然后就将其音译成 “foo”，并应用到他自己的漫画上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;漫画大叔将 “foo” 发扬光大不久，唯恐不乱的军事世界将 “foo” 放到了俚语 “FUBAR” 里面，演变成了 “Foobar”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后 MIT 人才在介绍一项 “complex model system” 的紧急开关中引入了 “foo” 一词，并发表出去，于是乎 MIT 的黑客们一有新奇想法就用 “foo” 一词，并用上了瘾，久而久之大家就对 “foo” 和 “bar” 认识达成了共识&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一句话概括就是：&lt;em&gt;Foo&lt;/em&gt;、&lt;em&gt;Bar&lt;/em&gt; 什么鬼都不是却能代表一切，FUBAR!&lt;/p&gt;
&lt;p&gt;The End&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在 WebKit 看了 CSS 伪类的文章，其中对 &lt;code&gt;:matches()&lt;/code&gt; 的介绍出现了 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;bar&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:matches(.foo, .bar) {
   
    
    </summary>
    
    
      <category term="Foo" scheme="http://aotu.io/tags/Foo/"/>
    
  </entry>
  
  <entry>
    <title>【译】介绍Sass Maps：用法跟例子</title>
    <link href="http://aotu.io/notes/2015/12/09/an-introduction-to-sass-maps/"/>
    <id>http://aotu.io/notes/2015/12/09/an-introduction-to-sass-maps/</id>
    <published>2015-12-09T09:54:16.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/an-introduction-to-sass-maps-usage-and-examples--cms-22184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Introduction to Sass Maps:Usage and Examples&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于前端可伸缩页面的编写来说Sass Maps可以说是一个福音，从逻辑模块中抽取出配置是一种非常好的方法。现在就让我跟你解释为什么我认为在Sass 3.3中Sass Maps是最好的特性。&lt;/p&gt;
&lt;h2 id=&quot;Sass-3-3&quot;&gt;&lt;a href=&quot;#Sass-3-3&quot; class=&quot;headerlink&quot; title=&quot;Sass 3.3&quot;&gt;&lt;/a&gt;Sass 3.3&lt;/h2&gt;&lt;p&gt;Sass 3.3[&lt;em&gt;注1&lt;/em&gt;]即将更新给所有人使用，但是对于很多开发者来说还有很多实用性的特性他们依然不熟悉。新版本的Sass 3.3带给我们新的数据类型称为&lt;code&gt;map&lt;/code&gt;。&lt;code&gt;Maps&lt;/code&gt;是&lt;code&gt;key/value&lt;/code&gt;键值对的集合，能够帮助我们通过简单的代码创建一块配置区域。&lt;/p&gt;
&lt;h2 id=&quot;如何使用-Sass-Maps&quot;&gt;&lt;a href=&quot;#如何使用-Sass-Maps&quot; class=&quot;headerlink&quot; title=&quot;如何使用 Sass Maps&quot;&gt;&lt;/a&gt;如何使用 Sass Maps&lt;/h2&gt;&lt;p&gt;首先我们会覆盖Sass Maps的基本用法，后面会看几个实例。&lt;/p&gt;
&lt;h3 id=&quot;创建一个Map&quot;&gt;&lt;a href=&quot;#创建一个Map&quot; class=&quot;headerlink&quot; title=&quot;创建一个Map&quot;&gt;&lt;/a&gt;创建一个Map&lt;/h3&gt;&lt;p&gt;下面是一个快速创建Sass Maps的语句，创建一个变量（这里用了&lt;code&gt;$map&lt;/code&gt;）然后输入一些&lt;code&gt;keys&lt;/code&gt;跟&lt;code&gt;values&lt;/code&gt;，通过&lt;code&gt;,&lt;/code&gt;来分割，这些键值对通过括号包围起来：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$map: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  key: value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nextkey: nextvalue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何获取Map的值&quot;&gt;&lt;a href=&quot;#如何获取Map的值&quot; class=&quot;headerlink&quot; title=&quot;如何获取Map的值&quot;&gt;&lt;/a&gt;如何获取Map的值&lt;/h3&gt;&lt;p&gt;当你定义了很多对&lt;code&gt;key/value&lt;/code&gt;键值对之后，有时候你需要取出一些值。你可以通过&lt;code&gt;map-get()&lt;/code&gt;方法来找出某个&lt;code&gt;key&lt;/code&gt;的&lt;code&gt;value&lt;/code&gt;。该方法需要传入两个参数：&lt;code&gt;map&lt;/code&gt;的名称还有&lt;code&gt;key&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.element:before &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: map-get($map, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面编译输出后的结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何检查某一个key是否存在&quot;&gt;&lt;a href=&quot;#如何检查某一个key是否存在&quot; class=&quot;headerlink&quot; title=&quot;如何检查某一个key是否存在&quot;&gt;&lt;/a&gt;如何检查某一个key是否存在&lt;/h3&gt;&lt;p&gt;在用&lt;code&gt;Sass&lt;/code&gt;进行编码的时候强烈建议使用&lt;a href=&quot;https://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;可靠的错误处理&lt;/a&gt;。在这里&lt;code&gt;Sass&lt;/code&gt;给了我们一个方法&lt;code&gt;map-has-key()&lt;/code&gt;。这个方法能够检测出某个&lt;code&gt;key&lt;/code&gt;是否存在，如果不存在能够输出其他信息给开发者。&lt;/p&gt;
&lt;p&gt;可以移步 &lt;code&gt;Hugo Giraudel&lt;/code&gt; 写的这篇如何处理错误的文章 &lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Introduction to Error Handing in Sass&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$map: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  key: value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nextkey: nextvalue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; map-has-key($map, key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &lt;span class=&quot;string&quot;&gt;&#39;Map has this key.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; @&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &lt;span class=&quot;string&quot;&gt;&#39;Map has not this key.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译之后结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Map has this key.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何合并Maps&quot;&gt;&lt;a href=&quot;#如何合并Maps&quot; class=&quot;headerlink&quot; title=&quot;如何合并Maps&quot;&gt;&lt;/a&gt;如何合并Maps&lt;/h3&gt;&lt;p&gt;这个一个福利：&lt;code&gt;Sass&lt;/code&gt;允许我们合并两个甚至更多个&lt;code&gt;maps&lt;/code&gt;成一个，这是一个非常实用的功能，通过下面这个例子我们将知道如何使用&lt;code&gt;map-merge()&lt;/code&gt;方法：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$colors: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  light: #ccc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dark: #000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$brand-colors: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  main: red,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alternative: blue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 合并maps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$merged: map-merge($colors, $brand-colors);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: map-get($merged, alternative);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译之后结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;利用Sass-Maps进行实战&quot;&gt;&lt;a href=&quot;#利用Sass-Maps进行实战&quot; class=&quot;headerlink&quot; title=&quot;利用Sass Maps进行实战&quot;&gt;&lt;/a&gt;利用Sass Maps进行实战&lt;/h2&gt;&lt;p&gt;上面我们介绍了如何实用&lt;code&gt;Sass Maps&lt;/code&gt;，现在我们将通过一些实战训练看看在哪些地方适合使用该特性。&lt;/p&gt;
&lt;p&gt;1.如何循环Map生成类&lt;/p&gt;
&lt;p&gt;你可以遍历&lt;code&gt;map&lt;/code&gt;通过里面的&lt;code&gt;values&lt;/code&gt;去定义你需要的变量然后加到&lt;code&gt;map&lt;/code&gt;里面的&lt;code&gt;name&lt;/code&gt;去，这样子你可以创建出很多种&lt;code&gt;values&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在下面的例子中我将输出&lt;code&gt;classes&lt;/code&gt;来展示&lt;code&gt;icons&lt;/code&gt;。我将&lt;code&gt;icon&lt;/code&gt;的&lt;code&gt;name&lt;/code&gt;作为&lt;code&gt;key&lt;/code&gt;，让&lt;code&gt;value&lt;/code&gt;去替代实际的&lt;code&gt;content&lt;/code&gt;(通过伪元素加进去)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在项目实战中我们通过会先声明一些基础的样式，这不在本教程的范围内。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* 定义一个sass map名称为$icons */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$icons: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  checkmark: a,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  plus: b,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  minus: c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 遍历map的所有key，创建各自的类 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@each $name, $value in $icons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .icon--#&amp;#123;$name&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: $value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译之后结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 遍历map的所有key，创建各自的类 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.icon--checkmark&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.icon--plus&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.icon--minus&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一种非常高效的方法来输出icons的所有类，还有大量情况也会使用这种方法。&lt;/p&gt;
&lt;p&gt;2.如何拿出Maps的多个值&lt;/p&gt;
&lt;p&gt;让我们继续，给一个&lt;code&gt;key&lt;/code&gt;赋予多个&lt;code&gt;value&lt;/code&gt;也是可以的。多个&lt;code&gt;value&lt;/code&gt;之间通过&lt;code&gt;,&lt;/code&gt;来分割。下面的例子能够非常好的输出不同模块的样式。&lt;/p&gt;
&lt;p&gt;这里我将定义一系列&lt;code&gt;buttons&lt;/code&gt;，每一个&lt;code&gt;key&lt;/code&gt;的第一个&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;background-color&lt;/code&gt;，第二个&lt;code&gt;value&lt;/code&gt;是&lt;code&gt;font-color&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后我将通遍历&lt;code&gt;keys&lt;/code&gt;赋值给&lt;code&gt;$colors&lt;/code&gt;对象。通过&lt;code&gt;nth($colors,1)&lt;/code&gt;（第一个参数是对象的名称，第二个参数是值得位置）拿到第一个&lt;code&gt;key&lt;/code&gt;。如果你需要拿第二个&lt;code&gt;value&lt;/code&gt;，那将第二个参数改为&lt;code&gt;2&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// _m-buttons.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$buttons: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  error: (#d82d2d, #666),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  success: (#52bf4a, #fff),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warning: (#c23435, #fff)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.m-button &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  display: inling-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  padding: .5em;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background: #ccc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: #666;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @each $name, $colors in $buttons &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $bgcolor: nth($colors, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $fontcolor: nth($colors, 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;--#&amp;#123;$name&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      background-color: $bgcolor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      color: $fontcolor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译之后结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.m-button&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;5em&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.m-button--error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#d82d2d&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.m-button--success&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#52bf4a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.m-button--warning&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#c23435&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.处理层(z-index)&lt;/p&gt;
&lt;p&gt;在某种程度上来说，我还没有见过不跟&lt;a href=&quot;https://webdesign.tutsplus.com/articles/what-you-may-not-know-about-the-z-index-property--webdesign-16892&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;z-index&lt;/a&gt;打交道的前端开发。当你在项目中多个地方需要使用到&lt;code&gt;z-index&lt;/code&gt;的时候问题通常随之而来，&lt;code&gt;Sass maps&lt;/code&gt;能够帮我们解决这些问题。&lt;/p&gt;
&lt;p&gt;首先我们定义了一个map名称为&lt;code&gt;$layer&lt;/code&gt;，所有的&lt;code&gt;key&lt;/code&gt;都应该合理命名以便我们能够知道哪个value是对应哪个element的-比如：&lt;code&gt;offcanvas&lt;/code&gt;,&lt;code&gt;lightbox&lt;/code&gt;,&lt;code&gt;dropdown&lt;/code&gt;等。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// _config.scss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$layer: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  offcanvas: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lightbox: &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dropdown: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tooltip: &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// _m-lightboxes.scss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; map-has-key($layer, $name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map-get($layer, $name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @warn &lt;span class=&quot;string&quot;&gt;&quot;The key #&amp;#123;$name&amp;#125; is not in the map &#39;$layer&#39;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.m-lightbox &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  z-index: layer(lightbox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面我定义了一个方法用来获取特定&lt;code&gt;key&lt;/code&gt;的&lt;code&gt;value&lt;/code&gt;，但为什么我要这样做？理由很简单：这样子比每次都写&lt;code&gt;map-get()&lt;/code&gt;方法要方便快捷。另外一个方面就是你可以创建&lt;code&gt;错误处理&lt;/code&gt;给开发者一些错误信息当没有输出期望的信息的时候。&lt;/p&gt;
&lt;p&gt;编译结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.m-lightbox&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;z-index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.在项目中为字体创建基本样式&lt;/p&gt;
&lt;p&gt;每一个项目都拥有自己的配置文件，用来给全局使用。例如在我的项目中我会定义一些字体属性：字体颜色，可选的字体颜色，字体集或者字体大小。我通常都会为每个属性创建一个变量，但是&lt;code&gt;map&lt;/code&gt;能够做得更好。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子，先从&lt;em&gt;旧&lt;/em&gt;的解决方法开始：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$base-font-color: #666;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$base-font-family: Arial, Heletica, Sans-Serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$base-font-size: 16px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$base-line-height: 1.4;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来看通过&lt;code&gt;Sass Map&lt;/code&gt;写的&lt;code&gt;新&lt;/code&gt;的解决方法：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// _config.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$font: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: #666;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  family: (Arial, Helvetica),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  size: 16px,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  line-height: 1.4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// _presets.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: map-get($font, color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  font-family: map-get($font, family);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  font-size: map-get($font, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  line-height: map-get($font, line-height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.Breakpoints &amp;lt; 3&lt;/p&gt;
&lt;p&gt;我很喜欢这个使用案例。在你的整个项目中拥有一块专门用来处理断点是非常好的。所以，像这一节中关于处理&lt;code&gt;z-index&lt;/code&gt;，你就已经用到了断点。当你改变值得时候，整个项目的行为也随之改变，这多么令人惊讶。&lt;/p&gt;
&lt;p&gt;那就先让我们通过一个&lt;code&gt;map&lt;/code&gt;名称为&lt;code&gt;$breakpoints&lt;/code&gt;开始吧。&lt;/p&gt;
&lt;p&gt;我们的目标就是在一个元素中使用断点通过易懂的名字替代那些&lt;code&gt;pixel&lt;/code&gt;值，所以需要一个&lt;code&gt;mixin&lt;/code&gt;方法来实现占位&lt;code&gt;name&lt;/code&gt;，我把mixin命名为&lt;code&gt;respond-to&lt;/code&gt;以及传入&lt;code&gt;$brakpoint&lt;/code&gt;参数。通过&lt;code&gt;$value&lt;/code&gt;我就能得到期望的断点然后后面在&lt;code&gt;媒体查询&lt;/code&gt;中使用。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Map with much breakpoints&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$breakpoints: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  small: &lt;span class=&quot;number&quot;&gt;320&lt;/span&gt;px,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  medium: &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;px,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  large: &lt;span class=&quot;number&quot;&gt;768&lt;/span&gt;px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Respond-To Mixin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@mixin respond-to($breakpoint) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; map-has-key($breakpoints, $breakpoint) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $value: map-get($breakpoints, $breakpoint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @media screen and (min-width: $value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @warning &lt;span class=&quot;string&quot;&gt;&quot;Unknown `#&amp;#123;$breakpoint&amp;#125;` in $breakpoints&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Sass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.m-tabs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-color: #f2f2f2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @include reponse-to(medium) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: #666;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.m-tabs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-color: #f2f2f2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (min-width: 600px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background-color: #666;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种使用案例是我最喜欢之一！&lt;/p&gt;
&lt;p&gt;6.颜色的高级使用&lt;/p&gt;
&lt;p&gt;现在事情变得有一点点困难了，让我们看看通过不同色调定义的颜色计划。&lt;/p&gt;
&lt;p&gt;我们的&lt;code&gt;Sass map&lt;/code&gt;在这个例子中定义了一个&lt;code&gt;$colorscheme&lt;/code&gt;同时里面定义了很多对象拥有&lt;code&gt;keys&lt;/code&gt;跟&lt;code&gt;values&lt;/code&gt;。项目中拥有不同的灰色调，但我们不想为每一个都声明一个变量。所以我们增加了一个对象&lt;code&gt;gray&lt;/code&gt;，然后通过键值对分割。&lt;/p&gt;
&lt;p&gt;下面开始这个Map:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Scheme of colors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$colorscheme: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gray: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base: #ccc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    light: #f2f2f2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dark: #666&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  brown: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base: #ab906b,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    light: #ecdac3,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dark: #5e421c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在让我们加入&lt;code&gt;setcolor&lt;/code&gt;方法来获取颜色的不同选择。第一个参数是Sass map的对象(&lt;code&gt;$scheme&lt;/code&gt;)-在这个例子中可能是&lt;code&gt;gray&lt;/code&gt;或者&lt;code&gt;brown&lt;/code&gt;，第二个参数就是你想要的颜色(&lt;code&gt;$tone&lt;/code&gt;)，默认值是&lt;code&gt;base&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setcolor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$scheme, $tone: base&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map-get(map-get($colorscheme, $scheme), $tone);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，这里给出了一个例子能够让你从这个map中获取不同颜色，比你想象中的还要简单（也许）！&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Sass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: setcolor(brown);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element--light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: setcolor(brown, light);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: #ab906b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.element--light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  color: #ecdac3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会完成上面的挑战的，现在你能够创建一组色调而不需要通过为每一种颜色创建一个变量。&lt;/p&gt;
&lt;p&gt;这个方法我是受到了&lt;a href=&quot;http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tom Davies&lt;/a&gt;的启发，同时我也建议你看看他这篇文章。&lt;/p&gt;
&lt;h2 id=&quot;通过Classes定制主题&quot;&gt;&lt;a href=&quot;#通过Classes定制主题&quot; class=&quot;headerlink&quot; title=&quot;通过Classes定制主题&quot;&gt;&lt;/a&gt;通过Classes定制主题&lt;/h2&gt;&lt;p&gt;这是为高级Sass用户准备的。在项目中会经常需要通过一些基础代码创建多套主题，所以这里给出一个建议：在文档的最开始就定义一个 &lt;em&gt;主题类&lt;/em&gt; 来满足特定的工作。我们需要一个对象以便能够处理不同名字的主题，同时给出不同的样式模块。&lt;/p&gt;
&lt;h3 id=&quot;定义themes&quot;&gt;&lt;a href=&quot;#定义themes&quot; class=&quot;headerlink&quot; title=&quot;定义themes&quot;&gt;&lt;/a&gt;定义themes&lt;/h3&gt;&lt;p&gt;最开始，在你的项目中通过Sass map全局定义themes，&lt;code&gt;value&lt;/code&gt;就是主题名字，同时这个类必须附在&lt;code&gt;body&lt;/code&gt;元素。在这个例子中我创建了一个map&lt;code&gt;$themes&lt;/code&gt;，里面有两个主题：&lt;code&gt;theme-light&lt;/code&gt;和&lt;code&gt;theme-dark&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// _config.scss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$themes: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  theme1: theme-light;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  theme2: theme-dark;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取值（捷径）&quot;&gt;&lt;a href=&quot;#获取值（捷径）&quot; class=&quot;headerlink&quot; title=&quot;获取值（捷径）&quot;&gt;&lt;/a&gt;获取值（捷径）&lt;/h3&gt;&lt;p&gt;现在我们需要一个方法来快速获取模块的值，这是一个简单的方法包括三个变量如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$map&lt;/code&gt;: 定义map的名字确定values是从哪里来的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$object&lt;/code&gt;: 在这里例子中就是theme的key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$style&lt;/code&gt;: 需要的样式属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// _functions.scss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setStyle&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$map, $object, $style&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; map-has-key($map, $object) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map-get(map-get($map, $object), $style);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @warn &lt;span class=&quot;string&quot;&gt;&quot;The key `#&amp;#123;$object&amp;#125;` is not available in the map.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成模块&quot;&gt;&lt;a href=&quot;#生成模块&quot; class=&quot;headerlink&quot; title=&quot;生成模块&quot;&gt;&lt;/a&gt;生成模块&lt;/h3&gt;&lt;p&gt;现在我们创建新的&lt;code&gt;Sass Map&lt;/code&gt;名称为&lt;code&gt;$config&lt;/code&gt;，每一个主题都是一个对象同时名字必须是&lt;code&gt;$themes&lt;/code&gt;中的&lt;code&gt;key&lt;/code&gt;：不然将会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// _m-buttons.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 1.Config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  theme1: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: #f2f2f2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color: #000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  theme2: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background: #666,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    color: #fff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;遍历主题&quot;&gt;&lt;a href=&quot;#遍历主题&quot; class=&quot;headerlink&quot; title=&quot;遍历主题&quot;&gt;&lt;/a&gt;遍历主题&lt;/h3&gt;&lt;p&gt;最后一部分会使用一点点技巧。开始的地方我们定义了一个模块&lt;code&gt;.m-button&lt;/code&gt;然后我们期望在每个主题下面外观是不一样的。所以我们使用&lt;code&gt;@each&lt;/code&gt;方法遍历Map&lt;code&gt;$themes&lt;/code&gt;拿到&lt;code&gt;$key&lt;/code&gt;跟&lt;code&gt;$value&lt;/code&gt;。遍历之后就能够为不同主题创建map。&lt;/p&gt;
&lt;p&gt;在这一节的开始我提到了&lt;code&gt;keys&lt;/code&gt;在每个map里面必须是一样的(&lt;code&gt;$themes&lt;/code&gt;跟&lt;code&gt;$config&lt;/code&gt;)。因此我们必须检查map&lt;code&gt;$config&lt;/code&gt;的key是否都来自map&lt;code&gt;$themes&lt;/code&gt;，这里使用到了&lt;code&gt;map-has-key()&lt;/code&gt;方法。如果包含了key那就继续往下执行，否则抛出错误给开发者。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// _m-buttons.scss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 2.Base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.m-button &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @each $key, $value in $themes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @if map-has-key($config, $key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .#&amp;#123;$value&amp;#125; &amp;amp; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: setStyle($config, $key, background);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: setStyle($config, $key, color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; @else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @warn &quot;The key `#&amp;#123;$key&amp;#125; isn&#39;t defined in the map $config`&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的代码，让我们看看输出的结果。这是非常好的，保证了配置区域跟模块解耦。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.theme-light&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.m-button&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f2f2f2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.theme-dark&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.m-button&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#666&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后你可以自己试试上面的代码看能不能运行出结果。也许对于你来说这个方案并不是最好的，你会寻求另外的方案，但是我依然希望这能够帮助你维持代码。&lt;/p&gt;
&lt;h2 id=&quot;最后思考&quot;&gt;&lt;a href=&quot;#最后思考&quot; class=&quot;headerlink&quot; title=&quot;最后思考&quot;&gt;&lt;/a&gt;最后思考&lt;/h2&gt;&lt;p&gt;在我看来 &lt;code&gt;Sass Maps&lt;/code&gt;是Sass 3.3最值得介绍的特性。理由是我认为它给出了非常好的方式来创建健壮的结构，这只需要少量的配置。Sass maps使得我们可以在不影响整个项目的基础逻辑代码基础上改变值。开始使用它吧，你的伙伴将会感激你！&lt;/p&gt;
&lt;p&gt;如果你已经开始使用&lt;code&gt;Sass maps&lt;/code&gt;了，让我知道你如何在你的项目中使用它！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注1: 截至译文的Sass最新版本是3.4.19&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/an-introduction-to-sass-maps-usage-and-examples--cms-22184&quot;&gt;An Introduction to Sass Maps:Usage and Examples&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="sass" scheme="http://aotu.io/tags/sass/"/>
    
      <category term="sass maps" scheme="http://aotu.io/tags/sass-maps/"/>
    
  </entry>
  
  <entry>
    <title>Adobe edge animate制作HTML5动画</title>
    <link href="http://aotu.io/notes/2015/12/04/edgeAnimate/"/>
    <id>http://aotu.io/notes/2015/12/04/edgeAnimate/</id>
    <published>2015-12-03T22:05:18.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;Edge Animate是Adobe出品的制作HTML5动画的可视化工具，简单的可以理解为HTML5版本的Flash Pro。Adobe Edge Animate的目的是帮助专业设计师制作网页动画乃至简单游戏。目前该工具的重点放在动画引擎上，将增加更多HTML5功能，比如Canvas、HTML5音频/视频标签等。支持Android、iOS、webOS、黑莓PlayBook、Firefox、Chrome、Safari和IE9等各个平台。&lt;/p&gt;
&lt;p&gt;Edge Animate主要使用HTML5,CSS3和JavaScript。HTML5是其用于创建的doctype，2D的transform，translate，rotate，scale，skew等特效都是渲染为CSS3，如果是最新版本的浏览器，可以操作纯粹的CSS3，如果是主流大众浏览器，Edge Animate则会通过JavaScript库的配合来保证HTML和CSS的显示兼容性。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Adobe-edge-animate-CC功能&quot;&gt;&lt;a href=&quot;#Adobe-edge-animate-CC功能&quot; class=&quot;headerlink&quot; title=&quot;Adobe edge animate CC功能&quot;&gt;&lt;/a&gt;Adobe edge animate CC功能&lt;/h2&gt;&lt;p&gt;1.精确的动画。&lt;br&gt;2.直觉化的使用者界面。&lt;br&gt;3.绘图和文字工具。&lt;br&gt;4.移动路径。&lt;br&gt;5.可重复使用的符号。&lt;br&gt;6.兼容性比较不错，android机也表现良好。&lt;br&gt;单一使用做html5 css3动画，带来了巨大的福音。&lt;/p&gt;
&lt;h2 id=&quot;Adobe-edge-animate-CC缺点&quot;&gt;&lt;a href=&quot;#Adobe-edge-animate-CC缺点&quot; class=&quot;headerlink&quot; title=&quot;Adobe edge animate CC缺点&quot;&gt;&lt;/a&gt;Adobe edge animate CC缺点&lt;/h2&gt;&lt;p&gt;1.不太适合，做复杂的动画与游戏，适用场景狭窄。&lt;br&gt;2.操作比较适合设计师，不适合程序员，操作效率不高，调节不是特别可控。&lt;br&gt;3.采用html5 css3相关的动画，频繁产生重排导致效率低下。&lt;br&gt;4.动画元素层级绝对定位，后期维护增加元素，层级覆盖影响较大。&lt;br&gt;5.比较适合pc端动画制作，移动端需要进行二次转换，scale进行缩放已达到多屏适配的问题。&lt;/p&gt;
&lt;h2 id=&quot;Adobe-edge-animate下载地址&quot;&gt;&lt;a href=&quot;#Adobe-edge-animate下载地址&quot; class=&quot;headerlink&quot; title=&quot;Adobe edge animate下载地址&quot;&gt;&lt;/a&gt;Adobe edge animate下载地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mac 环境下下载&lt;/a&gt;  &amp;nbsp;&amp;nbsp;   &lt;a href=&quot;http://example.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;window 环境下下载&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;在开始玩Edge Animate前，你可能有个顾虑，就是Edge Animate如果要做交互动画，生成的内容是否会打破已有的HTML文件代码结构？答案是不会。通过Edge Animate生成的HTML代码少之又少，几乎都可以用下面的代码表达方式来概述：&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=”Stage” &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=”EDGE-xxxxxxxxxx”&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Edge Animate使用JSON来存储元素的定义和属性。相关的动画内容则会全部以代码块的形式嵌入上面的div中，修改和删除都不会影响原有的HTML项目代码，对HTML中元素的操作都通过JSON对象和引入的JavaScript来完成。但是有一点，edge动画对html元素的动画操作，会导致浏览器频繁重排，降低效率。&lt;/p&gt;
&lt;p&gt;创建edge animation 工程&lt;br&gt;启动Edge Animate，创建一个新项目ctrl＋N/command+N。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/1.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;设定Stage（舞台）宽度为640px, 高度为1136px。Ctrl+S保存为demo.html。打开我们保存的项目目录，一个标准的Edge Animate项目是由一系列html,css,js和相关资源文件组成的。如下图所示：&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/2.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;1)Edge Animate的工程文件: .an 格式文件更像一个空壳文件或者索引文件，标明了项目的必要信息。你可以使用记事本打开.an文件了解其中具体内容。&lt;br&gt;2)edge_includes目录：该目录下是Edge制作的html5所依赖的JS类库：edge.6.0.0.min.js 115kb,还是蛮大的。(之前的版本有依赖jquery，再5.0之后就去掉了，产生了自有库，写法参展jquery)。&lt;br&gt;3)其他.js文件：诸如demo1_edgeActions.js，demo1_edge.js等js文件是专门针对当前动画所生成js文件。&lt;br&gt;4).html文件：主html文件。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Edge Animate的工具界面默认情况下包含了7个Window面板，均可以通过菜单的Window选项开启和关闭，分别是Tools工具，Properties属性，Stage场景，Elements元素，Library库，Timeline时间轴，代码管理和lessons课程。接下来，简单的让大家了解一下，edge animation的属性面包，元素面板，时间轴runtime，代码管理器，这些是我们经常会用到的。&lt;/p&gt;
&lt;p&gt;edge animation 属性面板&lt;br&gt;Adobe Edge Animate的强大之处在于它能获得舞台中元素的标签（即ID）和这个元素样式属性（CSS）的变化，并将这些变化在时间线上以关键帧的形式“标记”。这样必然导致关键帧之间属性值的变化，这个中间阶段会被转化为一个过渡阶段，或者说一段动画（如图片透明度Opacity的变化，淡入淡出、一个元件的移动Location和缩放Scale等等）。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/3.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;edge animation 元素面板&lt;br&gt;Adobe Edge Animate元素面板显示的是节点式的树形结构，表示元素与父元件Stage的联系。这点与ps，flash都比较类似。&lt;br&gt;放置（或堆叠）在上方的元素具有更高的Z-index值，会显示在其他元素（堆叠在下方的元素）上方。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/4.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;edge animation 时间轴runtime&lt;br&gt;Adobe Edge Animate的时间线融合了元素的节点式树状结构和与元素属性关联的关键帧，这些信息显示在时间线左侧，而右侧则显示时间信息表。元素属性值（关键帧）被标记在时间线确切的时间点，当属性值发生改变时，过渡阶段会产生动画。&lt;br&gt;1.动画标签（Label）和触发器（Trigger）：自定义的时间线动画标签和触发器也可以控制舞台中元素动画的状态和处理方法；使用Ctrl/Command + L可以在播放头所在时间点生成一个动画标签，使用Ctrl/Command + T可以在播放头所在时间点放置一个触发器。&lt;br&gt;2.仅显示具有动画的元素（Filter Animated Elements）&lt;br&gt;3.启用时间线吸附功能（Enable Timeline Snapping）：拖动播放头，播放头将会自动吸附到时间点、动画或关键帧等&lt;br&gt;4.启用时间线网格（Enable Timeline Grid）：时间信息表上将会显示时间网格，方便设计者在确切时间点设定关键帧等，网格的大小可用户自定义。&lt;br&gt;5.自动记录关键帧模式（Auto Keyframe Mode（K））：开启模式下，设计者对元素所做的属性值修改都会以关键帧的形式记录在时间线上。&lt;br&gt;6.自动生成动画模式（Auto Transition Mode（X））：开启模式下，在两个关键帧之间会自动生成动画，默认开启。&lt;br&gt;7.播放标记（Toggle Pin（P））：可以设置播放的起始和终止位置。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/5.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;edge animation 代码管理&lt;br&gt;代码管理器使用一个单独完整的窗口界面来展示所有事件控制代码和时间线触发器。（快捷键Ctrl/Command + E或者通过菜单Window-Code打开）所被编辑的控制代码或触发器会被高亮显示。&lt;br&gt;1.点击“+”图标添加全局、局部、时间线控制代码或者触发器；&lt;br&gt;2.点击“Full Code”按钮可以显示并编辑单个文件的全部代码，而不仅仅是单个功能函数内部代码；&lt;br&gt;3.可以通过下方的代码错误提示窗进行错误快速排除检测。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/6.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;实例操作&quot;&gt;&lt;a href=&quot;#实例操作&quot; class=&quot;headerlink&quot; title=&quot;实例操作&quot;&gt;&lt;/a&gt;实例操作&lt;/h2&gt;&lt;p&gt;当我们了解以上这些知识点，之后，我们来做一下简单的实例，实现顶部图片我们所看到的界面，人物跑动，背景向前移动。&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/7.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一部分-使用SpriteSheet在Edge-Animate中制作人物跑动的动画&quot;&gt;&lt;a href=&quot;#第一部分-使用SpriteSheet在Edge-Animate中制作人物跑动的动画&quot; class=&quot;headerlink&quot; title=&quot;第一部分 使用SpriteSheet在Edge Animate中制作人物跑动的动画&quot;&gt;&lt;/a&gt;第一部分 使用SpriteSheet在Edge Animate中制作人物跑动的动画&lt;/h2&gt;&lt;p&gt;1.启动Edge Animate，创建一个新项目blackfriday，设置stage大小为640*1136；&lt;/p&gt;
&lt;p&gt;2.导入blackfriday SpriteSheet　&lt;br&gt;点击菜单“File-&amp;gt;Import”,或者快捷键Ctrl+I / Command+I，来导入blackfriday_sprite.png到舞台。在舞台上选中导入的图片，在左边栏Position and Size栏目下，设定其X坐标值=160px,y坐标值为330px，保证第一个smurf的位置在舞台最左侧并垂直居中。&lt;/p&gt;
&lt;p&gt;3.使用Clip切割Spritesheet，显示单一Sprite元素&lt;br&gt;我们导入的蓝精灵Spritesheet是320*480大小的透明背景png图片，一共描绘了32个蓝精灵行走的姿态。通过序列播放这32个行走姿态，就可以制作一个完整蓝精灵行走动画。&lt;br&gt;首先，要在舞台上只显示一个Sprite元素，比如最左上角的第一个蓝精灵。在Edge Animate左侧属性面板中，倒数第二个栏目是clip子面板。顾名思义，clip功能区可以帮助我们“切割”舞台上的元素，比如图片。该功能区实际上利用了CSS的clip属性。&lt;br&gt;点击clip子面板的开关按钮，可以激活clip功能。使用鼠标，可以在clip属性设定面板上的上、下、左、右属性值上滑动，你可以在舞台上实时看到“切割”的图片情况。如下图。 在本例中，请设定clip的top，right，bottom，left属性值分别为0, 320,480,0。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/8.jpg&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建32个Keyframe，实现行走动作&lt;br&gt;接下来，我们创建32个帧来完成蓝精灵行走的动作。&lt;br&gt;1) 调整帧间隔&lt;br&gt;在舞台下方的时间轴上，Edge Animate用竖线网格标记了每帧间距。在Smurf行走动画中，我们希望在1毫秒的时间左右完成一个行走动作，即32帧。因此，我们需要通过时间轴下方的Gird Size图标调整时间轴为30帧/秒。如下图：&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/9.png&quot;&gt;&lt;/p&gt;
2) 激活“Auto-Keyframe Mode (自动创建帧)”&lt;br&gt;Edge Animate有三个非常重要的按钮分别开启Auto-Keyframe Mode（自动创建关键帧）、Auto-Transition Mode和Toggle Pin（大头针）。图标如下图：&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/10.png&quot;&gt;&lt;/p&gt;
Edge Animate Buttons&lt;br&gt;本例中，我们将启用Auto-Keyframe Mode，而关闭Auto-Transition Mode和Pin。在启用Auto-Keyframe Mode的情况下，每当我们在新的一帧修改舞台中元素的属性，Edge Animate会自动在此创建关键帧。由于我们关闭了Auto-Transition Mode，因此Edge Animate将不会自动在关键帧之间创建过渡效果。&lt;br&gt;3) 创建第一个关键帧&lt;br&gt;在时间轴上，把播放头移到0:00秒位置，选中舞台中的蓝精灵，在左边属性面板中的Image子面板下，确认Background Image的x和y属性值为0，然后点击x和y属性边上的小菱形符号（当鼠标移到该菱形符号时，其变为黄色，并显示tips：“Add Keyframe for Background Position”），此时Edge Animate将在时间轴的0:00秒出创建第一个关键帧。如下图&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/11.jpg&quot;&gt;&lt;/p&gt;
依此方法，在gard线上接着做31个帧。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5。创建完成后，预览：&lt;br&gt;使用快捷键Ctrl+Enter/Command+Enter，可以启动默认浏览器看起运行的效果.&lt;br&gt;现在，人物已经实现了行走动作，但是还没有完成行进，还不循环播放，运行完32个帧就停止了。&lt;/p&gt;
&lt;p&gt;6.转换为元件在最后一帧，设置trigger触发器，达到帧循环动画&lt;br&gt;在舞台上选中该图片后，快捷键Cmd+Y/Ctrl+Y将其转换成一个元件(Symbol)，叫us，然后删除stage舞台上面的元素，从library面板里面拖动stage舞台上面 。双击元件，进入元件舞台区域，如图，insert trigger：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/12.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/13.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二部分-实现背景的滚动&quot;&gt;&lt;a href=&quot;#第二部分-实现背景的滚动&quot; class=&quot;headerlink&quot; title=&quot;第二部分 实现背景的滚动&quot;&gt;&lt;/a&gt;第二部分 实现背景的滚动&lt;/h2&gt;&lt;p&gt;1.倒入背景图片，生成元件&lt;br&gt;快捷键Cmd+I/Ctrl+I导入背景图片american.png，在舞台上选中该图片后，快捷键Cmd+Y/Ctrl+Y将其转换成一个元件(Symbol)，命名为americanbg2。&lt;br&gt;2.激活Auto-Keyframe Mode，Auto-transition Mode，平移背景图片形成单循环的过渡动画。&lt;br&gt;但是当背景向左移出舞台的时候，会看到舞台空出了部分&lt;br&gt;3.实现背景图循环滚动的效果&lt;br&gt;再次向舞台导入元件，命名为americanbg4.拷贝americanbg2的运动动画，到americanbg2左移舞台出现空白的临界点帧时间，给americanbg4粘贴动画效果。因为我们不需要americanbg4整体效果，所以需要删除americanbg4运动帧超出americanbg2运动帧的结束点。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/14.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;4.最后一帧，设置trigger触发器，形成循环动效&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;第三部分-增加音乐，闪烁星空&quot;&gt;&lt;a href=&quot;#第三部分-增加音乐，闪烁星空&quot; class=&quot;headerlink&quot; title=&quot;第三部分 增加音乐，闪烁星空&quot;&gt;&lt;/a&gt;第三部分 增加音乐，闪烁星空&lt;/h2&gt;&lt;p&gt;这一部分，基本参照第一二部分的我们就可以完成整个动画，有一点需要注意设置playback，做初始延迟。&lt;/p&gt;
&lt;h2 id=&quot;第四部分-处理移动端的适配，增加loading&quot;&gt;&lt;a href=&quot;#第四部分-处理移动端的适配，增加loading&quot; class=&quot;headerlink&quot; title=&quot;第四部分 处理移动端的适配，增加loading&quot;&gt;&lt;/a&gt;第四部分 处理移动端的适配，增加loading&lt;/h2&gt;&lt;p&gt;由于这里出来的动画是640x1136px出来的效果，实现多终端预览时，需要做适配处理，这里我是采用scale进行缩放，已到达统一的效果。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement,d=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b=c.getBoundingClientRect().width;s=(&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;&amp;lt;=b?&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;:b)/&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;style id=&quot;scaleCon&quot;&amp;gt;.o2-scale&amp;#123;-webkit-transform: scale(&#39;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&quot;); transform: scale(&quot;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&quot;);-webkit-transform-origin:0% 0%;transform-origin:0% 0%;&amp;#125;&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;);&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;resize&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; e=c.getBoundingClientRect().width;s=(&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;&amp;lt;=e?&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;:e)/&lt;span class=&quot;number&quot;&gt;640&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;scaleCon&quot;&lt;/span&gt;).innerHTML=&lt;span class=&quot;string&quot;&gt;&quot;.o2-scale&amp;#123;-webkit-transform: scale(&quot;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&quot;); transform: scale(&quot;&lt;/span&gt;+s+&lt;span class=&quot;string&quot;&gt;&quot;);-webkit-transform-origin:0% 0%;transform-origin:0% 0%;&amp;#125;&quot;&lt;/span&gt;&amp;#125;)&amp;#125;;d()&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们只需要把class类o2-scale，添加给舞台就可以，完成适配。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pingfan1990.sinaapp.com/jdcase/blackfriday/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo演示效果&lt;/a&gt;&lt;br&gt;手机扫描：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/pfan/edge/15.jpg&quot;&gt;&lt;/p&gt;&lt;br&gt;ios，android亲测，效果还是比较流畅的。&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.adobe.com/devnet-docs/edgeanimate/api/current/index.html#audio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adobe Edge Animate CC 2014 JavaScript API 5.0&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://helpx.adobe.com/edge-animate/how-to/edge-animate-symbols.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adobe Edge Animate 视频教程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Edge Animate是Adobe出品的制作HTML5动画的可视化工具，简单的可以理解为HTML5版本的Flash Pro。Adobe Edge Animate的目的是帮助专业设计师制作网页动画乃至简单游戏。目前该工具的重点放在动画引擎上，将增加更多HTML5功能，比如Canvas、HTML5音频/视频标签等。支持Android、iOS、webOS、黑莓PlayBook、Firefox、Chrome、Safari和IE9等各个平台。&lt;/p&gt;
&lt;p&gt;Edge Animate主要使用HTML5,CSS3和JavaScript。HTML5是其用于创建的doctype，2D的transform，translate，rotate，scale，skew等特效都是渲染为CSS3，如果是最新版本的浏览器，可以操作纯粹的CSS3，如果是主流大众浏览器，Edge Animate则会通过JavaScript库的配合来保证HTML和CSS的显示兼容性。&lt;br&gt;
    
    </summary>
    
    
      <category term="edge animate" scheme="http://aotu.io/tags/edge-animate/"/>
    
      <category term="html5" scheme="http://aotu.io/tags/html5/"/>
    
      <category term="animate" scheme="http://aotu.io/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>使用ThreeJS在浏览器中展示3D物件</title>
    <link href="http://aotu.io/notes/2015/11/24/3D-CleaningCream/"/>
    <id>http://aotu.io/notes/2015/11/24/3D-CleaningCream/</id>
    <published>2015-11-24T13:00:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;这是一篇介绍如何在浏览器中展示&lt;del style=&quot;background-color: #333!important;color: #333 !important;&quot;&gt;洗面奶&lt;/del&gt;3D物件的文章。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这篇文章仅仅是向你介绍应对下面这种的场景的方法：如果有人突然跟你说，你的皮肤挺不错的耶，你用的什么洗面奶，我也想买一个，你会怎么回答呢？手头又没法拿出你的洗面奶给他看，光凭言语无法准确地形容出你的洗面奶到底长什么样。作为前端的程序猿，我会想，这种时候如果可以有一个链接让对方自己去看一下把玩一下，对方势必会对你的洗面奶&lt;del style=&quot;background-color: #333!important;color: #333 !important;&quot;&gt;高Bigger&lt;/del&gt;有更深刻的认识。本文的目的，就是向屏幕对面的程序猿介绍这种高效&lt;del style=&quot;background-color: #333!important;color: #333 !important;&quot;&gt;搞笑&lt;/del&gt;的方式。&lt;/p&gt;
&lt;h3 id=&quot;走进3D的世界&quot;&gt;&lt;a href=&quot;#走进3D的世界&quot; class=&quot;headerlink&quot; title=&quot;走进3D的世界&quot;&gt;&lt;/a&gt;走进3D的世界&lt;/h3&gt;&lt;p&gt;在页面里面放几个图片是完全无法满足让观看者自己看自己把玩的要求的。所以这里我们将会使用3D的形式来展现我们的洗面奶。老话说得好，同样是山，却有横看成岭侧成峰的不同。比起2D渲染，3D渲染多了一个维度，由于透视效果，物体遮挡、光照角度、光的反射折射等的存在，观看者在不同的角度观看会得到不同的结果。&lt;/p&gt;
&lt;p&gt;在浏览器里面，CSS3提供了3D变换的相关属性，但对于光照相关的需求却是无能为力。而使用Canvas进行绘制的话，如果不依赖封装好的图形库，进行图形变换又是相当麻烦的事情。就算是在CSS中一个简单的2D旋转或者是放大，在Canvas的像素操作中，我们还需要通过矩阵计算才能知道变换后每个像素的位置。正因如此，图形库出现了。&lt;/p&gt;
&lt;p&gt;说到图形库，我们不得不提到&lt;a href=&quot;http://www.opengl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenGL&lt;/a&gt;。OpenGL是一个跨平台的图形编程规范，定义了2D与3D绘制中所需要各种接口，进行图形绘制中所需要的变换，纹理映射，光照等。OpenGL定义的接口很多是为硬件加速设计的。有了各大硬件厂商的支持，OpenGL的渲染效率比起软件渲染高了不止一点点。同时，OpenGL不局限于某平台或者是语言，它只是一个关于图形渲染的规范，对外提供关于图形渲染的各种接口，所以有许多的语言绑定，而在浏览器中用到的是Javascript的绑定WebGL。&lt;/p&gt;
&lt;h3 id=&quot;ThreeJS&quot;&gt;&lt;a href=&quot;#ThreeJS&quot; class=&quot;headerlink&quot; title=&quot;ThreeJS&quot;&gt;&lt;/a&gt;ThreeJS&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://threejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThreeJS&lt;/a&gt;是一款在浏览器中进行3D绘制的Javascript库，为使用canvas绘制，WebGL渲染等图形操作提供了简便的API。到底有多简便？在&lt;a href=&quot;http://www.pixijs.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PixiJS&lt;/a&gt;等2D绘制库中，我们需要场景+物件+贴图来搞定一张图，而在ThreeJS中我们只需要在这基础上额外添加适当光照与一台照相机而已，下面是一个最简单的Demo，绘制了一个旋转的绿色立方体。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scene = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Scene();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建场景*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; camera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.PerspectiveCamera( &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth/&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建照相机*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; renderer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.WebGLRenderer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建渲染器*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setSize( &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth, &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild( renderer.domElement );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; geometry = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.BoxGeometry( &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建几何模型*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; material = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.MeshBasicMaterial( &amp;#123; color: &lt;span class=&quot;number&quot;&gt;0x00ff00&lt;/span&gt; &amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建材质*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cube = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Mesh( geometry, material );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*几何模型与材质合成为物件*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scene.add( cube );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*将物件添加入场景*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;camera.position.z = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; render = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	requestAnimationFrame( render );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cube.rotation.x += &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cube.rotation.y += &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renderer.render(scene, camera);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*渲染出在相机camera中看到的scene场景*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;画出来就像这样子：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/rollingCube.png&quot; alt=&quot;旋转立方体&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;ThreeJS中提供了少量基础的几何模型，如长方体(Box3)，球体(Sphere)等，但面对我们要实现的洗面奶还是太小儿科了。这是不是说明我们的洗面奶没办法做了？文章都写到这里了，办法肯定是有的。ThreeJS提供了加载外部模型的模块(Loader)，可以加载外部的Obj，json等格式的模型。另外，ThreeJS的&lt;a href=&quot;https://github.com/mrdoob/three.js/tree/master/utils/exporters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github仓库&lt;/a&gt;中还提供了在3ds Max、Blender等3D绘制软件中导出模型的工具。是的，我们就可以用别的3D建模软件建模再导出成ThreeJS所需要的格式了。&lt;/p&gt;
&lt;h3 id=&quot;动手&quot;&gt;&lt;a href=&quot;#动手&quot; class=&quot;headerlink&quot; title=&quot;动手&quot;&gt;&lt;/a&gt;动手&lt;/h3&gt;&lt;p&gt;我们这里使用的是建模工具是Blender。我们需要先拍下物体的三视图作为建模的参考。导入Blender后，依据三视图，我们很快就可以建出洗面奶的模型。&lt;/p&gt;
&lt;p&gt;模型的样子&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/modeling.png&quot; alt=&quot;建模&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在Blender中加上ThreeJS的插件之后，我们可以在Blender的文件菜单中见到Export/Three.js(.json)选项。点击之后，选择导出的目录，然后记得在左下角勾上我们要导出的元素。在这个例子中，我们需要导出的是Scene，也就是场景本身。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/exporting.jpg&quot; alt=&quot;导出菜单&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在ThreeJS中进行导入的操作也十分简单。ThreeJS中提供了许多种类的Loader，分别针对不同的使用需求。比如，JSONLoader针对的是.json格式的模型，OBJLoader针对的是.obj格式的模型等等。翻阅网上资料的时候还可以看到SceneLoader的踪影，这就是用来加载整个场景的.json格式文件的。可是在ThreeJS的新版本中，SceneLoader已经被废弃，取而代之的是更为牛叉更为智能的ObjectLoader。ObjectLoader可以判断导出的模型到底是什么种类，从而将它们转化为ThreeJS中的对应对象便于开发者使用。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们导出的.json文件中包含的是场景本身。所以，除了需要添加部分ObjectLoader的代码，其余部分的代码甚至比上面那个例子还要简单：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scene,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	camera,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renderer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	loader,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	wid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	hei,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	animate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;animate = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renderer.render(scene, camera);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	requestAnimationFrame(animate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wid = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hei = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;camera = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.PerspectiveCamera(&lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;, wid / hei, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建照相机*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;camera.position.set(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;camera.lookAt(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.Vector3(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.WebGLRenderer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;renderer.setSize(wid, hei);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.ObjectLoader();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*创建ObjectLoader*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(renderer.domElement);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loader.load(&lt;span class=&quot;string&quot;&gt;&#39;objs/object.json&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;_sce&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	scene = _sce;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	scene.add(camera);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	animate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*加载Scene，成功后执行回调开始动画*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;浏览器中一看，却不太对劲。形状对了，可是颜色呢？高端黑的洗面奶怎么就变成这么山寨的颜色了，而且每次刷新都变颜色。活了二十几年，小便表示还真没见到过这样的洗面奶。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/neverseen.png&quot; alt=&quot;跑马灯&quot;&gt;&lt;/p&gt;
&lt;p&gt;出现这种情况，毫无疑问是材质的问题。原来我们在建模软件中还没给洗面奶加过材质，所以ThreeJS加载完我们的.json文件后，发现只有模型却没有材质，就给模型加上了一个随机颜色的材质。解决办法也很简单，在ThreeJS中手动贴上贴图就好了。而更简单且有效的办法是，在建模软件中上好贴图再一起导出。&lt;/p&gt;
&lt;p&gt;回到Blender中，将洗面奶的表面进行UV展开后导出展开图后，我们新建一张图片，将我们要贴的图放到展开图上的相应位置，再回到Blender中将这张新的图片设为瓶身的材质。渲染一下，检查到效果无误后，将模型导出。这次要记得将左下角的Materials勾上，另外还需要勾上texture的复选框。&lt;/p&gt;
&lt;p&gt;将这次导出的模型放到先前的目录下，我们会发现，浏览器中并没有出现想象中的场景。在控制台中可以看到，由于我们没有将贴图一起放到一个目录下，贴图加载失败了。按照要求放好后，我们会更惊奇地发现，浏览器中除了一片黑，什么都没有。这是为什么呢？&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/dark.png&quot; alt=&quot;一片黑&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;神说要有光，所以就有了光。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在3D的世界中，光是非常重要的存在。我们之所以能看见物体，都是因为有光进入了我们的眼球。除去本身会发光的物体，我们能看见的其他的物体，都是因为这些物体将外界的光反射后进入我们眼球了。换句话说，没有光的话我们就什么都看不到。&lt;/p&gt;
&lt;p&gt;在ThreeJS中也是如此。如果没有光，我们就看不到自发光以外的材质，视野中将是一片黑。在ThreeJS中，光照也有很多种：全局光照(AmbientLight),有向光(DirectionalLight)，点光源(PointLight)等。在这个例子中，为了360观看整个物体，我们添加一个全局光照。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; light = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; THREE.AmbientLight( &lt;span class=&quot;number&quot;&gt;0xffffff&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scene.add( light );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再刷新一下，就可以看见我们的洗面奶了。大功告成!&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Littly/completed.png&quot; alt=&quot;成功~&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;进行3D建模，将物体在浏览器中展示，目前已经有了不少的应用，有的公司在宣传新产品的时候会使用上这样的技术，让消费者可以在浏览器中亲自把玩产品，观察产品的每个小角落，起到了不错的效果。同样的技术并不只是在展示商品的时候能用上。将适当的全景图贴在立方体的内表面，用户视角置于立方体中心点的话，还可以让用户有置身其境的感觉，可以上下左右转动视角观察一个地点周围的景象，做出街景的效果。可以说，浏览器中的3D技术将会有越来越多的用武之地。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇介绍如何在浏览器中展示&lt;del style=&quot;background-color: #333!important;color: #333 !important;&quot;&gt;洗面奶&lt;/del&gt;3D物件的文章。&lt;br&gt;
    
    </summary>
    
    
      <category term="three.js" scheme="http://aotu.io/tags/three-js/"/>
    
  </entry>
  
  <entry>
    <title>精致化页面重构</title>
    <link href="http://aotu.io/notes/2015/11/24/project-summary/"/>
    <id>http://aotu.io/notes/2015/11/24/project-summary/</id>
    <published>2015-11-23T20:23:44.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-布局方式&quot;&gt;&lt;a href=&quot;#一-布局方式&quot; class=&quot;headerlink&quot; title=&quot;一 布局方式&quot;&gt;&lt;/a&gt;一 布局方式&lt;/h2&gt;&lt;p&gt;作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。&lt;br&gt;移动端页面常规布局基本分两种：&lt;/p&gt;
&lt;h3 id=&quot;1-流式布局（响应式宽度自适应布局）&quot;&gt;&lt;a href=&quot;#1-流式布局（响应式宽度自适应布局）&quot; class=&quot;headerlink&quot; title=&quot;1. 流式布局（响应式宽度自适应布局）&quot;&gt;&lt;/a&gt;1. 流式布局（响应式宽度自适应布局）&lt;/h3&gt;&lt;p&gt;这是普遍使用的方法，流式布局使用这个标签即可自适应所有尺寸的屏幕。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：响应式、简单、兼容好。&lt;br&gt;缺点：非设计稿尺寸屏幕展现效果可能不是很理想。&lt;/p&gt;
&lt;h3 id=&quot;2-版式布局（页面等比缩放布局）&quot;&gt;&lt;a href=&quot;#2-版式布局（页面等比缩放布局）&quot; class=&quot;headerlink&quot; title=&quot;2. 版式布局（页面等比缩放布局）&quot;&gt;&lt;/a&gt;2. 版式布局（页面等比缩放布局）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;可行方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面使用 REM 作为页面数值单位运算。&lt;/li&gt;
&lt;li&gt;通过 zoom/scale 整体缩放页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点：页面等比缩放，比例与设计稿一致。&lt;br&gt;缺点：大屏手机等比放大后的体验可能不佳。&lt;/p&gt;
&lt;h3 id=&quot;结论：&quot;&gt;&lt;a href=&quot;#结论：&quot; class=&quot;headerlink&quot; title=&quot;结论：&quot;&gt;&lt;/a&gt;结论：&lt;/h3&gt;&lt;p&gt;两种布局方式各有优劣，项目最终选用流式布局，原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部分页面还是与现有项目模块共用，版式布局改动成本偏高，不好维护。&lt;/li&gt;
&lt;li&gt;考虑到页面在大屏手机等比放大后的体验可能不佳。&lt;/li&gt;
&lt;li&gt;流式布局可以针对大屏手机做一些更灵活的排版（配合媒体查询），达到更好的用户体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;二-设计规范&quot;&gt;&lt;a href=&quot;#二-设计规范&quot; class=&quot;headerlink&quot; title=&quot;二 设计规范&quot;&gt;&lt;/a&gt;二 设计规范&lt;/h2&gt;&lt;p&gt;设计规范也是重要元素之一，条件允许情况下，从开发前期就需要跟设计师达成共识制定了一套设计规范。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计规范需要包括：&lt;/strong&gt;&lt;br&gt;页面背景色、文字颜色、边框颜色、各种按钮样式、图标等等全局通用样式。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/liqinuo/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然除了前期到设计规范，开发过程中这边也需要分离出一些可复用的组件、公共样式，包括：&lt;br&gt;公共底部、商品组模块、轮播组件等等。&lt;/p&gt;
&lt;h2 id=&quot;三-技巧&quot;&gt;&lt;a href=&quot;#三-技巧&quot; class=&quot;headerlink&quot; title=&quot;三 技巧&quot;&gt;&lt;/a&gt;三 技巧&lt;/h2&gt;&lt;h3 id=&quot;1-还原设计稿的-0-5px&quot;&gt;&lt;a href=&quot;#1-还原设计稿的-0-5px&quot; class=&quot;headerlink&quot; title=&quot;1. 还原设计稿的 0.5px&quot;&gt;&lt;/a&gt;1. 还原设计稿的 0.5px&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 2014 年的 WWDC，“设计响应的 Web 体验” 一讲中，Ted O’Connor 讲到关于“retina hairlines”（retina 极细的线）：在 retina 屏上仅仅显示 1 物理像素的边框。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单点说就是：在 Retina 屏的设备上，1px 其实相当于  2 个物理像素，所以 1 个物理像素 = 0.5px。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/liqinuo/2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;实现 0.5px 有很多种方法，这里比较一下各种处理的优缺点：&lt;/p&gt;
&lt;h4 id=&quot;1-iOS8-以上支持-0-5px&quot;&gt;&lt;a href=&quot;#1-iOS8-以上支持-0-5px&quot; class=&quot;headerlink&quot; title=&quot;1. iOS8 以上支持 0.5px&quot;&gt;&lt;/a&gt;1. iOS8 以上支持 0.5px&lt;/h4&gt;&lt;p&gt;实现原理：常规属性。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.border&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.5px&lt;/span&gt; solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优点：原生、简单、常规写法。&lt;br&gt;缺点：目前只有 iOS8 以上系统才能支持，iOS7及以下、安卓系统都显示为 0px，可以通过脚本判断系统然后区分处理。&lt;/p&gt;
&lt;h4 id=&quot;2-CSS-渐变模拟&quot;&gt;&lt;a href=&quot;#2-CSS-渐变模拟&quot; class=&quot;headerlink&quot; title=&quot;2. CSS 渐变模拟&quot;&gt;&lt;/a&gt;2. CSS 渐变模拟&lt;/h4&gt;&lt;p&gt;实现原理：设置 1px 通过 css 实现的背景图片，50%有颜色，50%透明。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.border&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;linear-gradient&lt;/span&gt;(180deg, red, red 50%, transparent 50%), &lt;span class=&quot;built_in&quot;&gt;linear-gradient&lt;/span&gt;(270deg, red, red 50%, transparent 50%), &lt;span class=&quot;built_in&quot;&gt;linear-gradient&lt;/span&gt;(0deg, red, red 50%, transparent 50%), &lt;span class=&quot;built_in&quot;&gt;linear-gradient&lt;/span&gt;(90deg, red, red 50%, transparent 50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;: top, right top, bottom, left top;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：兼容性较好，单边框、多边框可实现，大小、颜色可配置。&lt;br&gt;缺点：代码量多、无法实现圆角、同时占用了背景样式&lt;/p&gt;
&lt;h4 id=&quot;3-阴影&quot;&gt;&lt;a href=&quot;#3-阴影&quot; class=&quot;headerlink&quot; title=&quot;3. 阴影&quot;&gt;&lt;/a&gt;3. 阴影&lt;/h4&gt;&lt;p&gt;实现原理：利用 css 对阴影处理的方式模拟。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.border&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-box-shadow&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(0, 0, 0, 0.5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：兼容性较好，单边框、多边框、圆角可实现，大小、颜色、可配置。&lt;br&gt;缺点：模拟效果强差人意，颜色不好配置。&lt;/p&gt;
&lt;h4 id=&quot;4-viewport-rem&quot;&gt;&lt;a href=&quot;#4-viewport-rem&quot; class=&quot;headerlink&quot; title=&quot;4. viewport + rem&quot;&gt;&lt;/a&gt;4. viewport + rem&lt;/h4&gt;&lt;p&gt;实现原理：通过设置页面 viewport 与对应 rem 基准值。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- devicePixelRatio = 2：--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- devicePixelRatio = 3：--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优点：兼容比较好，写法跟常规写法无异。&lt;br&gt;缺点：老项目改用 rem 单位成本较高。&lt;/p&gt;
&lt;h4 id=&quot;5-border-image&quot;&gt;&lt;a href=&quot;#5-border-image&quot; class=&quot;headerlink&quot; title=&quot;5. border-image&quot;&gt;&lt;/a&gt;5. border-image&lt;/h4&gt;&lt;p&gt;实现原理：通过图片配合边框背景模拟。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.border-image&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;() &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; stretch;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：无。&lt;br&gt;缺点：图片边缘模糊，大小、颜色更改不灵活。&lt;/p&gt;
&lt;h4 id=&quot;6-CSS3-缩放&quot;&gt;&lt;a href=&quot;#6-CSS3-缩放&quot; class=&quot;headerlink&quot; title=&quot;6. CSS3 缩放&quot;&gt;&lt;/a&gt;6. CSS3 缩放&lt;/h4&gt;&lt;p&gt;实现原理：利用 :before/:after 重做 border，配合 scale 使得伪元素缩小一半&lt;br&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$bor_style&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#ddd&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;attribute&quot;&gt;border-top&lt;/span&gt;-1pt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-bottom&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;$bor_style&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; only screen and (-webkit-min-device-pixel-ratio:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    %&lt;span class=&quot;attribute&quot;&gt;border-top&lt;/span&gt;-1pt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -webkit-&lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;: scaleY(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -webkit-&lt;span class=&quot;attribute&quot;&gt;transform-origin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;优点：实现简单、单边框、多边框、圆角可实现，大小、颜色可配置。&lt;br&gt;缺点：代码量多，可通过 sass 预处理器处理。&lt;/p&gt;
&lt;h4 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h4&gt;&lt;p&gt;经过比较与实操测试，最好的处理方式是 CSS3 缩放，目前项目已经在广泛使用。&lt;/p&gt;
&lt;h3 id=&quot;2-Flexbox-布局&quot;&gt;&lt;a href=&quot;#2-Flexbox-布局&quot; class=&quot;headerlink&quot; title=&quot;2. Flexbox 布局&quot;&gt;&lt;/a&gt;2. Flexbox 布局&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Flexbox Layout（弹性盒模型）模块（目前W3C工作草案正在最后通过）的目的是为了提供一种更有效的方式来布局，使各模块即使大小是未知或者动态的也可以在项目空间中合理分配位置（就像“弹性”这个词一样）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目哪些地方可以使用 flexbox？比如这些&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/liqinuo/3.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;基本语法：&quot;&gt;&lt;a href=&quot;#基本语法：&quot; class=&quot;headerlink&quot; title=&quot;基本语法：&quot;&gt;&lt;/a&gt;基本语法：&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: -webkit-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: -webkit-flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;box-flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-box-flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-元素水平垂直居中&quot;&gt;&lt;a href=&quot;#3-元素水平垂直居中&quot; class=&quot;headerlink&quot; title=&quot;3. 元素水平垂直居中&quot;&gt;&lt;/a&gt;3. 元素水平垂直居中&lt;/h3&gt;&lt;p&gt;实现的方法有很多种，下面几种比较常用：&lt;/p&gt;
&lt;h4 id=&quot;1-表格方法：&quot;&gt;&lt;a href=&quot;#1-表格方法：&quot; class=&quot;headerlink&quot; title=&quot;1. 表格方法：&quot;&gt;&lt;/a&gt;1. 表格方法：&lt;/h4&gt;&lt;p&gt;实现方法：表格内容本来就是垂直居中的，可以通过模拟表格处理。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box_center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box_center&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box_center&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.inner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-vertical-align-middle&quot;&gt;&lt;a href=&quot;#2-vertical-align-middle&quot; class=&quot;headerlink&quot; title=&quot;2. vertical-align: middle&quot;&gt;&lt;/a&gt;2. vertical-align: middle&lt;/h4&gt;&lt;p&gt;实现方法：利用空元素占位实现&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box_center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;placeholder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box_center&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box_center&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.inner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box_center&lt;/span&gt; &lt;span class=&quot;selector-class&quot;&gt;.placeholder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-绝对定位&quot;&gt;&lt;a href=&quot;#3-绝对定位&quot; class=&quot;headerlink&quot; title=&quot;3. 绝对定位&quot;&gt;&lt;/a&gt;3. 绝对定位&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;selector-tag&quot;&gt;box_center&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;bottom&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-使用-transform-实现&quot;&gt;&lt;a href=&quot;#4-使用-transform-实现&quot; class=&quot;headerlink&quot; title=&quot;4. 使用 transform 实现&quot;&gt;&lt;/a&gt;4. 使用 transform 实现&lt;/h4&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%&lt;span class=&quot;selector-tag&quot;&gt;box_center&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-transform&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;translate&lt;/span&gt;(-50%, -50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;translate&lt;/span&gt;(-50%, -50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兼容性：Android2.3 系统浏览器不支持容器直接使用 fixed 进行定位，外加 fixed 容器可解决。&lt;/p&gt;
&lt;h4 id=&quot;结论：-1&quot;&gt;&lt;a href=&quot;#结论：-1&quot; class=&quot;headerlink&quot; title=&quot;结论：&quot;&gt;&lt;/a&gt;结论：&lt;/h4&gt;&lt;p&gt;经过各种场景的适用型比较，项目使用  transform 实现，兼容性好且使用方便。&lt;/p&gt;
&lt;h3 id=&quot;4-图片占位&quot;&gt;&lt;a href=&quot;#4-图片占位&quot; class=&quot;headerlink&quot; title=&quot;4. 图片占位&quot;&gt;&lt;/a&gt;4. 图片占位&lt;/h3&gt;&lt;p&gt;图片未加载出来之前浏览器是无法计算出图片实际尺寸的，所以会出现一个问题，页面刚打开各种元素会因为图片未完全加载而跳动/错位。&lt;/p&gt;
&lt;p&gt;这里推荐一种兼容性很好做法简单的方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;br&gt;通过图片宽高比例计算出图片所需占位空间，赋值于外容器，图片再绝对定位在等比缩放的容器当中。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.placeholder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding-top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.placeholder&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算公式：&lt;/strong&gt;&lt;br&gt;padding-top = 图片高度(px)/图片宽度(px) * 100%&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如：&lt;/strong&gt;&lt;br&gt;1:1 比例的图片 padding-top: 100%;&lt;br&gt;2:1 比例的图片 padding-top: 50%;&lt;/p&gt;
&lt;h2 id=&quot;四-尽可能减少样式图片&quot;&gt;&lt;a href=&quot;#四-尽可能减少样式图片&quot; class=&quot;headerlink&quot; title=&quot;四 尽可能减少样式图片&quot;&gt;&lt;/a&gt;四 尽可能减少样式图片&lt;/h2&gt;&lt;p&gt;大多图标元素都可以使用 CSS 样式绘制，可以大大减少样式图资源请求还有增强图标可维护性。&lt;br&gt;比如：链接箭头、圆点、优惠券点点、选择框、checkbox等等。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/liqinuo/4.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;五-使用-WebP-格式图片&quot;&gt;&lt;a href=&quot;#五-使用-WebP-格式图片&quot; class=&quot;headerlink&quot; title=&quot;五 使用 WebP 格式图片&quot;&gt;&lt;/a&gt;五 使用 WebP 格式图片&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;WebP 格式，由 google 于 2010 年推出的新一代图片格式，在压缩方面比 JPEG 格式更优越，并能节省大量的服务器带宽资源和数据空间。与 JPEG 相同，WebP 也是一种有损压缩，主要优势在于高效率。在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目中大部分页面素材图都使用了 WebP 格式，兼容方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打开场景是浏览器：&lt;/strong&gt;通过 javascript 检测，对支持 WebP 的用户输出 WebP 格式图片。&lt;br&gt;WebP 支持 插件：&lt;a href=&quot;http://webpjs.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webpjs.appspot.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打开场景是APP：&lt;/strong&gt;根据不同系统使用 Android WebP 解析库或iOS WebP 解析库做兼容解析。&lt;br&gt;Android4.0 以下解析库：&lt;a href=&quot;https://github.com/alexey-pelykh/webp-android-backport&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/alexey-pelykh/webp-android-backport&lt;/a&gt;&lt;br&gt;iOS 解析库：&lt;a href=&quot;https://github.com/carsonmcdonald/WebP-iOS-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/carsonmcdonald/WebP-iOS-example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS：除了 Android4.0 以上提供原生支持&lt;/p&gt;
&lt;p&gt;资料参考：&lt;a href=&quot;http://isux.tencent.com/introduction-of-webp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://isux.tencent.com/introduction-of-webp.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt;&lt;br&gt;保证图片高清质量的同时，大大压缩了图片大小，节省了服务器带宽资源和数据空间。&lt;/p&gt;
&lt;h2 id=&quot;六-APP缓存策略&quot;&gt;&lt;a href=&quot;#六-APP缓存策略&quot; class=&quot;headerlink&quot; title=&quot;六 APP缓存策略&quot;&gt;&lt;/a&gt;六 APP缓存策略&lt;/h2&gt;&lt;p&gt;注： APP缓存策略由开发同学提供&lt;/p&gt;
&lt;h3 id=&quot;1-缓存方式&quot;&gt;&lt;a href=&quot;#1-缓存方式&quot; class=&quot;headerlink&quot; title=&quot;1. 缓存方式&quot;&gt;&lt;/a&gt;1. 缓存方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模块化的使用 APP 缓存，写入磁盘，包括 HTML、JS、CSS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片使用浏览器缓存，稳定后的背景图以及常用图片也使用 APP 缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-缓存更新&quot;&gt;&lt;a href=&quot;#2-缓存更新&quot; class=&quot;headerlink&quot; title=&quot;2. 缓存更新&quot;&gt;&lt;/a&gt;2. 缓存更新&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;主模块更新：&lt;/strong&gt;APP 打开就发送主模块版本号到服务端，返回有更新的模块内容以及版本号，并且返回所有模块版本索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;子模块更新：&lt;/strong&gt;进去一个主模块，在加载完成后，会检查所有子模块版本索引，并获取需要更新的模块内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;当前模块更新：&lt;/strong&gt;在直接打开模块时（非首页进入），会去 check/更新一下当前版本，然后在加载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-布局方式&quot;&gt;&lt;a href=&quot;#一-布局方式&quot; class=&quot;headerlink&quot; title=&quot;一 布局方式&quot;&gt;&lt;/a&gt;一 布局方式&lt;/h2&gt;&lt;p&gt;作为一个注重用户体验的 H5 页面，合适的页面布局方式很重要。&lt;br&gt;移
    
    </summary>
    
    
      <category term="summary" scheme="http://aotu.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>以电影之眼看CSS3动画（二）</title>
    <link href="http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/"/>
    <id>http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_2/</id>
    <published>2015-11-22T17:27:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（二）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（二）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非干货聚集地，来找干货的对不住了。
注注：又多又大的图预警！！！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上回说到CSS3动画与传统动画之间千丝万缕的联系，现在就让我们来探讨一下用CSS3动画做一部动画电影都需要些什么。&lt;/p&gt;
&lt;p&gt;一、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先你需要一个故事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使只是一堆雪花往下掉，也是包含故事的——为什么下雪？是冬天来了？那是冬天的第一场雪吗？第一场雪有什么特点呢？好吧作为一个从没见过雪的南方人我承认我给自己挖了个坑，不过就是类似这种思路，让我们拥有了一个故事，所以，即使只有一秒钟的动画也是有故事的。Use your imagination.&lt;/p&gt;
&lt;p&gt;小tip：在做影视题材的专题页时，我会首先根据相关影视的预告片确定入场动画的风格与基调，观看预告片不仅能够了解影片的风格，同时还能学习其字幕出现、消失以及转场的方式，获得一种节奏感，也就是上面所说的时间掌控。在看电影正片时也可留意影片开头与结尾字幕出现的形式，尤其是科幻片，电影字幕的设计与电影风格相辅相成，常常能让你脑洞大开——原来还能这么玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-1_preview_of_overheard_3.gif&quot; alt=&quot;preview_of_overheard_3&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://movie.douban.com/trailer/156598/#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[窃听风云3]预告片&lt;/a&gt;中字幕出现的方式表现出信号干扰的效果，由此可以将影片相关专题作出这样的开场动画——&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-2_animation_design_of_overheard_3_broadcast.gif&quot; alt=&quot;animation_design_of_overheard_3_broadcast&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视觉设计：吴丹枫&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; peoInner&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0%, 12&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;%, 16&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;%, 20&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:none;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	10%, 12%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(../img_bg/casts_adv_green_red.jpg) no-repeat &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	14%, 16%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(../img_bg/casts_adv_green_red.jpg) no-repeat &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;725px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	18%, 20%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(../img_bg/casts_adv_green_red.jpg) no-repeat &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;725px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	13%, 17%, 21%, 100%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(../img_bg/cast_adv_01.jpg) no-repeat top center;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;简单的几个不同色调的图片进行替换就能做出类似效果。（&lt;a href=&quot;http://labs.qiang.it/labs/EC_demo/Doing_Movie_by_CSS3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo地址&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、&lt;/p&gt;
&lt;p&gt;当我们在脑内小剧场构思好动画小故事之后（当然，你也可以将它写下来），我们就可以进行&lt;strong&gt;关键帧与时间轴的设计&lt;/strong&gt;了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何人都可以用电脑动画软件将一个物体移动。但是如何赋予物体重量、大小、规模、移动和幽默感，这些都与你如何移动物体相关。电脑不能为动画师创造动画，动画师仍然需要了解时间掌握的原则知识以赋予电脑动画生命力。（《动画的时间掌握》）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这时需要注意的是因果关系对动画的影响，“一个动画师必须懂得自然界物体运动的力学知识”，这样“才能创造情绪和表达正确的感觉。”我们来看看为了使动画更加流畅真实，迪士尼爷爷想出了什么办法。［白雪公主与七个小矮人］作为80、90后动画电影启蒙，使用了一项革新动画制作的技术——&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%BD%AC%E6%8F%8F%E6%9C%BA%E6%8A%80%E6%9C%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转描机&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（视频 &lt;a href=&quot;http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://player.ku6.com/refer/TH-adgFO0MjSKh3i/v.swf&lt;/a&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-4_sidelights_of_snow_white.gif&quot; alt=&quot;sidelights_of_snow_white&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频：[白雪公主与七个小矮人]（1974）幕后花絮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视频中有一个细节，迪士尼爷爷让动画师注意那位大叔在跳踢踏舞时重力对裤腿的作用（19分15秒）。是的，迪士尼爷爷强调的就是动画与物理学的关系。其实即使是网页中的动画也能用到牛顿运动定律，将网页元素看作一个有重量、有结构、有柔韧性的物体进行动画设计，会得到意想不到的效果。事实上已经有人这么做了——&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-5_dribbble_form_animation.gif&quot; alt=&quot;dribbble_form_animation&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dribbble’s stripe checkout（图片来源：&lt;a href=&quot;http://markgeyer.com/pres/the-art-of-ui-animations/#/2/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Art of Animation&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adds a bit of realism to an otherwise static interface. ——&lt;a href=&quot;http://markgeyer.com/pres/the-art-of-ui-animations/#/2/5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The 12 basic principles of animation - The Art of Animation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-6_bouncejs_example.gif&quot; alt=&quot;bouncejs_example&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片来源：&lt;a href=&quot;https://medium.com/tictail-makers/giving-animations-life-8b20165224c5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Giving Animations Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using Bounce.js and classical animation concepts to bring life to user interfaces. ——&lt;a href=&quot;https://medium.com/tictail-makers/giving-animations-life-8b20165224c5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Giving Animations Life&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不断的修改与调整。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个需要细致与耐心的过程，你得在不断的调整中保持大局观，避免陷入细节的纠结，同时又需要有能够将别扭的细节调整好的灵感。说白了就是同时拥有汉子的粗犷与妹子的细腻。节奏是一个很重要的要素，与银幕上的动画类似，CSS3动画创作者的意念必须即时并完全交给观众。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;意念清晰易懂靠两个因素：1、好的表现手法和设计，要使每个主要动作能以最清楚和最有效的方式呈现在银幕上。2、好的时间掌握，要有足够的时间先使用户预感到将有什么事情发生，然后用于表现动作本身，最后要有好的收尾。这三者中，任何一项所占时间太多，便会感觉节奏太慢，用户会感到不耐烦，动画的出现便如同鸡肋。反之，如果时间太短，那么用户在注意到它之前，动作已经结束，创作者的意念未能充分表达，就浪费掉了。——《动画的时间掌握》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四、&lt;/p&gt;
&lt;p&gt;别忘了进行&lt;strong&gt;性能测试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这是一步有可能推翻前面两步甚至三步的一个步骤。但是即便发生了这样的事，也不要气馁，这并不意味着之前做的前功尽弃，反而是个宝贵的财富——对于性能的感受又多了一次体验，而其中的一些动画心得或许下次也能用上。&lt;/p&gt;
&lt;p&gt;说了这么多，一切都显得辣么抽象，下面就上栗子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-7_animation_of_an_eye.gif&quot; alt=&quot;animation_of_an_eye&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动画来源：&lt;a href=&quot;http://tympanus.net/Development/PseudoElementsAnimationsTransitions/index4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pseudo-Elements Animations and Transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是个使用了最简单的css属性——padding、line-height、box-shadow——实现了令人吃了一斤效果的栗子，就像一道脑筋急转弯一样让大家对CSS3的动画的理解不止于CSS3的新属性，我们曾经用烂的CSS2.0属性同样也能开出花儿。&lt;/p&gt;
&lt;p&gt;我们看到，CSS3动画并不只是由transform、opacity等等简单组成，它还可以包含许许多多的设计、想法、甚至感情。台上一分钟，台下十年功在动画上也适用，或许在所有事物上都适用。&lt;/p&gt;
&lt;p&gt;目前为止用CSS3动画拍电影只是个概念，但想象一下你是这部电影的导演，所有元素都是可调度的场景与角色，用CSS3动画拍电影是不是也没有那么遥远了？&lt;/p&gt;
&lt;p&gt;最后，我想将我一直以来没能找到合适实现方法的动画效果放上来，希望能够抛砖引玉、集思广益：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-8_frames_of_flame_1.jpg&quot; alt=&quot;frames_of_flame_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/2-9_frames_of_flame_2.jpg&quot; alt=&quot;frames_of_flame_2&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 冷空气从火的底部冲入，受热后上升。 B 一套火的循环①-⑧，标以×的漩涡一个接一个地向上升起。升得越高，速度越慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;火焰的动作受火的上部流动着的空气的控制。最热的部分在火的中央，在这之上热空气上升，当热空气上升时，旁边的冷空气冲入取代热空气的位置。这部分冷空气变热后又上升，这个过程重复不已。空气的流通常常使火焰成为粗略的圆锥形，由冷空气的漩涡形成一连串锯齿状火焰，从火的底部向里和向上移动。（《动画的时间掌握》）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了空气与火焰的关系外，火焰的运动由于随机性很大，循环动画需要写得看不出动作在循环也是难点之一。如何才能在保证结构、性能的同时做出最佳的火焰效果？&lt;/p&gt;
&lt;p&gt;最最后，放上迪士尼爷爷的一段话，在我做动画甚至做任何事时它将不断地在脑海中回响：&lt;/p&gt;
&lt;p&gt;曾经有人问迪士尼，[白雪公主]大受欢迎的秘密是什么？他回答说：&lt;/p&gt;
&lt;p&gt;“我们只能确定一件事，每一个人都有童年，每次拍一部新片，我们不是为大人而拍，也不只是为小孩子拍，我们是为了唤醒每个人内心深处那种早就被遗忘的纯真世界。”&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;amp;qid=1420369719&amp;amp;sr=8-1&amp;amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《动画的时间掌握（修订版）》&lt;/a&gt;[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://markgeyer.com/pres/the-art-of-ui-animations/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Art of UI Animations&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;推荐：&quot;&gt;&lt;a href=&quot;#推荐：&quot; class=&quot;headerlink&quot; title=&quot;推荐：&quot;&gt;&lt;/a&gt;推荐：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;ttp://isux.tencent.com/css3/tools.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ISUX动画工具、动画手册&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解所有与CSS3动画相关的属性，使用动画工具更直观地调整变形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://minyos.its.rmit.edu.au/aim/a_notes/anim_principles.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12 Principles of Animation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近存在感极强的动画12原则，如果想要做出自然流畅的CSS3动画，这个由迪士尼动画巨头所总结出的经典原则绝对是必读之物。这里附上视频版：&lt;a href=&quot;http://vimeo.com/93206523&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vimeo.com/93206523&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（二）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（二）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（二）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非
    
    </summary>
    
    
      <category term="CSS3" scheme="http://aotu.io/tags/CSS3/"/>
    
      <category term="Animation" scheme="http://aotu.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>以电影之眼看CSS3动画（一）</title>
    <link href="http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/"/>
    <id>http://aotu.io/notes/2015/11/23/css3-animation-to-movie-part_1/</id>
    <published>2015-11-22T17:27:00.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（一）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（一）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非干货聚集地，来找干货的对不住了。    
注注：又多又大的图预警！！！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://isux.tencent.com/css3/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3动画&lt;/a&gt;的变形基础（transform）包含4种变形方式（translate、rotate、scale、skew），同时还可设置2D、3D、变形原点（transform-origin）、透视（perspective）、透视原点（perspective-origin）等等特性；动画时间频率包含9种基本模式（ease、linear、ease-in、ease-out、ease-in-out、step-start、step-end、steps），甚至还可以使用cubic-bezier写出任何你想要的模式；再加上动画持续时间（animation-duration）等设定，各种排列组合，CSS3动画简直拥有了整个世界！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-1_trandition_animation.png&quot; alt=&quot;trandition_animation&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片来源《动画的时间掌握》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基&lt;/a&gt;的释义，动画是指由许多帧静止的画面，以一定的速度（如每秒16张）连续播放时，肉眼因视觉残象产生错觉，而误以为画面活动的作品（gif图片正是运用这种原理）。因此最初的动画是通过几张快速翻动的连续画面制作而成，而后经历了电影摄影技术的出现、电脑科技的进步，逐渐转向数字化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-2_bouncing_ball.gif&quot; alt=&quot;bouncing_ball&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/post/lyxuncle/1-3_boucing_ball_frames.png&quot; alt=&quot;boucing_ball_frames&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将gif拖入PS之后打开时间轴窗口即可看到每一帧的画面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是2D还是3D动画，关键帧，正如其名，是动画制作中最关键的部分，同时也是最难把握的部分。曾经有位设计师告诉我，在大学的第一节flash课的课后作业，老师要求大家上交一份小球动画，包含气球、石头球与皮球，并告诉大家，以相同的外观表现出不同的质感是在考验你对关键帧的悟性，而这一个作业就能体现你是否适合学习动画。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-4_quality_of_ball.png&quot; alt=&quot;quality_of_ball&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A 需要很大的力才能使一个炮弹移动。一旦它移动了，同样需要很大的力才能阻挡它前进。B 一只汽球只需要很小的力去移动它，但空气阻力使它很快停止动作。这两个例子都画了动作分格线，可以看出在银幕上表现物体的轻重，取决于对它们动作的时间掌握。（图片来源：《动画的时间掌握》）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://cghappening.blogspot.com/2011/02/blog-post_23.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《動畫製作流程介紹》&lt;/a&gt;提供的视频中可以看到关键帧在动画制作中所起的地基般的作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-5_story_board_of_Monster_Inc.gif&quot; alt=&quot;story_board_of_Monster_Inc&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画面上方的手绘图即为[怪物公司]的关键帧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与关键帧紧密关联的即为时间轴（或摄制表），时间轴是补齐中间帧不可或缺的一项，在传统动画制作中，导演就是通过制定时间轴来掌控整部动画的节奏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-6_continuity.jpg&quot; alt=&quot;continuity&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;摄制表（图片来源：《动画的时间掌握》）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在CSS3中，@keyframes正是动画的关键帧容器。@keyframes中包含的包括transform在内的元素形态设定构成了关键帧的画面。@keyframes中的百分比即为时间轴的体现。中间帧则由浏览器自动完成（就像flash中的补全动画）。&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.people&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;:people linear &lt;span class=&quot;number&quot;&gt;1.5s&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; people&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0%, 95%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	100%&amp;#123;&lt;span class=&quot;attribute&quot;&gt;opacity&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/lyxuncle/1-7_css3_animation_2.png&quot; alt=&quot;css3_animation&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个简单的动画关键帧示例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在我们知道了CSS3动画的结构与传统动画之间的关系，重点来了， CSS3动画可以做出一部动画电影吗？欲知详情，且听下回分解。&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.cn/%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1-%E5%93%88%E7%BD%97%E5%BE%B7%E2%80%A2%E5%A8%81%E7%89%B9%E5%85%8B/dp/B0094N5III/ref=sr_1_1?ie=UTF8&amp;amp;qid=1420369719&amp;amp;sr=8-1&amp;amp;keywords=%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E6%8E%8C%E6%8F%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《动画的时间掌握（修订版）》&lt;/a&gt;[英]哈罗德•威特克；[英]约翰•哈拉斯；[美]汤姆•赛图&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;a href=&quot;#以电影之眼看CSS3动画（一）&quot; class=&quot;headerlink&quot; title=&quot;以电影之眼看CSS3动画（一）&quot;&gt;&lt;/a&gt;以电影之眼看CSS3动画（一）&lt;/h1&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;注：此文非
    
    </summary>
    
    
      <category term="CSS3" scheme="http://aotu.io/tags/CSS3/"/>
    
      <category term="Animation" scheme="http://aotu.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>SVG I Know</title>
    <link href="http://aotu.io/notes/2015/11/20/svg-I-know/"/>
    <id>http://aotu.io/notes/2015/11/20/svg-I-know/</id>
    <published>2015-11-20T11:30:45.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;第一章：SVG入门篇&quot;&gt;&lt;a href=&quot;#第一章：SVG入门篇&quot; class=&quot;headerlink&quot; title=&quot;第一章：SVG入门篇&quot;&gt;&lt;/a&gt;第一章：SVG入门篇&lt;/h2&gt;&lt;h3 id=&quot;SVG简介&quot;&gt;&lt;a href=&quot;#SVG简介&quot; class=&quot;headerlink&quot; title=&quot;SVG简介&quot;&gt;&lt;/a&gt;SVG简介&lt;/h3&gt;&lt;p&gt;SVG即Scalable Vector Graphics可缩放矢量图形，使用XML格式定义图形。&lt;br&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SVG与其他图片格式相比：主要优势在于可缩放的同时不会影响图片的质量。&lt;/li&gt;
&lt;li&gt;与flash相比 ：SVG 最大的优势是与其他标准（比如 XSL 和 DOM）相兼容。而 Flash 则是未开源的私有技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;SVG-in-HTML常用方法&quot;&gt;&lt;a href=&quot;#SVG-in-HTML常用方法&quot; class=&quot;headerlink&quot; title=&quot;SVG in HTML常用方法&quot;&gt;&lt;/a&gt;SVG in HTML常用方法&lt;/h3&gt;&lt;h4 id=&quot;使用-lt-img-gt-元素来嵌入SVG图像&quot;&gt;&lt;a href=&quot;#使用-lt-img-gt-元素来嵌入SVG图像&quot; class=&quot;headerlink&quot; title=&quot;使用&amp;lt;img&amp;gt;元素来嵌入SVG图像&quot;&gt;&lt;/a&gt;使用&amp;lt;img&amp;gt;元素来嵌入SVG图像&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3school.com.cn/svg/rect1.svg&quot;&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;将SVG图像作为背景图像嵌入&quot;&gt;&lt;a href=&quot;#将SVG图像作为背景图像嵌入&quot; class=&quot;headerlink&quot; title=&quot;将SVG图像作为背景图像嵌入&quot;&gt;&lt;/a&gt;将SVG图像作为背景图像嵌入&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;background: url(&#39;http://www.w3school.com.cn/svg/rect1.svg&#39;) no-repeat;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用svg元素，通过代码将SVG图像嵌入到HTML代码中&quot;&gt;&lt;a href=&quot;#使用svg元素，通过代码将SVG图像嵌入到HTML代码中&quot; class=&quot;headerlink&quot; title=&quot;使用svg元素，通过代码将SVG图像嵌入到HTML代码中&quot;&gt;&lt;/a&gt;使用svg元素，通过代码将SVG图像嵌入到HTML代码中&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;250&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;250&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:#fecdddd;&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;svg-sprites&quot;&gt;&lt;a href=&quot;#svg-sprites&quot; class=&quot;headerlink&quot; title=&quot;svg sprites&quot;&gt;&lt;/a&gt;svg sprites&lt;/h3&gt;&lt;p&gt;svg sprites类似于css sprites，将各个svg合并在一起。&lt;br&gt;最主要的优点就是能减少页面的加载时间，优化开发流程，以及保持页面中图片元素的一致性。&lt;br&gt;实践中我们可以把整块的svg放在head头部， 因此可以在一处地方更新svg即可，而不是让svg的代码块散落在文档的各个地方。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;svg&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2000/svg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xlink&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;32&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;158&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;viewBox&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0 0 32 158&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- SVG等省略  --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这里&lt;a href=&quot;https://icomoon.io/app/#/select&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://icomoon.io/app/#/select&lt;/a&gt;可以设置sprites，可以自己导入svg。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgSprite.jpg&quot; alt=&quot;svgSprite&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;symbol-use&quot;&gt;&lt;a href=&quot;#symbol-use&quot; class=&quot;headerlink&quot; title=&quot;symbol+use&quot;&gt;&lt;/a&gt;symbol+use&lt;/h3&gt;&lt;p&gt;在head头部的svg中使用symbol元素，并使用id属性。其中symbol类似flash中的元件，可多次使用。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;icon-truck&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;32&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;32&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;viewBox&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0 0 32 32&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;126&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;truck&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#fff&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M24.832 11.445c-0.186-0.278-0.498-0.445-0.832-0.445h-1c-0.553 0-1 0.447-1 1v6c0 0.553 0.447 1 1 1h4c0.553 0 1-0.447 1-1v-1.5c0-0.197-0.059-0.391-0.168-0.555l-3-4.5zM27 18h-4v-6h1l3 4.5v1.5zM31.496 15.336l-4-6c-0.558-0.837-1.492-1.336-2.496-1.336h-4v-2c0-1.654-1.346-3-3-3h-15c-1.654 0-3 1.346-3 3v11c0 1.654 1.346 3 3 3v0 3c0 1.654 1.346 3 3 3h1.142c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h5.282c0.447 1.721 2 3 3.859 3 1.857 0 3.41-1.279 3.857-3h1.144c1.654 0 3-1.346 3-3v-6c0-0.594-0.174-1.17-0.504-1.664zM3 18c-0.552 0-1-0.447-1-1v-11c0-0.553 0.448-1 1-1h15c0.553 0 1 0.447 1 1v11c0 0.553-0.447 1-1 1h-15zM11.001 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.897 2-2 2zM24 27c-1.105 0-2-0.896-2-2s0.895-2 2-2c1.104 0 2 0.896 2 2s-0.896 2-2 2zM30 23c0 0.553-0.447 1-1 1h-1.143c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-5.282c-0.447-1.721-2-3-3.857-3-1.859 0-3.412 1.279-3.859 3h-1.143c-0.552 0-1-0.447-1-1v-3h13c1.654 0 3-1.346 3-3v-7h4c0.334 0 0.646 0.167 0.832 0.445l4 6c0.109 0.164 0.168 0.358 0.168 0.555v6z&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;symbol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在需要用到这个元件的地方使用use元素引用元件。其中xlink:href=”#truck”相当于元件的链接，通过引用元件的id来实现。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xlink:href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#truck&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h3&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgImage1.png&quot; alt=&quot;svg兼容性&quot;&gt;&lt;/p&gt;
&lt;p&gt;兼容性详细情况请点击 &lt;a href=&quot;http://caniuse.com/#search=svg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结思考&quot;&gt;&lt;a href=&quot;#总结思考&quot; class=&quot;headerlink&quot; title=&quot;总结思考&quot;&gt;&lt;/a&gt;总结思考&lt;/h3&gt;&lt;p&gt;一般在html中使用SVG有三种方法：使用&amp;lt;img&amp;gt;元素来嵌入SVG图像；将SVG图像作为背景图像嵌入；使用&amp;lt;svg&amp;gt;元素，通过代码将SVG图像嵌入到HTML代码中。&lt;br&gt;使用过程中，可通过svg sprites提高性能，通过symbol以及use元素提高文档的可维护性等。&lt;/p&gt;
&lt;h2 id=&quot;第二章：SVG形状&quot;&gt;&lt;a href=&quot;#第二章：SVG形状&quot; class=&quot;headerlink&quot; title=&quot;第二章：SVG形状&quot;&gt;&lt;/a&gt;第二章：SVG形状&lt;/h2&gt;&lt;h3 id=&quot;矩形-lt-rect-gt&quot;&gt;&lt;a href=&quot;#矩形-lt-rect-gt&quot; class=&quot;headerlink&quot; title=&quot;矩形 &amp;lt;rect&amp;gt;&quot;&gt;&lt;/a&gt;矩形 &amp;lt;rect&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ry&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;250&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:red;stroke:black; stroke-width:5;opacity:0.5&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：x为x坐标，y为y坐标；width 和 height 分别为形状的高度和宽度；rx 和 ry 属性可使矩形产生圆角。&lt;br&gt;另外，下面三个属性是文章后面会用到的，之后不会过多讲述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fill 属性定义形状的填充颜色&lt;/li&gt;
&lt;li&gt;stroke 属性定义图形边框的颜色&lt;/li&gt;
&lt;li&gt;stroke-width 属性定义形状边框的宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;圆形-lt-circle-gt&quot;&gt;&lt;a href=&quot;#圆形-lt-circle-gt&quot; class=&quot;headerlink&quot; title=&quot;圆形 &amp;lt;circle&amp;gt;&quot;&gt;&lt;/a&gt;圆形 &amp;lt;circle&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;r&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke-width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 解释：cx 和 cy分别为圆点的 x 和 y 坐标；r为半径。&lt;/p&gt;
&lt;h3 id=&quot;椭圆-lt-ellipse-gt&quot;&gt;&lt;a href=&quot;#椭圆-lt-ellipse-gt&quot; class=&quot;headerlink&quot; title=&quot;椭圆&amp;lt;ellipse&amp;gt;&quot;&gt;&lt;/a&gt;椭圆&amp;lt;ellipse&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ellipse&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;cy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;150&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rx&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ry&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;80&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:rgb(200,100,50); stroke:rgb(0,0,100);stroke-width:2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释：cx 圆点的 x 坐标，cy 圆点的 y 坐标；rx 水平半径，ry 垂直半径。&lt;/p&gt;
&lt;h3 id=&quot;线-lt-line-gt&quot;&gt;&lt;a href=&quot;#线-lt-line-gt&quot; class=&quot;headerlink&quot; title=&quot;线&amp;lt;line&amp;gt;&quot;&gt;&lt;/a&gt;线&amp;lt;line&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x1&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y1&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x2&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y2&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stroke:rgb(99,99,99);stroke-width:2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 解释：(x1,y1)为线条的开始坐标；(x2,y2)为线条的结束坐标。&lt;/p&gt;
&lt;h3 id=&quot;折线-lt-polyline-gt&quot;&gt;&lt;a href=&quot;#折线-lt-polyline-gt&quot; class=&quot;headerlink&quot; title=&quot;折线&amp;lt;polyline&amp;gt;&quot;&gt;&lt;/a&gt;折线&amp;lt;polyline&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;points&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0,0 0,20 20,20 20,40 40,40 40,60&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:white;stroke:red;stroke-width:2&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 解释：points 属性定义多边形每个角的 x 和 y 坐标。为了可读性，建议x与y坐标用逗号分开，每个角之间的坐标用空格分开。&lt;/p&gt;
&lt;h3 id=&quot;多边形-lt-polygon-gt&quot;&gt;&lt;a href=&quot;#多边形-lt-polygon-gt&quot; class=&quot;headerlink&quot; title=&quot;多边形&amp;lt;polygon&amp;gt;&quot;&gt;&lt;/a&gt;多边形&amp;lt;polygon&amp;gt;&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;polygon&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;points&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;220,100 300,210 170,250&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fill:#cccccc; stroke:#000000;stroke-width:1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 解释：points 属性定义多边形每个角的 x 和 y 坐标。&lt;/p&gt;
&lt;h3 id=&quot;路径-lt-path-gt&quot;&gt;&lt;a href=&quot;#路径-lt-path-gt&quot; class=&quot;headerlink&quot; title=&quot;路径&amp;lt;path&amp;gt;&quot;&gt;&lt;/a&gt;路径&amp;lt;path&amp;gt;&lt;/h3&gt;&lt;p&gt;直线指令：&lt;br&gt;M = moveto&lt;br&gt;L = lineto&lt;br&gt;H = horizontal lineto&lt;br&gt;V = vertical lineto&lt;br&gt;Z = closepath&lt;br&gt;注释：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M250 150 L150 350 L350 350 Z&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解释：该路径开始于位置 250 150，到达位置 150 350，然后从那里开始到 350 350，最后在 250 150 关闭路径。&lt;br&gt;由于绘制路径的复杂性，建议使用 SVG 编辑器来创建复杂的图形。&lt;/p&gt;
&lt;h4 id=&quot;svg的贝塞尔曲线&quot;&gt;&lt;a href=&quot;#svg的贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;svg的贝塞尔曲线&quot;&gt;&lt;/a&gt;svg的贝塞尔曲线&lt;/h4&gt;&lt;p&gt;贝塞尔曲线指令：&lt;br&gt;C = curveto&lt;br&gt;S = smooth curveto&lt;br&gt;Q = quadratic Belzier curve&lt;br&gt;T = smooth quadratic Belzier curveto&lt;br&gt;贝塞尔曲线控制小工具&lt;a href=&quot;http://dayu.pw/svgcontrol/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dayu.pw/svgcontrol/&lt;/a&gt;，操控多次可加深对贝塞尔曲线的理解。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgImage2.png&quot; alt=&quot;三次贝塞尔曲线控制&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgImage3.png&quot; alt=&quot;三次贝塞尔曲线控制&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSQT比较难记，联想记忆法“厕所切图(CSQT)”就比较容易记住了。&lt;br&gt;厕所是3D空间，所以CS是三次曲线噢，切图是平面图，所以是二次曲线，很好记。&lt;/p&gt;
&lt;h5 id=&quot;C三次贝塞尔曲线&quot;&gt;&lt;a href=&quot;#C三次贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;C三次贝塞尔曲线&quot;&gt;&lt;/a&gt;C三次贝塞尔曲线&lt;/h5&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C x1 y1, x2 y2, x y (or c dx1 dy1, dx2 dy2, dx dy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一个坐标(x,y)表示的是曲线的终点，另外两个坐标是控制点，(x1,y1)是起点的控制点，(x2,y2)是终点的控制点。小写指令c表示相对坐标。&lt;/p&gt;
&lt;h5 id=&quot;S光滑三次贝塞尔曲线&quot;&gt;&lt;a href=&quot;#S光滑三次贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;S光滑三次贝塞尔曲线&quot;&gt;&lt;/a&gt;S光滑三次贝塞尔曲线&lt;/h5&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;S x2 y2, x y (or s dx2 dy2, dx dy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之所以S命令没有x1 y1，是因为S命令跟在C命令后，x1 y1默认是C命令的第二个控制点的对称点，如下图蓝色线条所示。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgImage4.png&quot; alt=&quot;光滑三次贝塞尔曲线控&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如果前面没有C命令，即S命令单独使用时，S命令画出来的是二次贝塞尔曲线，因为x1 y1和x2 y2默认是同一个控制点了。&lt;/p&gt;
&lt;h5 id=&quot;Q二次贝塞尔曲线&quot;&gt;&lt;a href=&quot;#Q二次贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;Q二次贝塞尔曲线&quot;&gt;&lt;/a&gt;Q二次贝塞尔曲线&lt;/h5&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Q x1 y1, x y (or q dx1 dy1, dx dy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;T光滑二次贝塞尔曲线&quot;&gt;&lt;a href=&quot;#T光滑二次贝塞尔曲线&quot; class=&quot;headerlink&quot; title=&quot;T光滑二次贝塞尔曲线&quot;&gt;&lt;/a&gt;T光滑二次贝塞尔曲线&lt;/h5&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;T x y (or t dx dy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;T命令的控制点默认是前面C命令的控制点的对称点。&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgImage5.png&quot; alt=&quot;光滑二次贝塞尔曲线控制&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如果T命令前面没有C命令，即T命令单独使用时，T命令画出来的是直线。&lt;/p&gt;
&lt;h3 id=&quot;总结思考-1&quot;&gt;&lt;a href=&quot;#总结思考-1&quot; class=&quot;headerlink&quot; title=&quot;总结思考&quot;&gt;&lt;/a&gt;总结思考&lt;/h3&gt;&lt;p&gt;路径比基本形状更强大、更灵活。使用路径绘制复杂图形比较麻烦，但是使用它们来绘制图形的效果大多数时候很赞，一般其他基本图形是做不来的。&lt;/p&gt;
&lt;h2 id=&quot;第三章：SVG动画&quot;&gt;&lt;a href=&quot;#第三章：SVG动画&quot; class=&quot;headerlink&quot; title=&quot;第三章：SVG动画&quot;&gt;&lt;/a&gt;第三章：SVG动画&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;svg路径动画&quot;&gt;&lt;a href=&quot;#svg路径动画&quot; class=&quot;headerlink&quot; title=&quot;svg路径动画&quot;&gt;&lt;/a&gt;svg路径动画&lt;/h3&gt;&lt;p&gt;DEMO:&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgTruck.gif&quot; alt=&quot;路径动画&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;g元素是用于把相关元素进行组合的容器元素。animateMotion使元素沿着动作路径移动，且该路径不可见，path定义的是可见的路径。rotate=”auto”使元素移动得更加自然，会随着路径旋转一定的角度。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1500&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;150&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;truck&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;g&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xlink&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xlink:href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#truck&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;use&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;animateMotion&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;begin&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;-3s&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;dur&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;10s&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rotate&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;repeatCount&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;indefinite&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;animateMotion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;g&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;g&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xlink&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/1999/xlink&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xlink:href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#truck&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;use&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;animateMotion&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M0 0 C135.5 68 463.5 -8 700 29 S1000 -20 1940,70&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;begin&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0s&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;dur&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;10s&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rotate&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;auto&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;repeatCount&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;indefinite&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;animateMotion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;g&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M0 30 C135.5 98 463.5 22 700 59 S1000 10 1940,100&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#000&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke-width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;-1000&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;-1000&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;truck_path&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Newcandy/svg/blob/master/path.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看全部代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;svg路径描边动画&quot;&gt;&lt;a href=&quot;#svg路径描边动画&quot; class=&quot;headerlink&quot; title=&quot;svg路径描边动画&quot;&gt;&lt;/a&gt;svg路径描边动画&lt;/h3&gt;&lt;p&gt;DEMO:&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgPhone.gif&quot; alt=&quot;路径描边动画&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;在path等元素上必须使用stoke属性，否则动画不执行。stroke 表示描边颜色；stroke-width 表示描边的粗细；&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;phone&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;viewBox&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0 0 1024 1024&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fill&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#000&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;stroke-width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;d&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;M768 0h-512c-53.056 0-96 42.976-96 96v832c0 53.056 42.976 96 96 96h512c52.992 0 96-43.008 96-96v-832c0-53.056-43.008-96-96-96zM800 928c0 17.632-14.368 32-32 32h-512c-17.664 0-32-14.304-32-32v-64.128h576v64.128zM800 831.872h-576v-639.872h576v639.872zM800 160h-576v-64c0-17.664 14.336-32 32-32h512c17.632 0 32 14.336 32 32v64zM576 112c0 8.832-7.2 16-16 16h-96c-8.864 0-16-7.168-16-16v0c0-8.864 7.136-16 16-16h96c8.8 0 16 7.136 16 16v0zM544 911.872c0 8.8-7.2 16-16 16h-32c-8.832 0-16-7.2-16-16v0c0-8.864 7.168-16 16-16h32c8.8 0 16 7.136 16 16v0z&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;path&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;symbol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用CSS3 animation实现，因为内联的svg本身就是Html元素，可以通过CSS3来控制颜色等属性。&lt;br&gt;stroke-dasharray 表示虚线描边；stroke-dashoffset 表示虚线的起始偏移。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.device&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;43%&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;stroke-dasharray&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;stroke-dashoffset&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;: dash &lt;span class=&quot;number&quot;&gt;2s&lt;/span&gt; infinite;&lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: dash &lt;span class=&quot;number&quot;&gt;2s&lt;/span&gt; infinite; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;-webkit-keyframes&lt;/span&gt; dash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      100% &amp;#123; &lt;span class=&quot;attribute&quot;&gt;stroke-dashoffset&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @&lt;span class=&quot;keyword&quot;&gt;keyframes&lt;/span&gt; dash &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      100% &amp;#123; &lt;span class=&quot;attribute&quot;&gt;stroke-dashoffset&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/Newcandy/svg/blob/master/stroke.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看全部代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;css中的clip-path&quot;&gt;&lt;a href=&quot;#css中的clip-path&quot; class=&quot;headerlink&quot; title=&quot;css中的clip-path&quot;&gt;&lt;/a&gt;css中的clip-path&lt;/h3&gt;&lt;p&gt; clip-path按照路径内部的尺寸进行裁剪。只有路径内的内容可见。使用方法如下：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(...); &lt;span class=&quot;comment&quot;&gt;/* 或者其他的图形函数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 其他图形函数语法 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;circle: circle(radius at x-axis y-axis)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ellipse: ellipse(x-rad y-rad at x-axis y-axis)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;polygon: polygon(x-axis y-axis, x-axis y-axis, … )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inset: inset(top right bottom left round top-radius right-radius bottom-radius left-radius)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;DEMO1:&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgBreakup.gif&quot; alt=&quot;clippath&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;利用伪元素:before和:after实现相同大小相同位置的文字，使用clip-path分别裁剪文字：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;70px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;text-transform&lt;/span&gt;: uppercase;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: transparent; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 此处省略代码 */&lt;/span&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 0,100% 0,100% 100%);&lt;span class=&quot;attribute&quot;&gt;clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 0,100% 0,100% 100%); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.txt&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 0,0 100%,100% 100%);&lt;span class=&quot;attribute&quot;&gt;clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 0,0 100%,100% 100%); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Newcandy/svg/blob/master/clip-path/text.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看全部代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DEMO2：&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Newcandy/svgLine.gif&quot; alt=&quot;clippath&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;如果结合clip-path和keyframes动画，可实现相关元素按照我们的路径逐步出现的效果。clip-path可通过此工具&lt;a href=&quot;http://www.bennettfeely.com/clippy/实现复杂的路径。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.bennettfeely.com/clippy/实现复杂的路径。&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;selector-class&quot;&gt;.line&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;28px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;34px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(line.png) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; no-repeat;&lt;span class=&quot;attribute&quot;&gt;-webkit-animation&lt;/span&gt;: moveLine .&lt;span class=&quot;number&quot;&gt;8s&lt;/span&gt; ease infinite;&lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: moveLine .&lt;span class=&quot;number&quot;&gt;8s&lt;/span&gt; ease infinite; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;-webkit-keyframes&lt;/span&gt; moveLine &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  0% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 100%, 0 100%, 0 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  25% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(0 82%, 100% 81%, 100% 100%, 0 100%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  50% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(20% 0%, 80% 0%, 73% 47%, 74% 64%, 99% 100%, 0 100%, 56% 77%, 64% 58%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  60% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(50% 0%, 72% 48%, 75% 70%, 100% 100%, 0 100%, 55% 78%, 5% 68%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  75% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(28% 0, 100% 34%, 79% 100%, 0 100%, 0 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  100% &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;-webkit-clip-path&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;polygon&lt;/span&gt;(100% 0, 100% 100%, 0 100%, 0 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Newcandy/svg/blob/master/clip-path/line.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看全部代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结思考-2&quot;&gt;&lt;a href=&quot;#总结思考-2&quot; class=&quot;headerlink&quot; title=&quot;总结思考&quot;&gt;&lt;/a&gt;总结思考&lt;/h3&gt;&lt;p&gt;本章主要介绍svg路径动画，svg路径描边动画以及css中的clip-path，从中我们也发现了路径的强大之处，如若能在项目中灵活使用，无非给动画添加更生动的效果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章：SVG入门篇&quot;&gt;&lt;a href=&quot;#第一章：SVG入门篇&quot; class=&quot;headerlink&quot; title=&quot;第一章：SVG入门篇&quot;&gt;&lt;/a&gt;第一章：SVG入门篇&lt;/h2&gt;&lt;h3 id=&quot;SVG简介&quot;&gt;&lt;a href=&quot;#SVG简介&quot; class=&quot;he
    
    </summary>
    
    
      <category term="svg" scheme="http://aotu.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作总结</title>
    <link href="http://aotu.io/notes/2015/11/17/Git-Commands/"/>
    <id>http://aotu.io/notes/2015/11/17/Git-Commands/</id>
    <published>2015-11-17T12:44:25.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。&lt;br&gt;理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;Your Name&amp;quot;
$ git config --global user.email &amp;quot;email@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;提交&quot;&gt;&lt;a href=&quot;#提交&quot; class=&quot;headerlink&quot; title=&quot;提交&quot;&gt;&lt;/a&gt;提交&lt;/h3&gt;&lt;p&gt;git tracked的是修改，而不是文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/post/mamboer/git-trees.jpg&quot; alt=&quot;git-track&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#将“当前修改”移动到暂存区(stage)
$ git add somfile.txt
#将暂存区修改提交
$ git commit -m &amp;quot;Add somfile.txt.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git status
$ git diff
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;回退&quot;&gt;&lt;a href=&quot;#回退&quot; class=&quot;headerlink&quot; title=&quot;回退&quot;&gt;&lt;/a&gt;回退&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# 放弃工作区修改
$ git checkout -- file.name
$ git checkout -- .

# 取消commit(比如需要重写commit信息)
$ git reset --soft HEAD

# 取消commit、add(重新提交代码和commit)
$ git reset HEAD
$ git reset --mixed HEAD

# 取消commit、add、工作区修改(需要完全重置)
$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;记录&quot;&gt;&lt;a href=&quot;#记录&quot; class=&quot;headerlink&quot; title=&quot;记录&quot;&gt;&lt;/a&gt;记录&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git reflog
$ git log
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除&quot;&gt;&lt;a href=&quot;#删除&quot; class=&quot;headerlink&quot; title=&quot;删除&quot;&gt;&lt;/a&gt;删除&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ rm file.name
$ git rm file.name
$ git commit -m &amp;quot;Del&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;远程操作&quot;&gt;&lt;a href=&quot;#远程操作&quot; class=&quot;headerlink&quot; title=&quot;远程操作&quot;&gt;&lt;/a&gt;远程操作&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:michaelliao/learngit.git
# 第一次推送，-u(--set-upstream)指定默认上游
$ git push -u origin master
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;克隆&quot;&gt;&lt;a href=&quot;#克隆&quot; class=&quot;headerlink&quot; title=&quot;克隆&quot;&gt;&lt;/a&gt;克隆&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Yikun/yikun.github.com.git path
$ git clone git@github.com:Yikun/yikun.github.com.git path
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分支操作&quot;&gt;&lt;a href=&quot;#分支操作&quot; class=&quot;headerlink&quot; title=&quot;分支操作&quot;&gt;&lt;/a&gt;分支操作&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/post/mamboer/git-merge.png&quot; alt=&quot;about-merge&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看当前分支
$ git branch

# 创建分支
$ git branch dev
# 切换分支
$ git checkout dev

# 创建并checkout分支
$ git checkout -b dev

# 合并分支
$ git merge dev

# 删除分支
$ git branch -d dev
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;$ git tag 0.1.1
$ git push origin --tags
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：本文Fork自 &lt;a href=&quot;http://yikun.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yikun.github.io&lt;/a&gt;，&lt;a href=&quot;http://aotu.io&quot;&gt;凹凸实验室&lt;/a&gt;作进一步完善。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;用Git比较久了，之前一直在Win用的TortoiseGit，现在命令行用的比较多，所以把一些指令总结一下，以便回顾和查询。&lt;br&gt;理解这些指令，觉得最重要的是理解Git的内部原理，比如Git的分布式版本控制，分清楚工作区、暂存区、版本库，还有就是理解Git跟踪并管理的是修改，而非文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Fork" scheme="http://aotu.io/tags/Fork/"/>
    
      <category term="Git" scheme="http://aotu.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>101%还原</title>
    <link href="http://aotu.io/notes/2015/11/16/101-percent/"/>
    <id>http://aotu.io/notes/2015/11/16/101-percent/</id>
    <published>2015-11-15T21:39:14.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;100%还原设计稿，还原误差不超1像素&lt;/em&gt; 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。&lt;/p&gt;
&lt;p&gt; 记得曾经带我的师傅说过一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重构工程师不应该满足100%还原设计稿，更应该去追求101%还原度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;101%还原是重构工程师在还原设计稿的过程中，发挥自身的主观能动性，对设计稿进行修正或向产品、视觉、交互提出合理的建议，让最终还原出来的视觉设计稿更接近设计本意。&lt;/p&gt;
&lt;p&gt;101%的还原可以归为两类，一类是&lt;strong&gt;对视觉稿的主动修正&lt;/strong&gt;，不包括具有信息传达的内容；另一类是&lt;strong&gt;对视觉稿深入思考并提出合理建议&lt;/strong&gt;，包括但不限于具有信息传达的内容。&lt;/p&gt;
&lt;h2 id=&quot;对视觉稿的主动修正&quot;&gt;&lt;a href=&quot;#对视觉稿的主动修正&quot; class=&quot;headerlink&quot; title=&quot;对视觉稿的主动修正&quot;&gt;&lt;/a&gt;对视觉稿的主动修正&lt;/h2&gt;&lt;p&gt;视觉设计师有时候会比较忙，设计稿中可能会出现像素之间的误差而造成不对齐的情况，如下面的设计稿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（Retina 2X图）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;很明显，视觉设计师原意是想让右则的按钮垂直居中对齐的，我们在还原的时候可以去微调边距让之对齐，得到下面的重构稿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img2.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（重构稿1X图）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;可以看到，还原出来的设计稿虽然和原设计稿并没有100%吻合，但是出来的效果确实更符合垂直居中对齐的准则，更接近设计的本意，而且节省了沟通的成本。&lt;/p&gt;
&lt;p&gt;有些同学许会问，在没有周知视觉设计师的情况下私下改动设计稿貌似有点不太尊重视觉设计师的工作吧?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对视觉稿的主动修正有一个很重要的原则，就是在没有信发生息传达的情况下修正，所作的修正不能违背设计本意。&lt;/strong&gt;拿刚才的例子来说，如果我个人不喜欢按钮的边角是方角的，就私下把方角还原成圆角，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img3.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;那就产生了还原稿与设计原稿之间的信息传达内容了，因为方角和圆角是两个不一样的设计风格，圆角按钮明显不是视觉设计师的设计本意，如果圆角按钮在视觉设计师完全不知情的情况下上了线，那就是真正的不尊重视觉设计师的工作了。&lt;/p&gt;
&lt;p&gt;当然视觉设计师都希望自己输出的设计稿完美无缺，但一些客观因素（交接模块）或主观上的操作（工作太忙，拖动元素排版的时候手抖）难免会让设计稿存在一些像素级的误差，对视觉稿的主动修正，是和视觉设计师协作的一种默契，如果每一项这样的修正都要让视觉设计师重新去调整再生成新的PSD文件的话，沟通成本未免过高&lt;/p&gt;
&lt;h2 id=&quot;对视觉稿深入思考并提出合理建议&quot;&gt;&lt;a href=&quot;#对视觉稿深入思考并提出合理建议&quot; class=&quot;headerlink&quot; title=&quot;对视觉稿深入思考并提出合理建议&quot;&gt;&lt;/a&gt;对视觉稿深入思考并提出合理建议&lt;/h2&gt;&lt;p&gt;我们先看一下下面的设计稿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img4.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;从视觉稿来看，视觉设计师把“关注本店”、“关注公众号”和“联系卖家”这三项的按钮所占的区域作了等分处理，按钮里面的文案和icon水平居中&lt;/p&gt;
&lt;p&gt;等分的排版，虽然个体之间的内容不一样会出现内容与分隔线边距不相等的情况，但是在按钮所占展示区域比例相等的情况下，三个按钮整体看上去是非常整齐的，排版逻辑很清晰：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img5.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出，让三个按钮在页面上的排版整体看起来是整齐的是设计师的设计本意，那么问题来了：&lt;/p&gt;
&lt;p&gt;在还原设计稿中，我们通常会考虑到布局的扩展性，会考虑到不足三个按钮或者多于三个按钮的排版情况，如果按照等分的排版型去还原，按钮出现增减的话，就会出现下面的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img6.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（等分四个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img7.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（等分：三个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img8.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（等分：两个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img9.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（等分：一个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;可以看到，大于3个按钮的时候，文案的展示出现了问题，小于3个按钮的时候按钮的大小和文案与分隔线的间距就略显夸张了，特别是只有一个按钮的情况，几种情况的排版在视觉上变化都很大，而且视觉稿里是没有相应的展示的，那么这里面包含了排版之间的信息传达。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在还原过程中，当发生信息传达的时候，任何疑问和建议都应该周知相关的负责人，这是101%还原中的基本原则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把刚才上面的几种情况，写好demo向产品和视觉设计师展示，反馈并确认两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按钮在不同的场景中最多展示的个数和最少展示的个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果按钮展示个数有变，用等分自适应排版的话，以上情况的排版方式能否接受&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后得到的答复是：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;产品：最多展示3个，最少展示1个，排版看还有没有更好的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;视觉：按钮不用等分自适应，用定宽展示的&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;可以get到信息：&lt;/p&gt;
&lt;p&gt;等分自适应的排版在这里不适用：&lt;em&gt;对视觉设计稿排版信息的理解与视觉设计师的原意有出入&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与产品和视觉设计师对相应的信息进行确认后，于是给到了定宽的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img10.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（定宽：三个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img11.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（定宽：两个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img12.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（定宽：一个按钮）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;定宽排版与等分排版两个方式对比来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定宽排版的3个按钮与等分排版的效果一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定宽排版的2个按钮比等分排版的效果差。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定宽排版的时候，按钮所占空间并没有等分展示区域，而文案离分隔线的间距又不相等，排版逻辑不清晰，显得很不整齐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定宽排版的1个按钮比等分排版的效果好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等分排版的时候，虽然按钮在展示区域中是居中对齐了，但是考虑到上下文的对齐，按钮并没有和星星的对齐，相反，等宽排版的文案更接近与星星的左对齐，虽然并没有绝对对齐，只是展现出来的排版效果、与上下文的排版逻辑显得更严谨。&lt;/p&gt;
&lt;p&gt;其实两种排版的文案都没有办法100%保证与星星左对齐的，因为文案长度不一样，居中的位置就不一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img13.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（定宽、等分的居中文案）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;综合以上，向产品和视觉设计师提出建议：按钮的文案与分隔线间距相等，并且第一个按钮的文案与星星左对齐。于是得到了最终的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img14.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（优化后的）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img15.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（优化后的）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img16.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（优化后的）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这与原有的设计稿相比，扩展性更强，排版逻辑更严谨性、更趋向设计本意，建议是合理的。&lt;/p&gt;
&lt;p&gt;优化的地方虽然不大，但我们需要对设计稿进行认真深入的分析，从产品层面、视觉层面、开发层面甚至交互层面去尽可能地解读设计稿，深入思考才能发现问题，提出合理的建议，101% 中的 1% 威力就会慢慢的程现出来。&lt;/p&gt;
&lt;h3 id=&quot;一个特殊的例子&quot;&gt;&lt;a href=&quot;#一个特殊的例子&quot; class=&quot;headerlink&quot; title=&quot;一个特殊的例子&quot;&gt;&lt;/a&gt;一个特殊的例子&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img17.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于项目快速迭代，视觉设计资源紧缺的原因，于是有了这张没有经过视觉流程的设计稿，是一位产品GG给到的，如果我们拿到设计稿，不加以思考的话，100%还原出来，那么&lt;/p&gt;
&lt;p&gt;得到了第一稿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img18.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实认真思考一下，可优化的地方还是有的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交互上&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img19.jpg&quot; alt=&quot;image&quot;&gt; 和 &lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img20.jpg&quot; alt=&quot;image&quot;&gt; 这两个其实只是文案中的一部分，并没有任何交互，设计稿上却做成了和文本形成强烈对比的看上去可点击的按钮，容易误导用户去点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;视觉上&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;复制按钮的配色欠恰当，复制的操作并不会引起用户警告或错误的提示，而红色恰好有让人警惕的意味&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入框和复制按钮的高度不一样，显得不够整齐美观&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容和顶部的间距太小，内容视觉焦点欠佳&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互和视觉上都涉及到不同的信息传达，因此不能用对视觉稿进行主动修正，将以上信息和产品反馈&lt;/p&gt;
&lt;p&gt;最终建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“添加朋友” 和 “关注” 采用文本加色强调形式表现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复制按钮的颜色采取常用的给人友好感觉的绿色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调整复制按钮的调试使之与输入框的调试一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调整内容与顶部的间距大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得到了第二稿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img21.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（第二稿）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;第二稿中“您已收藏店铺，可在个人中心查看”的收藏反馈提示是产品新增的内容，一开始要求放在上图的位置，虽然第二稿在交互和视觉上得到了一定的优化，但还有优化的空间，特别是&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;产品上&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字左对齐可显页面排版整齐，但从内容的亲密性上看，最底部的已收藏文字反馈提示并不属于引导操作的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;让反馈内容居中对齐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;增加与操作内容的边距，让用户可以一目了然看到反馈内容的归属&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调整文案强调色的色系，让其不至于过重而显得太突眼。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终得到101%的还原效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://missoy.me/wp-content/uploads/2015/07/img22.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个例子中，最终还原出来的效果也许没有视觉设计师那么专业，但至少还原稿上多了一份思考，多了一份心思，在这过程中也能让大家去探讨一些非自己职位上的知识，互相学习，互相提高。&lt;/p&gt;
&lt;p&gt;从100%到101%的过程，其实就是一个主动思考，积极执行的过程，是一个追求极致的过程，是一个把事做好的过程。在还原设计稿的过程中，1%在100%中占的比例不多，但是如果能把这1%处理得好，还原出来的设计稿会更具级数。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;100%还原设计稿，还原误差不超1像素&lt;/em&gt; 是重构工程师入行的最基本要求，而在实际工作中，这100%是远远不够的。&lt;/p&gt;
&lt;p&gt; 记得曾经带我的师傅说过一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重构工程师不应该满足100%还原设计稿，更应该去追求10
    
    </summary>
    
    
      <category term="设计理念还原" scheme="http://aotu.io/tags/%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E8%BF%98%E5%8E%9F/"/>
    
  </entry>
  
  <entry>
    <title>基于phantomJs的网络爬虫</title>
    <link href="http://aotu.io/notes/2015/11/11/phantomJs-crawler/"/>
    <id>http://aotu.io/notes/2015/11/11/phantomJs-crawler/</id>
    <published>2015-11-11T09:59:33.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;基于phantomJs2-0的网络爬虫&quot;&gt;&lt;a href=&quot;#基于phantomJs2-0的网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;基于phantomJs2.0的网络爬虫&quot;&gt;&lt;/a&gt;基于phantomJs2.0的网络爬虫&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;phantomJs&lt;/strong&gt;是一个基于WebKit的服务器端JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。PhantomJS可以用于页面自动化，网络监测，网页截屏，以及无界面测试等。&lt;/p&gt;
&lt;h3 id=&quot;用途概述：&quot;&gt;&lt;a href=&quot;#用途概述：&quot; class=&quot;headerlink&quot; title=&quot;用途概述：&quot;&gt;&lt;/a&gt;用途概述：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;屏幕快照&lt;/strong&gt; ：官方提供的API中&lt;a href=&quot;http://phantomjs.org/api/webpage/method/render.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;page.render&lt;/a&gt; 提供了强大的屏幕快照功能；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络爬虫&lt;/strong&gt; ：&lt;a href=&quot;http://phantomjs.org/api/webpage/method/evaluate.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;page.evaluate&lt;/a&gt; 方法提供了一个沙箱来帮助你像用js操作dom一样简单的获取你想要的内容，避免了使用复杂的正则匹配内容；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络情况监控&lt;/strong&gt; ：定期对网站进行pageSpeed检查、可用于打开速度缓慢短信报警等服务(本文暂不做深入介绍)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页面自动化操作&lt;/strong&gt; ：phantomJs2.0 提供了丰富的API用于页面自动化操作&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;关于安装&quot;&gt;&lt;a href=&quot;#关于安装&quot; class=&quot;headerlink&quot; title=&quot;关于安装&quot;&gt;&lt;/a&gt;关于安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;网络上有大量的安装教程，如果你用的osx，建议直接&lt;code&gt;brew update &amp;amp;&amp;amp; brew install phantomjs&lt;/code&gt;。此处只叙述下在安装过程中遇到的一个坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Mac OS Yosemite  版本可能都会遇到这样一个问题：&lt;br&gt;运行 &lt;code&gt;phantomjs hello.js&lt;/code&gt; 后得到了报错信息：&lt;code&gt;Killed: 9&lt;/code&gt;&lt;br&gt;这个问题的原始链接在这里&lt;a href=&quot;https://github.com/ariya/phantomjs/issues/12928&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github:issue/12928&lt;/a&gt; 解决方案如下：&lt;a href=&quot;http://stackoverflow.com/questions/28267809/phantomjs-getting-killed-9-for-anything-im-trying&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install UPX. UPX is an executable packer and unpacker&lt;br&gt; &lt;code&gt;$ brew install upx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unpack the phantomjs executable&lt;br&gt; &lt;code&gt;$ upx -d phantomjs-2.0.0-macosx/bin/phantomjs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the phantomjs executable&lt;br&gt; &lt;code&gt;$ ./phantomjs-2.0.0-macosx/bin/phantomjs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;先感受下phantomJs的强大&quot;&gt;&lt;a href=&quot;#先感受下phantomJs的强大&quot; class=&quot;headerlink&quot; title=&quot;先感受下phantomJs的强大&quot;&gt;&lt;/a&gt;先感受下phantomJs的强大&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; page = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpage&#39;&lt;/span&gt;).create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.open(&lt;span class=&quot;string&quot;&gt;&#39;http://jd.com&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.render(&lt;span class=&quot;string&quot;&gt;&#39;jd.png&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;phantom.&lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把以上代码保存到screen.js，切到terminal：&lt;br&gt;&lt;code&gt;$ phantomejs screen.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以得到如下的网站截图：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/80c4aaf9gw1ey49t6wl41j20rb0d1jxj.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然还可以继续&lt;a href=&quot;http://phantomjs.org/api/webpage/property/scroll-position.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;page.scrollPosition&lt;/a&gt;以及Js脚本做延时截图，来避免截图中出现图片未加载完全等问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;页面自动化操作&quot;&gt;&lt;a href=&quot;#页面自动化操作&quot; class=&quot;headerlink&quot; title=&quot;页面自动化操作&quot;&gt;&lt;/a&gt;页面自动化操作&lt;/h2&gt;&lt;h3 id=&quot;自动登录京东&quot;&gt;&lt;a href=&quot;#自动登录京东&quot; class=&quot;headerlink&quot; title=&quot;自动登录京东&quot;&gt;&lt;/a&gt;自动登录京东&lt;/h3&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; page = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpage&#39;&lt;/span&gt;).create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onLoadStarted =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadInProgress =&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;load started&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onLoadFinished = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadInProgress = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;load finished&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onUrlChanged = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;onUrlChanged&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; page.open(&lt;span class=&quot;string&quot;&gt;&#39;https://passport.jd.com/new/login.aspx&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    page.includeJs(&lt;span class=&quot;string&quot;&gt;&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.js&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = page.evaluate(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&#39;#loginname&#39;&lt;/span&gt;).val(&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&#39;#nloginpwd&#39;&lt;/span&gt;).val(&lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&#39;#loginsubmit&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].click();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//若引入jQuery 则用这种方法来实现click&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        page.sendEvent(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.left + &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.top + &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; clock =setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            page.render(&lt;span class=&quot;string&quot;&gt;&#39;jdlogin.png&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            phantom.exit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;phantomJs2.0中click事件不是标准事件&lt;br&gt; 若 &lt;code&gt;page.evaluate&lt;/code&gt;中操作dom时并未引入jQuery，则应自己实现一个click事件如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ev = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createEvent(&lt;span class=&quot;string&quot;&gt;&quot;MouseEvent&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ev.initMouseEvent(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* bubble */&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* cancelable */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;/* coordinates */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;/* modifier keys */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/*left*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el.dispatchEvent(ev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解决方案来自&lt;a href=&quot;http://stackoverflow.com/questions/15739263/phantomjs-click-an-element&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow:questions/15739263&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;登录后截屏&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/80c4aaf9gw1ey49s5j9pjj20rd0hiaic.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到此登录并未触发验证，若用别的网站被脱库的账号密码来批量查询的话，有很大概率撞库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;网络爬虫&quot;&gt;&lt;a href=&quot;#网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;网络爬虫&quot;&gt;&lt;/a&gt;网络爬虫&lt;/h2&gt;&lt;h3 id=&quot;数据抓取的快感&quot;&gt;&lt;a href=&quot;#数据抓取的快感&quot; class=&quot;headerlink&quot; title=&quot;数据抓取的快感&quot;&gt;&lt;/a&gt;数据抓取的快感&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;众所周知知乎的搜索如此之烂，刚看过的问题，再搜就搜不到了，那把知乎上你想要的分类的问题抓取下来，自己搜索咯。（当然想这么一个烂理由来抓人家的数据也是醉人）。随便抓人家的数据不好，此处只做技术分享，切勿用于商业用途。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;批量抓取知乎某个分类下的所有问题&quot;&gt;&lt;a href=&quot;#批量抓取知乎某个分类下的所有问题&quot; class=&quot;headerlink&quot; title=&quot;批量抓取知乎某个分类下的所有问题&quot;&gt;&lt;/a&gt;批量抓取知乎某个分类下的所有问题&lt;/h5&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; page = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpage&#39;&lt;/span&gt;).create(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testindex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    finalAns = [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;fs&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onLoadStarted =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadInProgress =&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;load started&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onLoadFinished = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loadInProgress = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;load finished&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page.onUrlChanged = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;onUrlChanged&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; circle = setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testindex++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(testindex === &lt;span class=&quot;number&quot;&gt;51&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clearInterval(circle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        phantom.exit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    page.open(&lt;span class=&quot;string&quot;&gt;&#39;http://www.zhihu.com/topic/19559937?page=&#39;&lt;/span&gt;+testindex, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;status&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(status == &lt;span class=&quot;string&quot;&gt;&#39;fail&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testindex--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = page.evaluate(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; titleArr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.scrollTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.scrollHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; title = $(&lt;span class=&quot;string&quot;&gt;&#39;.feed-item .question_link&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; title.length; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    titleArr[j] = title[j].text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; titleArr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testindex--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file = fs.open(&lt;span class=&quot;string&quot;&gt;&quot;liuxue.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; h = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; h &amp;lt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.length; h++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            file.write(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;[h]+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        file.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;其中用到了批量page.open 页面来控制翻页到所有的问题，然后将查询到的数据写入文件中，用到了File System API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;运用场景畅想&quot;&gt;&lt;a href=&quot;#运用场景畅想&quot; class=&quot;headerlink&quot; title=&quot;运用场景畅想&quot;&gt;&lt;/a&gt;运用场景畅想&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;网络性能测试可用于批量、定期对竞品网站做查询，进行竞品分析如打开速度、改版频率等等。&lt;/li&gt;
&lt;li&gt;网络爬虫可批量获取数据进行竞品分析、行业报告等。&lt;/li&gt;
&lt;li&gt;页面自动化操作可用于网站自动化测试等。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于phantomJs2-0的网络爬虫&quot;&gt;&lt;a href=&quot;#基于phantomJs2-0的网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;基于phantomJs2.0的网络爬虫&quot;&gt;&lt;/a&gt;基于phantomJs2.0的网络爬虫&lt;/h1&gt;&lt;p&gt;&lt;s
    
    </summary>
    
    
      <category term="PhantomJS" scheme="http://aotu.io/tags/PhantomJS/"/>
    
      <category term="Crawler" scheme="http://aotu.io/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>css层叠顺序探究</title>
    <link href="http://aotu.io/notes/2015/11/08/css-stack-order/"/>
    <id>http://aotu.io/notes/2015/11/08/css-stack-order/</id>
    <published>2015-11-08T11:44:25.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;嗯~一个比较基础但容易混乱的知识点~&lt;br&gt;首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS 2.1, each box has a position in three dimensions. In addition to their horizontal and vertical positions, boxes lie along a “z-axis” and are formatted one on top of the other. Z-axis positions are particularly relevant when boxes overlap visually.&lt;br&gt;The order in which the rendering tree is painted onto the canvas is described in terms of stacking contexts. Stacking contexts can contain further stacking contexts. A stacking context is atomic from the point of view of its parent stacking context; boxes in other stacking contexts may not come between any of its boxes.&lt;br&gt;Each box belongs to one stacking context. Each positioned box in a given stacking context has an integer stack level, which is its position on the z-axis relative other stack levels within the same stacking context. Boxes with greater stack levels are always formatted in front of boxes with lower stack levels. Boxes may have negative stack levels. Boxes with the same stack level in a stacking context are stacked back-to-front according to document tree order.&lt;br&gt;——&lt;a href=&quot;http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实说人话，大致意思就是：&lt;br&gt;&lt;strong&gt;每个盒模型的位置是三维的，除了x轴和y轴，还有一个表示层叠的z轴；&lt;br&gt;z轴上的位置决定了我们看到的盒模型之间的层叠效果（谁盖住谁）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述规范还解释了层叠上下文的特点以及盒模型的层叠级别，下面我们通过栗子慢慢探究。&lt;/p&gt;
&lt;h2 id=&quot;1-浮动与行内&quot;&gt;&lt;a href=&quot;#1-浮动与行内&quot; class=&quot;headerlink&quot; title=&quot;1. 浮动与行内&quot;&gt;&lt;/a&gt;1. 浮动与行内&lt;/h2&gt;&lt;p&gt;&lt;em&gt;eg.1-1/eg.1-2共同结构与样式：&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div5&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt; dashed;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div1&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FF4363&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div2&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FC9D99&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;170px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div3&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#F9CCAD&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;160px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div4&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#C7C7A8&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div5&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#84AF9B&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;140px&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.1-1：常规流中非定位非行内元素的层叠情况&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/1-1-normal-order.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论： 常规流中非定位非行内的元素根据html顺序，按照“后来居上”的规则层叠。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.1-2：定位元素／行内元素／浮动元素之间的层叠关系&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/1-2-change-order.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论： 层叠顺序如下（高➡低）：&lt;br&gt;z-index为auto的定位元素；&lt;br&gt;常规流内行内非定位元素；&lt;br&gt;非定位的浮动元素；&lt;br&gt;常规流内非行内非定位元素；&lt;br&gt;z-index为负的定位元素。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-为定位元素设置z-index&quot;&gt;&lt;a href=&quot;#2-为定位元素设置z-index&quot; class=&quot;headerlink&quot; title=&quot;2. 为定位元素设置z-index&quot;&gt;&lt;/a&gt;2. 为定位元素设置z-index&lt;/h2&gt;&lt;p&gt;首先，你必须了解以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个定位元素都有一个整型的层叠级别（stack level）；&lt;/li&gt;
&lt;li&gt;z-index属性只对定位元素有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.2-1/eg.2-2共同结构与样式：&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div3&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div4&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div5&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt; dashed;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div1&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FF4363&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div2&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FC9D99&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;170px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div3&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#F9CCAD&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;160px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;40px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div4&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#C7C7A8&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div5&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#84AF9B&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;140px&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.2-1: 5个定位元素在未设置z-index时的层叠情况&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/2-1-normal-order.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论： z-index为auto的定位元素根据html顺序，按照“后来居上”的规则层叠。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.2-2: 5个定位元素设置不同z-index时的层叠情况&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/2-2-change-order.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;br&gt;定位元素的层叠级别由z-index的值决定，z-index为auto则其层叠级别为0（注意：只是层级为0，其z-index值仍为auto）；&lt;br&gt;同一层叠上下文中，层叠级别大的元素位于层叠级别小的元素之上；&lt;br&gt;同一层叠上下文中，层叠级别相同的元素根据html顺序决定元素的层叠关系，遵循“后来居上”原则。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-层叠顺序（stack-order）&quot;&gt;&lt;a href=&quot;#3-层叠顺序（stack-order）&quot; class=&quot;headerlink&quot; title=&quot;3. 层叠顺序（stack order）&quot;&gt;&lt;/a&gt;3. 层叠顺序（stack order）&lt;/h2&gt;&lt;p&gt;结合上面的例子进行总结，可得每一个层叠上下文内的层叠顺序：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Within each stacking context, the following layers are painted in back-to-front order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the background and borders of the element forming the stacking context.&lt;/li&gt;
&lt;li&gt;the child stacking contexts with negative stack levels (most negative first).&lt;/li&gt;
&lt;li&gt;the in-flow, non-inline-level, non-positioned descendants.&lt;/li&gt;
&lt;li&gt;the non-positioned floats.&lt;/li&gt;
&lt;li&gt;the in-flow, inline-level, non-positioned descendants, including inline tables and inline blocks.&lt;/li&gt;
&lt;li&gt;the child stacking contexts with stack level 0 and the positioned descendants with stack level 0.&lt;/li&gt;
&lt;li&gt;the child stacking contexts with positive stack levels (least positive first).&lt;br&gt;—&lt;a href=&quot;http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;规范中的描述比较乏味，可结合&lt;a href=&quot;http://www.w3help.org/zh-cn/kb/013&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w3help&lt;/a&gt;中的一张图片进行理解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/3-1-summay-order.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-层叠上下文（stacking-context）&quot;&gt;&lt;a href=&quot;#4-层叠上下文（stacking-context）&quot; class=&quot;headerlink&quot; title=&quot;4. 层叠上下文（stacking context）&quot;&gt;&lt;/a&gt;4. 层叠上下文（stacking context）&lt;/h2&gt;&lt;p&gt;看完上述的例子，对于层叠顺序应该大致了解了。但突然冒出一个“层叠上下文”，这又是个什么鬼？&lt;/p&gt;
&lt;h3 id=&quot;4-1-层叠上下文的特点&quot;&gt;&lt;a href=&quot;#4-1-层叠上下文的特点&quot; class=&quot;headerlink&quot; title=&quot;4.1 层叠上下文的特点&quot;&gt;&lt;/a&gt;4.1 层叠上下文的特点&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;stacking context可以嵌套&lt;/li&gt;
&lt;li&gt;每个stacking context相对于兄弟元素是完全独立的，其内部规则不会影响到外部&lt;/li&gt;
&lt;li&gt;每个stacking context元素都会被父stacking context当做一个元素施加stacking规则&lt;br&gt;——&lt;a href=&quot;http://blog.angular.in/css-stacking-contextli-na-xie-xian-wei-ren-zhi-de-keng/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Abruzzi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-2-层叠上下文的创建&quot;&gt;&lt;a href=&quot;#4-2-层叠上下文的创建&quot; class=&quot;headerlink&quot; title=&quot;4.2 层叠上下文的创建&quot;&gt;&lt;/a&gt;4.2 层叠上下文的创建&lt;/h3&gt;&lt;h4 id=&quot;4-2-1-css2&quot;&gt;&lt;a href=&quot;#4-2-1-css2&quot; class=&quot;headerlink&quot; title=&quot;4.2.1 css2&quot;&gt;&lt;/a&gt;4.2.1 css2&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;The root element forms the root stacking context. Other stacking contexts are generated by any positioned element (including relatively positioned elements) having a computed value of ‘z-index’ other than ‘auto’. Stacking contexts are not necessarily related to containing blocks.&lt;br&gt;——&lt;a href=&quot;http://www.w3.org/TR/CSS2/visuren.html#propdef-z-index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSS2中规定创建层叠上下文的两种情况：&lt;br&gt;根元素（html）；&lt;br&gt;定位元素（absolute/relative）且z-index的值不为auto。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：在同一层叠上下文中，父元素、子元素与自身都被当作是并级关系进行层叠级别的比较。他们之间可能互相层叠。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.4-1：z-index为auto的定位元素没有创建层叠上下文&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div1_1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative;z-index:9&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;position:relative&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;#000&lt;/span&gt; dashed;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;: center;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div1&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FF4363&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div1_1&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#FC9D99&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div2&lt;/span&gt;&amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#F9CCAD&lt;/span&gt;;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/4-1-normal-order.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;分析上述例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前提：&lt;/strong&gt;div1、div1_1、div2都是定位元素；div1、div2都没有设置z-index值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;假设：&lt;/strong&gt;div1与div2创建了层叠上下文。不同层叠上下文之间是相对独立的，div1_1属于div1所创建的层叠上下文，与div2所创建的层叠上下文无关；根据“后来居上”原则，则div2应该在div1及其子元素div1_1之上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由上述例子可得：&lt;/strong&gt;div1的子元素div1_1在div2之上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;因此：&lt;/strong&gt;div1、div2没有创建层叠上下文。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结论： z-index为auto的定位元素不会创建新的层叠上下文。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;IE中的BUG：&lt;/strong&gt;&lt;br&gt;&lt;em&gt;在IE6-7浏览器中测试eg.4-1：&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/4-2-ie-bug.png&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论： ie6-7中，z-index为auto的定位元素也会创建新的层叠上下文。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-2-2-css3&quot;&gt;&lt;a href=&quot;#4-2-2-css3&quot; class=&quot;headerlink&quot; title=&quot;4.2.2 css3&quot;&gt;&lt;/a&gt;4.2.2 css3&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;A stacking context is formed, anywhere in the document, by any element which is either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the root element (HTML),&lt;/li&gt;
&lt;li&gt;positioned (absolutely or relatively) with a z-index value other than “auto”,&lt;/li&gt;
&lt;li&gt;a flex item with a z-index value other than “auto”,that is the parent element display: flex|inline-flex,&lt;/li&gt;
&lt;li&gt;elements with an opacity value less than 1. (See the specification for opacity),&lt;/li&gt;
&lt;li&gt;elements with a transform value other than “none”,&lt;/li&gt;
&lt;li&gt;elements with a mix-blend-mode value other than “normal”,&lt;/li&gt;
&lt;li&gt;elements with a filter value other than “none”,&lt;/li&gt;
&lt;li&gt;elements with isolation set to “isolate”,&lt;/li&gt;
&lt;li&gt;position: fixed&lt;/li&gt;
&lt;li&gt;specifying any attribute above in will-change even if you don’t specify values for these attributes directly (See this post)&lt;/li&gt;
&lt;li&gt;elements with -webkit-overflow-scrolling set to “touch”&lt;br&gt;——&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSS3中规定创建层叠上下文的十种情况：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;根元素 (HTML)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;绝对（absolute）定位或相对（relative）定位且 z-index 值不为”auto”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个 flex 项目(flex item)，且 z-index 值不为 “auto”，也就是父元素 display: flex|inline-flex&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元素的 opacity 属性值小于 1（参考 the specification for opacity）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元素的 transform 属性值不为 “none”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元素的 mix-blend-mode 属性值不为 “normal”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元素的 isolation 属性被设置为 “isolate”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 mobile WebKit 和 Chrome 22+ 内核的浏览器中，position: fixed 总是创建一个新的层叠上下文, 即使 z-index 的值是 “auto”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 will-change 中指定了任意 CSS 属性，即便你没有定义该元素的这些属性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;元素的 -webkit-overflow-scrolling 属性被设置 “touch”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;eg.4-2：opacity创建新的层叠上下文&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Yettyzyt/4-3-opacity-order.png&quot;&gt;&lt;/p&gt;&lt;br&gt;分析：&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If an element with opacity less than 1 is not positioned, implementations must paint the layer it creates, within its parent stacking context, at the same stacking order that would be used if it were a positioned element with ‘z-index: 0’ and ‘opacity: 1’.&lt;br&gt;If an element with opacity less than 1 is positioned, the ‘z-index’ property applies as described in [CSS21], except that ‘auto’ is treated as ‘0’ since a new stacking context is always created.&lt;br&gt;——&lt;a href=&quot;http://www.w3.org/TR/css3-color/#transparency&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;br&gt;如果元素设置opacity小于1但未定位，视为css2中元素定位／z-index:0且opacity:1的情况；&lt;br&gt;如果元素设置opacity小于1且定位，z-index为auto，视为css2中元素定位且z-index:0的情况；&lt;br&gt;如果元素设置opacity小于1且定位，z-index不为auto，则根据css2的描述层叠。&lt;/strong&gt;&lt;br&gt;（其他CSS3创建层叠上下文的元素情况与opacity相同，故不赘述。）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;至此，应该能够明白：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素（html）会创建一个新的层叠上下文；&lt;/li&gt;
&lt;li&gt;上述CSS2／CSS3中的元素会创建新的层叠上下文；&lt;/li&gt;
&lt;li&gt;在每一个层叠上下文中都遵循上文中提到的层叠顺序；&lt;/li&gt;
&lt;li&gt;每一个层叠上下文（除根元素）在它的父层叠上下文中都以一个普通元素来对待，其内部的层叠规则不影响其本身在父层叠上下文（即其所属层叠上下文）中的层叠顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-3-层叠上下文的层级&quot;&gt;&lt;a href=&quot;#4-3-层叠上下文的层级&quot; class=&quot;headerlink&quot; title=&quot;4.3 层叠上下文的层级&quot;&gt;&lt;/a&gt;4.3 层叠上下文的层级&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;z-index值为auto的层叠上下文（z-index未设置的定位元素）层级为0；&lt;/li&gt;
&lt;li&gt;z-index值为0（根元素／z-index为0的定位元素／css3中提到的除根元素与定位元素之外的其他会创建层叠上下文的未定位或已定位无设置z-index的元素）的层叠上下文层级为0；&lt;/li&gt;
&lt;li&gt;z-index值已设置且不为0的层叠上下文层级（z-index已设置且不为0的定位元素）与z-index的值相等；&lt;/li&gt;
&lt;li&gt;相同层级的层叠上下文遵循“后来居上”的规则层叠。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-小结&quot;&gt;&lt;a href=&quot;#5-小结&quot; class=&quot;headerlink&quot; title=&quot;5. 小结&quot;&gt;&lt;/a&gt;5. 小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属于同一层叠上下文的元素（无论它们在结构上是兄弟或父子，甚至是祖孙），都遵循上文所述的层叠顺序；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的层叠上下文之间，层级较大的层叠上下文元素及其内部元素位于层级小的层叠上下文元素及其内部元素之上；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的层叠上下文之间互相独立；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;层叠上下文可嵌套，内部规则不影响外部。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;嗯~一个比较基础但容易混乱的知识点~&lt;br&gt;首先上一大段文绉绉的w3c规范以表明这是一篇严肃的学术文章（觉得太长可先跳过~）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS 2.1, each box has a position in three dimensio
    
    </summary>
    
    
      <category term="CSS" scheme="http://aotu.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Service Workers：采用WebP动态响应图片</title>
    <link href="http://aotu.io/notes/2015/11/06/webp-responsive-image/"/>
    <id>http://aotu.io/notes/2015/11/06/webp-responsive-image/</id>
    <published>2015-11-05T18:44:25.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;译文地址：&lt;a href=&quot;http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图片在如今的站点上不可或缺。试想一下，在我们网页上没有图片会怎样？高质量的图片能够使你的站点更加出色，但同时伴随着一定的性能损耗。由于图片文件较大，下载时间相对较长并且会减缓页面的加载。如果是一个带宽较低的用户，用户体验将会特别差。&lt;/p&gt;
&lt;p&gt;在移动设备上面，这种现象会更加明显。在移动设备上加载大型图片消耗时间取决你的网络以及连接速度。如果你是一个不耐心的用户，你将会变得沮丧。幸运的是，我们有能力处理 &lt;a href=&quot;https://responsiveimages.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;响应式图片&lt;/a&gt; 。通过使用 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;picture&lt;/a&gt; 标签，我们可以根据用户的设备为用户提供不同大小、设备像素比（DPR）以及格式的图片。例如，下面的代码就可以做到这一点。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 1024px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 320px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，我们指定不同的图像大小及其相应的设备像素比给给定的屏幕宽度。使用 &lt;strong&gt;picture&lt;/strong&gt; 标签，浏览器可以基于设备决定最佳的内容。以上的代码可以完美运行，我们可以进一步扩展，以适应更多的场景。&lt;/p&gt;
&lt;p&gt;你可能听过&lt;strong&gt;WebP&lt;/strong&gt;图片格式。相比于PNG图片，其文件大小能够节省26％；相比于JPEG图片，能够节省大约25％-34%。目前，Chrome、Opera以及Android能够支持WebP格式，但Safari和IE尚未支持。既然我们能够用picture标签来处理响应式图片，我们也能够使用WebP格式的图片并且允许浏览器在不支持WebP时进行回退。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/WebP/logo-webp.png&quot; alt=&quot;webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;让我们在上面代码的基础上，添加WebP图片的支持。同时，我们要确保能够根据不同的DPR使用最佳视觉效果的图片。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- JPEG Images --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 1024px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 320px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- WebP Images --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 1024px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn.webp, ./images/brooklyn-2x.webp 2x, ./images/brooklyn-3x.webp 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/webp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 320px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn-small.webp, ./images/brooklyn-small-2x.webp 2x, ./images/brooklyn-small-3x.webp 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/webp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- The fallback image --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Brooklyn Bridge - New York&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，我们已经创建了能够同时使用JPEG和WebP图片的picture标签。浏览器将根据设备决定最佳的选项。由于WebP并不支持IE和Safari，使用WebP图片意味着你需要在服务器上同时保存WebP和JPEG格式的图片副本。上面的代码足够满足我们当前的需求，但试想一下如果每张采用这种方式来编写，代码将会变得非常臃肿。当你的站点开始增长时，为每张图片编写上面的代码将会变得非常乏味。这时候，便可以采用Service Workers来解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://a43d55f6a02c4be185ce-9cfa4cf7c673a59966ad8296f4c88804.r44.cf3.rackcdn.com/Service-Workers-WebP/accept-headers-webp.png&quot; alt=&quot;webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们采用开发者工具观察HTTP请求头部，可以看出可以根据Accept头部来判断我们的浏览器是否支持WebP图片。为了利用这一点，并开始提供WebP图片，我们需要注册一个Service Worker。Service Worker的一大特性就是，它们能够拦截网络请求，这样子，我们就能够完全控制响应内容。使用这个特性，我们能够监听HTTP头部，并决定如何做。如果你想了解更多关于Service Workers的内容，可以看看这个&lt;a href=&quot;https://github.com/slightlyoff/ServiceWorker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;库获取更多的信息。&lt;/p&gt;
&lt;p&gt;我们在html页面添加如下代码用于注册Service Worker。以下的代码引用service-worker.js文件。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Register the service worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; navigator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	navigator.serviceWorker.register(&lt;span class=&quot;string&quot;&gt;&#39;/service-worker.js&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;registration&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Registration was successful&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ServiceWorker registration successful with scope: &#39;&lt;/span&gt;, registration.scope);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// registration failed :(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ServiceWorker registration failed: &#39;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，我们做了一个简单的检查，判断浏览器是否支持Service Worker，如果支持，注册并安装Service Worker。这段代码代码最好的地方就是做了兼容处理，如果浏览器不支持Service Workers，它们会自动回退并且用户不会注意到其中差别。&lt;/p&gt;
&lt;p&gt;接下来，我们需要创建Service Worker文件‘service-worker.js‘，用于拦截正在传递到服务器的请求。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Listen to fetch events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;fetch&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Check if the image is a jpeg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;regexp&quot;&gt;/\.jpg$|.png$/&lt;/span&gt;.test(event.request.url)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Inspect the accept header for WebP support&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; supportsWebp = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event.request.headers.has(&lt;span class=&quot;string&quot;&gt;&#39;accept&#39;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	supportsWebp = event.request.headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	                    .get(&lt;span class=&quot;string&quot;&gt;&#39;accept&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    .includes(&lt;span class=&quot;string&quot;&gt;&#39;webp&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;// If we support WebP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (supportsWebp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Clone the request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = event.request.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;comment&quot;&gt;// Build the return URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; returnUrl = req.url.substr(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, req.url.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)) + &lt;span class=&quot;string&quot;&gt;&quot;.webp&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		event.respondWith(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  fetch(returnUrl, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     mode: &lt;span class=&quot;string&quot;&gt;&#39;no-cors&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		   &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的示例代码做了一系列的事情，让我们来一步步分解。&lt;/p&gt;
&lt;p&gt;在前面几行，我添加一个事件监听器来监听任何一个fetch事件。当每个请求发生时，先判断当前的请求是否是获取JPEG或者PNG格式的图片。如果当前的请求是获取图片，我就能根据HTTP请求头部来决定最佳的响应。在这种情况下，我通过检查Accept头部并且查找是否存在“image/webp“ Mime类型。一旦查询完头部的值，我就能确定浏览器是否支持WebP图片，如果浏览器支持WebP图片，就返回相应的WebP图片。&lt;/p&gt;
&lt;p&gt;现在，我们的HTML看起来比较整洁，能够支持WebP图片而并不臃肿。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 1024px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn.jpg, ./images/brooklyn-2x.jpg 2x, ./images/brooklyn-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;(min-width: 320px)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;srcset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./images/brooklyn-small.jpg, ./images/brooklyn-small-2x.jpg 2x, ./images/brooklyn-small-3x.jpg 3x&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/jpeg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;picture&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Service Workers给了我们无限的可能。在这个例子中，我们可以扩展到包括其他图片格式，甚至是缓存。你还能轻松地添加支持IE的&lt;a href=&quot;http://caniuse.com/#feat=jpegxr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JPEGXR&lt;/a&gt;。这样子，我们能够更快地给我们的用户展示我们的页面。&lt;/p&gt;
&lt;p&gt;如果你想看看示例代码运行的效果，请移步到&lt;a href=&quot;https://deanhume.github.io/Service-Workers-WebP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;deanhume.github.io/Service-Workers-WebP&lt;/a&gt;。打开支持这些特性的浏览器，如Chrome，打开开发者工具，就可以看到页面的运行。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scottjehl.github.io/picturefill/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://scottjehl.github.io/picturefill/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/speed/webp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.google.com/speed/webp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;译文地址：&lt;a href=&quot;http://deanhume.com/Home/BlogPost/service-workers--dynamic-responsive-images-using-webp-images/10132/&quot; target=
    
    </summary>
    
    
      <category term="WebP" scheme="http://aotu.io/tags/WebP/"/>
    
      <category term="Fork" scheme="http://aotu.io/tags/Fork/"/>
    
  </entry>
  
  <entry>
    <title>使用Adobe FLASH CC制作Canvas动画</title>
    <link href="http://aotu.io/notes/2015/11/02/flash-canvas/"/>
    <id>http://aotu.io/notes/2015/11/02/flash-canvas/</id>
    <published>2015-11-01T18:44:25.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;新建HTML5-Canvas项目&quot;&gt;&lt;a href=&quot;#新建HTML5-Canvas项目&quot; class=&quot;headerlink&quot; title=&quot;新建HTML5 Canvas项目&quot;&gt;&lt;/a&gt;新建HTML5 Canvas项目&lt;/h2&gt;&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/1.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;舞台设置&quot;&gt;&lt;a href=&quot;#舞台设置&quot; class=&quot;headerlink&quot; title=&quot;舞台设置&quot;&gt;&lt;/a&gt;舞台设置&lt;/h3&gt;&lt;p&gt;舞台大小修改为：600x600 (&lt;em&gt;这里可以根据设计稿调整所需要的舞台大小&lt;/em&gt;)&lt;/p&gt;
&lt;h3 id=&quot;帧频&quot;&gt;&lt;a href=&quot;#帧频&quot; class=&quot;headerlink&quot; title=&quot;帧频&quot;&gt;&lt;/a&gt;帧频&lt;/h3&gt;&lt;p&gt;是指每秒钟放映或显示的帧或图像的数量，这个数值设置越大，动画越快，但同时也是性能消耗大户。这里我们设置为36&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/2.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;导入资源&quot;&gt;&lt;a href=&quot;#导入资源&quot; class=&quot;headerlink&quot; title=&quot;导入资源&quot;&gt;&lt;/a&gt;导入资源&lt;/h2&gt;&lt;p&gt;文件 &amp;gt; 导入 &amp;gt; 导入到库&lt;/p&gt;
&lt;h2 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h2&gt;&lt;p&gt;快捷键Ctrl + L或者窗口菜单下 &amp;gt; 库&lt;/p&gt;
&lt;p&gt;从资源库中把资源拖到舞台进去,通过移动拖拽的形式进行布局&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/3.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;图形与影片剪辑&quot;&gt;&lt;a href=&quot;#图形与影片剪辑&quot; class=&quot;headerlink&quot; title=&quot;图形与影片剪辑&quot;&gt;&lt;/a&gt;图形与影片剪辑&lt;/h2&gt;&lt;p&gt;我们可以将单独的动画，放到一个独立的影片剪辑里，这样可以更好的控制动画。几个独立的剪片剪辑，可以组成一个完整的动画。&lt;/p&gt;
&lt;p&gt;当我们把图片从资源库拖到舞台时，它这个时候，只是普通的位图，并不能做补帧动画，所以我们必须把它转换成元件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图形&lt;/strong&gt;由矢量图或者是位图组成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;影片剪辑&lt;/strong&gt;包含在动画影片中的影片片段，有自己的时间轴和属性。具有交互性，是用途最广、功能最多的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面制作以飘动的钱，做个例子说明&lt;/p&gt;
&lt;p&gt;选择位图，右键 &amp;gt; 转换为元件，这个时候，弹出一个对话窗口，我们首先选择“影片剪辑”，保存。双击进入刚才创始的影片剪辑，这个时候，由于刚才我们只是把位图转成了影片剪辑，但实际上，它里面，仍然是一个位图，所以并不能做动画操作。所以我们需要在影片剪辑里，把图片转换了“图形”。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/4.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;时间轴&quot;&gt;&lt;a href=&quot;#时间轴&quot; class=&quot;headerlink&quot; title=&quot;时间轴&quot;&gt;&lt;/a&gt;时间轴&lt;/h2&gt;&lt;p&gt;上面已经把图片转成图形元件，所以我们现在需要时间轴某个地方中插入关键帧。这里我们在30,60帧处插入关键帧。然后在30帧处，移动元件的位置，然后在每个关键帧的中间右键，选择“创建传统补间”。速度可以通过删除或者增加两个关键帧的补间动画时间长度来控制。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/5.png&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/6.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;动作播放控制&quot;&gt;&lt;a href=&quot;#动作播放控制&quot; class=&quot;headerlink&quot; title=&quot;动作播放控制&quot;&gt;&lt;/a&gt;动作播放控制&lt;/h2&gt;&lt;p&gt;如果我们希望动画可以连续从头再播放，可以在动画的最后一帧插入一个空白关键帧，打开动作面板，然后写上&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gotoAndPlay(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/7.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;即可回到第一帧重新播放，如果希望停止动画，则&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;stop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果希望跳到某帧去播放&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gotoAndPlay(n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果希望跳到某帧并停止&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gotoAndStop(n)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;发布&quot;&gt;&lt;a href=&quot;#发布&quot; class=&quot;headerlink&quot; title=&quot;发布&quot;&gt;&lt;/a&gt;发布&lt;/h2&gt;&lt;p&gt;文件 &amp;gt; 发布设置&lt;/p&gt;
&lt;h3 id=&quot;文件输出&quot;&gt;&lt;a href=&quot;#文件输出&quot; class=&quot;headerlink&quot; title=&quot;文件输出&quot;&gt;&lt;/a&gt;文件输出&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;循环时间轴(&lt;em&gt;表示是否循环整个动画&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;覆盖HTML(&lt;em&gt;第一次发布时可以选上，如果对html有修改，记得把这个选项去掉,否则会对文件进行覆盖操作&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;资源导出选项&quot;&gt;&lt;a href=&quot;#资源导出选项&quot; class=&quot;headerlink&quot; title=&quot;资源导出选项&quot;&gt;&lt;/a&gt;资源导出选项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;图像(&lt;em&gt;是否导出雪碧图&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;javascript命名空间(&lt;em&gt;基本上不需要修改&lt;/em&gt;)，这几个属于全局变量，可以在发布后的js文件中再修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/youing/8.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;生成html&quot;&gt;&lt;a href=&quot;#生成html&quot; class=&quot;headerlink&quot; title=&quot;生成html&quot;&gt;&lt;/a&gt;生成html&lt;/h2&gt;&lt;p&gt;最终会生成一个html文件和一个js文件&lt;/p&gt;
&lt;h3 id=&quot;生成的html文件&quot;&gt;&lt;a href=&quot;#生成的html文件&quot; class=&quot;headerlink&quot; title=&quot;生成的html文件&quot;&gt;&lt;/a&gt;生成的html文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;框架自带的preloadjs,可以轻松管理资源预加载，它提供了相关api可以进行loading等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;people&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://code.createjs.com/easeljs-0.8.1.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://code.createjs.com/tweenjs-0.6.1.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://code.createjs.com/movieclip-0.8.1.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://code.createjs.com/preloadjs-0.6.1.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;people.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas, stage, exportRoot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	images = images||&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; loader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.LoadQueue(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	loader.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;fileload&quot;&lt;/span&gt;, handleFileLoad);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	loader.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;complete&quot;&lt;/span&gt;, handleComplete);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	loader.loadManifest(lib.properties.manifest);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleFileLoad&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;evt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (evt.item.type == &lt;span class=&quot;string&quot;&gt;&quot;image&quot;&lt;/span&gt;) &amp;#123; images[evt.item.id] = evt.result; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleComplete&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;evt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	exportRoot = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; lib.people();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stage = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; createjs.Stage(canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stage.addChild(exportRoot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	stage.update();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createjs.Ticker.setFPS(lib.properties.fps);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createjs.Ticker.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;tick&quot;&lt;/span&gt;, stage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;init();&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;background-color:#D4D4D4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;620&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;background-color:#FFFFFF&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成的js文件&quot;&gt;&lt;a href=&quot;#生成的js文件&quot; class=&quot;headerlink&quot; title=&quot;生成的js文件&quot;&gt;&lt;/a&gt;生成的js文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;生成的动画配置及脚本都在这个js文件里面，如果需要，可以手动修改相关数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;lib, img, cjs, ss&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p; &lt;span class=&quot;comment&quot;&gt;// shortcut to reference prototypes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// library properties:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lib.properties = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width: &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	height: &lt;span class=&quot;number&quot;&gt;620&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fps: &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color: &lt;span class=&quot;string&quot;&gt;&quot;#FFFFFF&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	manifest: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/bigband.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;bigband&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/Bitmap1.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;Bitmap1&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/body.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/eye1.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;eye1&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/eye2.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;eye2&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/face1.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;face1&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/face2.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;face2&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/face3.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;face3&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/hair.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;hair&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/hand2.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;hand2&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/hand3.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;hand3&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/hand4.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;hand4&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/index30.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;index30&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/index302.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;index302&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/index40.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;index40&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/index5.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;index5&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;src:&lt;span class=&quot;string&quot;&gt;&quot;images/shadow.png&quot;&lt;/span&gt;, id:&lt;span class=&quot;string&quot;&gt;&quot;shadow&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// symbols:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.bigband = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.bigband);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;295&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;538&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.Bitmap1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.Bitmap1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;543&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;577&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.body = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;521&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;242&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.eye1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.eye1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;73&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.eye2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.eye2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;72&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.face1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize(img.face1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Bitmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;297&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;368&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// stage content:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(lib.people = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// people&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; lib.peoplemc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance.setTransform(&lt;span class=&quot;number&quot;&gt;295&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;312.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// qpmask (mask)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mask = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Shape();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mask._off = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mask.graphics.p(&lt;span class=&quot;string&quot;&gt;&quot;EgpUgqAMBU1AAAMAAABaIMhU1AAAg&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mask.setTransform(&lt;span class=&quot;number&quot;&gt;278.5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;308.1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// qp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance_1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; lib.qpmc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance_1.setTransform(&lt;span class=&quot;number&quot;&gt;291.5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;263.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance_1.mask = mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addChild(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance_1,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.instance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).prototype = p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Container();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p.nominalBounds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; cjs.Rectangle(&lt;span class=&quot;number&quot;&gt;263&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;31.5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;617&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;905.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(lib = lib||&amp;#123;&amp;#125;, images = images||&amp;#123;&amp;#125;, createjs = createjs||&amp;#123;&amp;#125;, ss = ss||&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lib, images, createjs, ss;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附上最终效果&quot;&gt;&lt;a href=&quot;#附上最终效果&quot; class=&quot;headerlink&quot; title=&quot;附上最终效果&quot;&gt;&lt;/a&gt;附上最终效果&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://b.gengshu.net/doc/flash/people.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我看效果&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;flash可以导出canvas动画，大大缩短制作动画所需要的时间。它是一个可视化IDE，可以让我们写少很多代码。做出来的动画，可以更加精确。同时，可以通用使用帧脚本中的 Javascript，为资源添加交互性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flash" scheme="http://aotu.io/tags/Flash/"/>
    
      <category term="Canvas" scheme="http://aotu.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>前方有坑，请绕道——Zepto 中使用 CORS</title>
    <link href="http://aotu.io/notes/2015/10/26/zepto-cors/"/>
    <id>http://aotu.io/notes/2015/10/26/zepto-cors/</id>
    <published>2015-10-26T12:24:22.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;众所周知，现在移动 Web 开发中，&lt;code&gt;Zepto.js&lt;/code&gt; 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 &lt;code&gt;jquery&lt;/code&gt; 类似的 API，而备受开发者喜爱。可随着时间的推移，我们遇到了不少 &lt;code&gt;Zepto&lt;/code&gt; 的坑，而且文件体积的大小跟代码的执行效率并没有什么关系，最后我们发现 &lt;code&gt;Zepto&lt;/code&gt; 并没有太大的卵用。&lt;/p&gt;
&lt;p&gt;jsperf 上有个 &lt;code&gt;zepto&lt;/code&gt; 和 &lt;code&gt;jquery&lt;/code&gt; DOM 操作的对比测试，有兴趣可以看一下：&lt;a href=&quot;http://jsperf.com/zepto-vs-jquery-2013/25&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zepto vs jquery - selectors&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开源项目好坏的一个评判标准之一：是否有一个强大的社区和一批积极的贡献者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们简单的看一个对比：&lt;br&gt;&lt;img src=&quot;http://jdc.jd.com/fd/blog_image/cors_pic_01.jpg&quot; alt=&quot;zepto github&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://jdc.jd.com/fd/blog_image/cors_pic_02.jpg&quot; alt=&quot;jquery github&quot;&gt;&lt;/p&gt;
&lt;p&gt;很明显，&lt;code&gt;Zepto&lt;/code&gt; 的活跃度远远没有 &lt;code&gt;jquery&lt;/code&gt; 高。不过言归正传，还是回到 &lt;code&gt;Zepto&lt;/code&gt; 的话题上。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一直以来，我们在移动端上面使用 &lt;code&gt;zepto&lt;/code&gt;并没有出现太大的问题。直至我们将 Ajax 跨域请求从 iframe 的方式切换成 &lt;code&gt;CORS&lt;/code&gt; 之后，一个比较隐蔽的 Bug 出现了。&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;页面在Webview中，点击按钮无效&lt;/li&gt;
&lt;li&gt;页面在部分浏览器中，无法拉取到用户的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;问题定位&quot;&gt;&lt;a href=&quot;#问题定位&quot; class=&quot;headerlink&quot; title=&quot;问题定位&quot;&gt;&lt;/a&gt;问题定位&lt;/h3&gt;&lt;p&gt;我通过 &lt;code&gt;Fiddler&lt;/code&gt; 或 &lt;code&gt;Charles&lt;/code&gt; 抓包发现，在 webview 中，点击按钮之后的 Ajax 请求并未发出，但是页面在手机QQ浏览器和 PC 上表现都是正常的。因为是在切换 CORS 之后，页面才出现异常的，在此之前并没有版本迭代。所以 CORS 代码首当其冲要进行深层次的 code-review，于是我直接在 &lt;code&gt;CORS&lt;/code&gt; 的代码块上进行 &lt;code&gt;try-catch&lt;/code&gt;，结果捕获到异常：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;INVALID_STATE_ERR: DOM Exception 11&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题深入剖析&quot;&gt;&lt;a href=&quot;#问题深入剖析&quot; class=&quot;headerlink&quot; title=&quot;问题深入剖析&quot;&gt;&lt;/a&gt;问题深入剖析&lt;/h3&gt;&lt;p&gt;先来看看测试代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.withCredentials) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    options = $.extend(options, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xhr: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         xhr.withCredentails = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xhr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; options.withCredentails&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(options)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码在大多数浏览器中都可以正常执行，但是在 Android 的 webview 和一些旧版本的手机浏览器中会抛出错误。&lt;/p&gt;
&lt;p&gt;以上代码和普通的 Ajax 请求不同的地方在于设置了 &lt;code&gt;CORS&lt;/code&gt; 的 &lt;code&gt;withCredentials&lt;/code&gt; 属性。（&lt;code&gt;CORS&lt;/code&gt; 请求默认是不会带上 &lt;code&gt;cookies&lt;/code&gt; 等身份信息的，如果需要在请求中带上 &lt;code&gt;cookies&lt;/code&gt;，则需要设置 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的 &lt;code&gt;withCredentials&lt;/code&gt; 属性值为 true）&lt;/p&gt;
&lt;p&gt;下面通过两个例子来分析一下：&lt;/p&gt;
&lt;p&gt;例一：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; XMLHttpRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.withCrendentials = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.&lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码在部分浏览器中依旧会抛出异常：&lt;code&gt;INVALID_STATE_ERR: DOM Exception 11&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例二：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; XMLHttpRequest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.&lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.withCredentials = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码可以正常执行，并不会抛出异常&lt;br&gt;为什么 &lt;code&gt;xhr.withCredentials&lt;/code&gt; 赋值在 &lt;code&gt;xhr.open()&lt;/code&gt; 方法之前就会出错呢？&lt;/p&gt;
&lt;p&gt;秉着科(xian)学(de)严(dan)谨(teng)的态度，翻看了 W3C 在 2011 年和 2012 年关于 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的规范文档，发现使用 &lt;code&gt;withCredentials&lt;/code&gt; 属性的规范发生了改变。&lt;/p&gt;
&lt;p&gt;2011 年的规范：&lt;br&gt;&lt;img src=&quot;http://jdc.jd.com/fd/blog_image/cors_pic_03.png&quot; alt=&quot;2011 CORS&quot;&gt;&lt;/p&gt;
&lt;p&gt;2012 年的规范：&lt;br&gt;&lt;img src=&quot;http://jdc.jd.com/fd/blog_image/cors_pic_04.png&quot; alt=&quot;2012 CORS&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比两份文档，我们重点看一下 step 1：&lt;br&gt;2011 年的规范中规定当 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的 &lt;code&gt;readyState&lt;/code&gt; 状态不是 &lt;code&gt;OPENED&lt;/code&gt; 时，会报错；&lt;br&gt;2012 年的规范中规定当 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的 &lt;code&gt;readyState&lt;/code&gt; 状态不是 &lt;code&gt;UNSENT&lt;/code&gt; 或 &lt;code&gt;OPENDED&lt;/code&gt; 时，会报错；&lt;/p&gt;
&lt;p&gt;下面简单介绍一下 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的 &lt;code&gt;readyState&lt;/code&gt; 值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;State&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;UNSENT&lt;/td&gt;
&lt;td&gt;open() has not been called yet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;OPENED&lt;/td&gt;
&lt;td&gt;send() has not been called yet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;HEADERS_RECEIVED&lt;/td&gt;
&lt;td&gt;send() has been called,and headers and status are available.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;LOADING&lt;/td&gt;
&lt;td&gt;Downloading;responseText holds partial data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;DONE&lt;/td&gt;
&lt;td&gt;The operation is complete&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由此可以看出，当一个 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 对象被创建时，默认的 &lt;code&gt;readyState&lt;/code&gt; 状态为 &lt;code&gt;UNSENT&lt;/code&gt;，只有执行了 open() 方法并且还没有执行 send() 方法时，&lt;code&gt;readyState&lt;/code&gt; 的状态才为 &lt;code&gt;OPENED&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;由于一些老版本的浏览器是按照 2012 年之前的规范来实现的，所以这一部分浏览器中，open() 方法要在设置 &lt;code&gt;withCredentials&lt;/code&gt; 属性之前调用。因此为了兼容，正确的做法应该是在 open() 方法之后再设置 &lt;code&gt;withCredentials&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;下面来看看 zepto.js v1.1.3 的源码：&lt;br&gt;&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (settings.xhrFields) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; settings.xhrFields) xhr[name] = settings.xhrFields[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;async&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; settings ? settings.&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(settings.&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;, settings.url, &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;, settings.username, settings.password)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zepto&lt;/code&gt; 是在 open() 方法之前设置 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 的属性值的，所以这会导致在使用 &lt;code&gt;CORS&lt;/code&gt; 并且设置 &lt;code&gt;withCredentials&lt;/code&gt; 的时候，代码在部分浏览器中报错。Android webview 中重现的几率很大。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总结：在使用 &lt;code&gt;CORS&lt;/code&gt; 时，如果要给 &lt;code&gt;withCredentials&lt;/code&gt; 赋值，请务必要在 open() 方法之后，否则无法向后兼容。&lt;/p&gt;
&lt;p&gt;对于 zepto.js 的问题，已经有用户向作者提交了 PR，作者也表示会在下个版本中修复（可是直到今天，都更新到 v1.1.6 版本了，还是没有修复这个问题，更改一下代码顺序就那么难吗？！难怪阿里也嫌 zepto 更新速度太慢，问题多，所以自己 fork 代码进行了定制化）。&lt;/p&gt;
&lt;p&gt;所以目前如果要用 &lt;code&gt;zepto&lt;/code&gt; 来进行 &lt;code&gt;CORS&lt;/code&gt; 的话，还是需要自己更改 &lt;code&gt;zepto&lt;/code&gt; 的 ajax 模块代码，然后手动构建。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/#the-withcredentials-attribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest Level 2 2011&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest Level 1 2014&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3.org/TR/XMLHttpRequest2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest Level 2 2014&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/madrobby/zepto/issues/921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zepto issues&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，现在移动 Web 开发中，&lt;code&gt;Zepto.js&lt;/code&gt; 是使用频率比较高的库之一。由于它的体积小，加载速度快，有着和 &lt;code&gt;jquery&lt;/code&gt; 类似的 API，而备受开发者喜爱。可随着时间的推移，我们遇到了不少 &lt;code&gt;Zepto&lt;
    
    </summary>
    
    
      <category term="Zepto" scheme="http://aotu.io/tags/Zepto/"/>
    
      <category term="CORS" scheme="http://aotu.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>探究transform动画元素的z-index</title>
    <link href="http://aotu.io/notes/2015/10/21/z-index-and-translate3d/"/>
    <id>http://aotu.io/notes/2015/10/21/z-index-and-translate3d/</id>
    <published>2015-10-21T00:24:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;z-index-和-translate3d&quot;&gt;&lt;a href=&quot;#z-index-和-translate3d&quot; class=&quot;headerlink&quot; title=&quot;z-index 和 translate3d&quot;&gt;&lt;/a&gt;z-index 和 translate3d&lt;/h2&gt;&lt;p&gt;在一次需求中，需要做出三张卡牌走马灯式滚动的效果，由于在前面的一张卡牌需要挡住后面的卡牌，自然而然地就用 z-index 使前面的卡牌显示在最上面，配以 transform 动画让“走马灯”滚起来，在开发过程中，在 PC 侧 Chrome 中表现良好，在本人手机浏览器中也表现良好，最后测试时却发现，在微信客户端或 QQ 客户端中打开页面出现问题，“走马灯”滚动时，卡牌先通过 transform 就位后，才把 z-index 设置较大的卡牌置于上面，感觉上非常的不流畅。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2015/151116_card.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;究其原因，发现这是某些浏览器的渲染规则，涉及到 &lt;code&gt;stacking context&lt;/code&gt; 的概念，transform 的元素会创建新的 DOM，层级会在普通元素的上面，除了 transform ,还有哪些情况会创建新 &lt;code&gt;stacking context&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;MDN 上有相关介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;the root element (HTML),&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;positioned (absolutely or relatively) with a z-index value other than “auto”,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a flex item with a z-index value other than “auto”,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elements with an opacity value less than 1,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;elements with a transform value other than “none”,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;elements with a mix-blend-mode value other than “normal”,&lt;/li&gt;
&lt;li&gt;elements with isolation set to “isolate”, on mobile WebKit and Chrome 22+, position: fixed always creates a new stacking context, even when z-index is “auto”,&lt;/li&gt;
&lt;li&gt;specifing any attribute above in will-change even you don’t write themselves directly&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图是对 transform 和 opacity 的测试结果：&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2015/151117_twotest.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;很明显，红色 div 都在绿色 div 上面了，说明真的有创建了个更高层级的 &lt;code&gt;stacking context&lt;/code&gt;。再做进一步测试，我给两组的 div 都加了 &lt;code&gt;position:relative;z-index:1;&lt;/code&gt;，结果绿色的都在上面了，手机微信上也一样，这能不能说明 z-index 对层级的影响大于 transform 和 opacity 呢。&lt;/p&gt;
&lt;p&gt;至于 transform 变换的时候会让 z-index “临时失效”，其实并非 z-index 失效了，只是 z-index 被用在不同的 &lt;code&gt;stacking context&lt;/code&gt; 上，而非在默认的 context 上同等地比较层级了。所以 DOM 在 transform 的工程中，DOM 处于一个新的 &lt;code&gt;stacking context&lt;/code&gt; 里，z-index 也是相对于这个 &lt;code&gt;stacking context&lt;/code&gt; 的，所以表现出来的实际是 &lt;code&gt;stacking context&lt;/code&gt; 的层次，动画一结束，DOM 又回到默认的 context 里，这时的 z-index 才是在同一个 context 上的比较。&lt;/p&gt;
&lt;p&gt;那该用什么方法来控制卡牌的层级，又能让动画流畅地表现呢，当然是 translate3d 中的 z-axis，很多时候我们并不知道它是用来做什么的，平常用得最多的只是它的 x-axis 和 y-axis，不妨先看个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.box1 {width:100px;height:100px;background:red;transform:perspective(100px) translate3d(0, 0, 100px);}
.box2 {width:100px;height:100px;background:blue;transform:perspective(100px) translate3d(0, 0, 200px);}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际效果是，看不到它们，然后我们再设置 perspective 为 201px，这时可以很明显地看到，box2 占据了整个屏幕，而 box1 宽高约为 200px，唯有设置 translate3d(0,0,0) 时，宽高才为 100px。&lt;/p&gt;
&lt;p&gt;现在可以来理解下 perspective 和 translate3d 的关系，perspective 可以比作镜头和 DOM 的距离，实际上设置多少都没影响，因为它通过跟 z-axis 上的数值比例来影响样式，它更像是一个刻度，而 translate3d 的 z-axis 则表示了 DOM 和屏幕的距离。假定镜头跟屏幕的距离固定了，z-axis 越大，DOM 逐渐远离屏幕，靠近镜头，这时 DOM 看起来也就越大，当 z-axis 大于或等于 perspective 时，DOM元素已经在我们镜头的后面了，所以也就看不到它了。&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img src=&quot;/img/post/Manjiz/2015/151116_perspective.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在也就好理解为什么 perspective 和 translate3d 能够影响 DOM 的层级了，它们在屏幕和镜头之间的距离不同，所以就有了层次，移动端设备很好地表现了这个结论，但在 PC 的 Chrome 上测试则不然，我们仍需要 z-index 才会表现出我们需要的 层次关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://segmentfault.com/q/1010000002480824&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://segmentfault.com/q/1010000002480824&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;z-index-和-translate3d&quot;&gt;&lt;a href=&quot;#z-index-和-translate3d&quot; class=&quot;headerlink&quot; title=&quot;z-index 和 translate3d&quot;&gt;&lt;/a&gt;z-index 和 translate3d&lt;/
    
    </summary>
    
    
      <category term="translate3d" scheme="http://aotu.io/tags/translate3d/"/>
    
      <category term="zindex" scheme="http://aotu.io/tags/zindex/"/>
    
  </entry>
  
  <entry>
    <title>我的vim二三事</title>
    <link href="http://aotu.io/notes/2015/10/16/vim-list/"/>
    <id>http://aotu.io/notes/2015/10/16/vim-list/</id>
    <published>2015-10-16T10:24:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;选择你所喜欢的，爱你所选择的–列夫·托尔斯泰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;不是理由的理由&quot;&gt;&lt;a href=&quot;#不是理由的理由&quot; class=&quot;headerlink&quot; title=&quot;不是理由的理由&quot;&gt;&lt;/a&gt;不是理由的理由&lt;/h3&gt;&lt;p&gt;用了几年Vim，我发现我越来越喜欢它了，和好多人一样喜欢它，也许喜欢的理由各不相同，但大抵有如下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使你用了几年了，你还是会在某天惊呼原来还可以这么操作，&lt;strong&gt;它总会给你带来惊喜&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当你要操作的时候你根本不用去想那些快捷键(也许不能叫快捷键，它是谓语{operator}和宾语{text-objects}，组合在一起形成不同指令,好像自然语言)，它们就在你意识里。也许开始的时候你需要去记一些快捷键（别的编辑器不用吗？），但记住以后你熟练了，就像是骑自行车，你就忘记它的存在，你只用输出你的思想，&lt;strong&gt;它让你更专注你要做的事情本身&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;虽然会有很多的快捷键以便让不同的人找到他们最佳的操作方式，但是&lt;strong&gt;每个人常用的不外乎特定的十几个快捷键&lt;/strong&gt;，而这些快捷键都是有内在逻辑让你记住的，比如：d(elete)删除,D(elete)删除到行尾,d(elete)&lt;br&gt;a w(ord) 删除一个词。&lt;/li&gt;
&lt;li&gt;如果懒，那么你学Vim是没错的，它是&lt;strong&gt;变化中的永恒&lt;/strong&gt;，那么多的编辑器更新迭代，它们都有vi模式或vi插件，你可以用你所学，一如既往。&lt;/li&gt;
&lt;li&gt;它有&lt;strong&gt;非常多的插件&lt;/strong&gt;，你可以定制一些自己喜欢的强大功能。（这其实也是个缺点的吧，毕竟自己配置多费时间呀，不过好些人一个配置用了十多年）。&lt;a href=&quot;http://www.zhihu.com/question/20151659&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;到底有多强大呢，看看知乎上这篇文章。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我知道上面这些说得太抽象了，也许我们应该来点具体的，你可以边看边对比一下你使用的编辑器的操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;编辑&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用 Vim&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何向下移动7行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;7j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何删除一个词（word）&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dw&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何删除一行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何删除｛｝里的内容&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;di{&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;光标移动到第80行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;80G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何在当前文件里搜索光标所在位置的词&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;*(#)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如何在50行到100行之间查找并替换&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:50,100/old/new/g&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果你想在同一文件中对比两个不同的块时怎么做&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;:sp (to ‘split’ the view)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果你想要打开光标所在文件名的文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gf (which means ‘g’o to this ‘f’ile)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果你想要得到每行前10个字母而它后面的数据不是你想要的&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl-v (win 下是ctrl-q)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果你想要转换别人给到你的混合大小的文件变成小写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;1GVG u&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;录制一系列命令然后执行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;用宏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在width:16px的数字16上加20&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;20 ctrl+a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;输入23+45+119的结果&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ctrl+r=23+45+119&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上的这些操作都是直接在键盘上操作的，没有用鼠标。&lt;/p&gt;
&lt;p&gt;喜欢一个人的时候总能说出好多的理由，而不喜欢却只需要一个理由。此时我赞美我的女神你也在心里列举了你心中女神的诸多可爱美丽特点。所以可以想象各种关于编辑器文章下的各种互喷吐槽，即使是同一个编辑器的文章下也不免相互吐槽，毕竟不同人理念也是不一样的。&lt;/p&gt;
&lt;h3 id=&quot;有所为有所不为&quot;&gt;&lt;a href=&quot;#有所为有所不为&quot; class=&quot;headerlink&quot; title=&quot;有所为有所不为&quot;&gt;&lt;/a&gt;有所为有所不为&lt;/h3&gt;&lt;p&gt;vim是个高效的文本编辑器，在文本编辑这一领域可谓是独步天下，高手&lt;a href=&quot;http://zhuanlan.zhihu.com/vim-non-programming/19918627&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用vim处理SRT字幕内容&lt;/a&gt;，痴迷者除了使用vim写代码、&lt;a href=&quot;http://www.vimer.cn?p=1222&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发邮件&lt;/a&gt;、&lt;a href=&quot;http://bluegene8210.is-programmer.com/posts/67910.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看股票&lt;/a&gt;、写博客、写markdown(这篇文章就是vim写的markdown)还&lt;a href=&quot;http://www.iplaysoft.com/vimium-and-vimperator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用vim浏览网页&lt;/a&gt;，普通人可以把它作为&lt;a href=&quot;http://blog.sina.com.cn/s/blog_45dac66f010005kw.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;普通人的编辑利器&lt;/a&gt;。在文本编辑领域，后来者只有模仿而无法超越vim。小李飞刀独步天下却也砍不了骨头，在代码编程领域，公认的最适合的场景是做Unix/Linux服务器编程,不用下载服务器端的文件而直接修改；其次是编写html/css/javascript/shell/python/c等；最后在mac、linux下要改文件用系统带的vim随手改改。而编写Java&lt;br&gt;EE、Objective-C等还是用Eclipse、XCode等IDE的比较好。&lt;/p&gt;
&lt;h3 id=&quot;君子性非异也，善假于物也&quot;&gt;&lt;a href=&quot;#君子性非异也，善假于物也&quot; class=&quot;headerlink&quot; title=&quot;君子性非异也，善假于物也&quot;&gt;&lt;/a&gt;君子性非异也，善假于物也&lt;/h3&gt;&lt;p&gt;vim只是一个工具而已，它并不能让你码代码的能力提升，只能帮你更快速地输出你的思维。每一个工具都有它特定的场景，聪明的人总会在适当的场景做出合适的选择。好多人都说学习起来好难的呀，投入的成本换来的收益是不是成正比的呢？我觉得还是值得的，上面也说过，它是万变中的不变，同时它真的是个高效的工具，另外也许最后出来的高效的编辑外还带给你一些东西，比如好奇发现带来的惊喜，又如你发现你用了几年还有好多不会的谦虚，还有用宏解决了一个棘手问题的喜悦。最后它只是一个工具，是雕刻林诗音松木人像的小刀，或是冠绝武林的小李飞刀，关键在人。&lt;/p&gt;
&lt;h3 id=&quot;不积跬步无以至千里&quot;&gt;&lt;a href=&quot;#不积跬步无以至千里&quot; class=&quot;headerlink&quot; title=&quot;不积跬步无以至千里&quot;&gt;&lt;/a&gt;不积跬步无以至千里&lt;/h3&gt;&lt;p&gt;佛渡有缘人，细想这个‘有缘人’还挺有意思的，其实就是信的人，不信的说再多也是没有用的。如果想学，不必卸载你的是编辑器，做出破釜沉舟之势，万一用了两天觉得不方便或是有紧急的要修改的内容，要换回来用熟悉的编辑器。另外也不要觉得一时学不会就感觉挫折，毕竟很多东西都不可一蹴而就的，需要一点积累，所以慢慢来的。那些《7天XX》《21精通XX》真的害了好多人，慢慢来，实在不行认为自己笨了，不还有勤能补拙吗？好多的编辑器都有vi插件或模式，你可以找一找然后装上试试的，等熟悉了觉得不满足了再换成vim，要是觉得一直用vi插件也不错的就一直用着，能解决问题的顺手的才是最高效的。&lt;/p&gt;
&lt;h3 id=&quot;选择你所喜欢的，爱你所选择的&quot;&gt;&lt;a href=&quot;#选择你所喜欢的，爱你所选择的&quot; class=&quot;headerlink&quot; title=&quot;选择你所喜欢的，爱你所选择的&quot;&gt;&lt;/a&gt;选择你所喜欢的，爱你所选择的&lt;/h3&gt;&lt;p&gt;我在小学的时候搞了个小霸王说要学习五笔，然后字根没有背完就忘记了，大学时候再一个想起这个事决定再学五笔，然后没有几天又放弃了，毕业两年后想起学五笔这个事，心里有个结，于是又学起来了，然后一直在用，虽然是五笔混合模式，偶尔也用纯五笔模式。vim就是在我可以用五笔的时候开始学的，当时拿同事的vimrc来直接就用了，现在也在用的，只是改了少许的地方，一直在够用就好的状态，然后在用的时候觉得有什么不自然的地方就找一下答案的，慢慢地越来越顺手了。细想我这个慢方法还是可取的，那么多我的命令我只会我常用的十几个，但那也是够用的了，并且是越来越喜欢，看着别人用的也还常发现还有很多不会的东西。&lt;/p&gt;
&lt;p&gt;再回首，一切是那样自然，一如vim的理念keep it simple，我也只装了平时常用的几个插件，还有一些比较强大的插件也没有用得着，所以没有装上。最近为了给同事们讲一下vim,才意识到虽然平时说vim有几个模式，但是用的时候自己也没有区分得很清楚，觉得就是一个整体，应该那样，有时候我们只是为了区分和认识一个东西才把它解构了，就像一首好的歌曲，我们只用觉得好听，那些乐评人说的为什么好感觉都很有道理。vim命令有多难记也还是有逻辑的；vim里可以快速精确的查找定位；vim真的好像一切文本皆对象，操作针对字符，词，行，块，文件这些对象；vim的设计哲学是如果你的工作只需要做一次，那没问题，怎么搞都行，如果你的工作是要重复地完成某些工作，则vim总可以帮你找到更少的按键方式来实现相同的目标。如&lt;a href=&quot;http://vimgolf.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VimGolf&lt;/a&gt;所说Real Vim ninjas count every keystroke - do you?  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;选择你所喜欢的，爱你所选择的–列夫·托尔斯泰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;不是理由的理由&quot;
    
    </summary>
    
    
      <category term="Vim" scheme="http://aotu.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>PostCSS快速入门使用</title>
    <link href="http://aotu.io/notes/2015/10/13/start-postcss/"/>
    <id>http://aotu.io/notes/2015/10/13/start-postcss/</id>
    <published>2015-10-13T09:34:25.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;初识PostCSS&quot;&gt;&lt;a href=&quot;#初识PostCSS&quot; class=&quot;headerlink&quot; title=&quot;初识PostCSS&quot;&gt;&lt;/a&gt;初识PostCSS&lt;/h2&gt;&lt;p&gt;如果你第一次听说&lt;code&gt;PostCSS&lt;/code&gt;这个东西，那么请看下面摘自官方&lt;code&gt;Github&lt;/code&gt;的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS is a tool for transforming CSS with JS Plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images, and more&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成中文的意思如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PostCSS 是一套利用JS插件实现的用来改变CSS的工具.这些插件能够支持变量和混合语法，转换未来CSS语法，内联图片，还有更多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们用过&lt;code&gt;Less&lt;/code&gt;、&lt;code&gt;SASS&lt;/code&gt;等工具来对CSS做&lt;code&gt;预处理&lt;/code&gt;操作，按照它们约定的语法来书写并且最终转换成可用的样式，这付出的代价是&lt;strong&gt;必须先熟悉这个工具的书写语法&lt;/strong&gt;。 &lt;/p&gt;
&lt;p&gt;随着近几年 &lt;a href=&quot;http://gruntjs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Grunt&lt;/a&gt;、&lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gulp&lt;/a&gt;、&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt; 等自动化工具的兴起，&lt;code&gt;组合式应用&lt;/code&gt;变得非常的热门，那&lt;code&gt;PostCSS&lt;/code&gt;存在的意义是什么呢？答案是：&lt;strong&gt;CSS生态系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PostCSS&lt;/code&gt;拥有非常多的插件，诸如自动为CSS添加浏览器前缀的插件&lt;code&gt;autoprefixer&lt;/code&gt;、当前移动端最常用的&lt;code&gt;px&lt;/code&gt;转&lt;code&gt;rem&lt;/code&gt;插件&lt;code&gt;px2rem&lt;/code&gt;，还有支持尚未成为CSS标准但特定可用的插件&lt;code&gt;cssnext&lt;/code&gt;，还有很多很多。就连著名的&lt;code&gt;Bootstrap&lt;/code&gt;在下一个版本&lt;code&gt;Bootstrap 5&lt;/code&gt;也将使用&lt;code&gt;PostCSS&lt;/code&gt;作为样式的基础。&lt;/p&gt;
&lt;p&gt;一句话来概括PostCSS：&lt;strong&gt;CSS编译器能够做到的事情，它也可以做到，而且能够做得更好&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速使用PostCSS&quot;&gt;&lt;a href=&quot;#快速使用PostCSS&quot; class=&quot;headerlink&quot; title=&quot;快速使用PostCSS&quot;&gt;&lt;/a&gt;快速使用PostCSS&lt;/h2&gt;&lt;p&gt;上面大致介绍了&lt;code&gt;PostCSS&lt;/code&gt;，也许我们并没有在头脑里形成对它的认知，那下面我们就通过一个简单地实例来看看如何使用&lt;code&gt;PostCSS&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PostCSS&lt;/code&gt;得益于插件，支持Grunt,Gulp,webpack,Broccoli,Brunch还有ENB，这里我们将以&lt;code&gt;Gulp&lt;/code&gt;作为实例来讲。&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;&lt;p&gt;创建并进入我们的实例目录&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir postcss-demo &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; postcss-demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后快速生成&lt;code&gt;package.json&lt;/code&gt;文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --yes 参数能够帮助我们快速生成默认的package.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init --yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将上面创建的&lt;code&gt;package.json&lt;/code&gt;文件的&lt;code&gt;main&lt;/code&gt;参数改为&lt;code&gt;gulpfile.js&lt;/code&gt;，然后安装我们所需的依赖&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# gulp跟gulp-postcss是必须的，后面两个插件为了演示用途&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i gulp gulp-postcss autoprefixer autoprefixer-core cssnext --save-dev &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里用命令行进行创建，你也可以手动新建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch gulpfile.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改gulpfile-js&quot;&gt;&lt;a href=&quot;#修改gulpfile-js&quot; class=&quot;headerlink&quot; title=&quot;修改gulpfile.js&quot;&gt;&lt;/a&gt;修改gulpfile.js&lt;/h3&gt;&lt;p&gt;将下面代码贴进&lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postcss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-postcss&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; autoprefixer = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;autoprefixer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cssnext = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;cssnext&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义css任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//定义postcss任务流数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; processors = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autoprefixer(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      browsers:[&lt;span class=&quot;string&quot;&gt;&#39;last 3 version&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cascade: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      remove: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cssnext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./src/css/*.css&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(postcss(processors))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建示例样式&quot;&gt;&lt;a href=&quot;#创建示例样式&quot; class=&quot;headerlink&quot; title=&quot;创建示例样式&quot;&gt;&lt;/a&gt;创建示例样式&lt;/h3&gt;&lt;p&gt;在项目根目录下创建src目录，再在src目录下面创建css目录，然后创建style.css文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里用命令创建，你也可以手动创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p src/css &amp;amp;&amp;amp; touch style.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑样式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;--fontSize&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;--mainColor&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#12345678&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;--highlightColor&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;hwb&lt;/span&gt;(190, 35%, 20%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt;(--mainColor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt;(--fontSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;calc&lt;/span&gt;(var(--fontSize) * &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;calc&lt;/span&gt;((var(--fontSize) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;运行实例&quot;&gt;&lt;a href=&quot;#运行实例&quot; class=&quot;headerlink&quot; title=&quot;运行实例&quot;&gt;&lt;/a&gt;运行实例&lt;/h3&gt;&lt;p&gt;一切准备就绪之后可以在项目根目录下执行刚才我们定义的任务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不出什么意外的话就会在根目录下面生成一个&lt;code&gt;dist&lt;/code&gt;文件夹，里面有一个样式文件，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:-webkit-flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:-ms-flexbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:-webkit-box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#123456&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(18, 52, 86, 0.47059);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1.5rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;calc&lt;/span&gt;(0.5rem + 1px);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到我们写的样式自动添加了浏览器前缀，并且一些未来CSS语法也被转换了。&lt;/p&gt;
&lt;h2 id=&quot;了解PostCSS&quot;&gt;&lt;a href=&quot;#了解PostCSS&quot; class=&quot;headerlink&quot; title=&quot;了解PostCSS&quot;&gt;&lt;/a&gt;了解PostCSS&lt;/h2&gt;&lt;p&gt;通过上面的实例我们应该知道&lt;code&gt;PostCSS&lt;/code&gt;的使用方法，此时让我们先回想一下&lt;code&gt;CSS预处理器&lt;/code&gt;的使用历程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学习该CSS预处理器的语法特性，诸如：变量定义、嵌套、继承&lt;/li&gt;
&lt;li&gt;在特定后缀名(.less/.scss等)的文件按照上面的语法进行编写&lt;/li&gt;
&lt;li&gt;通过Gulp/Grunt/Webpack等自动化工具或者手动编译成CSS样式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而&lt;code&gt;PostCSS&lt;/code&gt;的使用历程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接按照CSS标准语法来书写CSS样式文件&lt;/li&gt;
&lt;li&gt;通过Gulp/Grunt/Webpack等自动化工具加载PostCSS插件转换输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过对比我们类比一个结论：&lt;em&gt;CSS预处理器好比给你一个工具箱，工具箱里面有什么东西该怎么拿已经跟你约定好，你必须按照这个规则来拿；而PostCSS好比给你一个盒子，你可以从旁边选择自己需要的工具放进盒子打包拿走，如果还不够用你可以自己造一个工具&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;深入PostCSS&quot;&gt;&lt;a href=&quot;#深入PostCSS&quot; class=&quot;headerlink&quot; title=&quot;深入PostCSS&quot;&gt;&lt;/a&gt;深入PostCSS&lt;/h2&gt;&lt;p&gt;&lt;code&gt;PostCSS&lt;/code&gt;自身只包括了&lt;code&gt;CSS分析器&lt;/code&gt;，&lt;code&gt;CSS节点树API&lt;/code&gt;，&lt;code&gt;source map生成器&lt;/code&gt;，&lt;code&gt;CSS节点拼接器&lt;/code&gt;，而基于&lt;code&gt;PostCSS&lt;/code&gt;的插件都是使用了&lt;code&gt;CSS节点树API&lt;/code&gt;来实现的。&lt;/p&gt;
&lt;p&gt;我们都知道CSS的组成如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;element &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prop1 : rule1 rule2 ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prop2 : rule1 rule2 ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prop2 : rule1 rule2 ...;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是一条一条的样式规则组成，每一条样式规则包含一个或多个属性跟值。所以&lt;code&gt;PostCSS&lt;/code&gt;的执行过程大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Parser&lt;br&gt; 利用&lt;code&gt;CSS分析器&lt;/code&gt;读取CSS字符内容，得到一个完整的&lt;code&gt;节点树&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugin&lt;br&gt; 对上面拿到的&lt;code&gt;节点树&lt;/code&gt;利用&lt;code&gt;CSS节点树API&lt;/code&gt;进行一系列的转换操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plugin&lt;br&gt; 利用&lt;code&gt;CSS节点拼接器&lt;/code&gt;将上面转换之后的节点树重新组成CSS字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stringifier&lt;br&gt; 在上面转换期间可利用&lt;code&gt;source map生成器&lt;/code&gt;表明转换前后字符的对应关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;PostCSS性能&quot;&gt;&lt;a href=&quot;#PostCSS性能&quot; class=&quot;headerlink&quot; title=&quot;PostCSS性能&quot;&gt;&lt;/a&gt;PostCSS性能&lt;/h3&gt;&lt;p&gt;在PostCSS官方推特上看到，由JavaScript编写的PostCSS比C++编写的libsass还要快3倍，下面来自官方推特的截图:&lt;/p&gt;
&lt;p class=&quot;user_img&quot;&gt;&lt;img title=&quot;PostCSS性能对比图&quot; class=&quot;test_img&quot; src=&quot;/img/post/cnt1992/postcss.png&quot; alt=&quot;PostCSS性能对比图&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你对上面的性能截图有疑问，可以亲自来&lt;a href=&quot;https://github.com/postcss/benchmark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;测试看看。&lt;/p&gt;
&lt;h3 id=&quot;开始编写自己的PostCSS插件&quot;&gt;&lt;a href=&quot;#开始编写自己的PostCSS插件&quot; class=&quot;headerlink&quot; title=&quot;开始编写自己的PostCSS插件&quot;&gt;&lt;/a&gt;开始编写自己的PostCSS插件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;PostCSS&lt;/code&gt;在自己的&lt;a href=&quot;https://github.com/postcss/postcss#plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;上放了一些常用的插件，更多的插件可以在&lt;a href=&quot;http://postcss.parts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postcss.parts&lt;/a&gt;进行搜索。&lt;/p&gt;
&lt;p&gt;但有时候已有的插件不满足我们的需求，这个时候需要编写自己的PostCSS插件，下面我们将一步步创建一个简单的插件，这个插件功能非常简单，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  文件位置：src/css/style.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\5FAE\8F6F\96C5\9ED1&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;fontstack&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Arial&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当输入上面的样式时，会生成下面的样式：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  文件位置：dist/style.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\5FAE\8F6F\96C5\9ED1&quot;&lt;/span&gt;,tahoma,arial;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;环境准备-1&quot;&gt;&lt;a href=&quot;#环境准备-1&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;&lt;p&gt;我们将以&lt;code&gt;Gulp&lt;/code&gt;作为基础来实现我们的插件，首先创建项目文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir postcss-plugin &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; postcss-plugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后快速创建&lt;code&gt;package.json&lt;/code&gt;文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init --yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着先安装必备的包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i gulp postcss gulp-postcss --save-dev &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再创建&lt;code&gt;gulpfile.js&lt;/code&gt;并且输入下面内容:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postcss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-postcss&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; processors = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./src/css/*.css&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(postcss(processors))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建插件文件夹&quot;&gt;&lt;a href=&quot;#创建插件文件夹&quot; class=&quot;headerlink&quot; title=&quot;创建插件文件夹&quot;&gt;&lt;/a&gt;创建插件文件夹&lt;/h3&gt;&lt;p&gt;我们在执行&lt;code&gt;npm install&lt;/code&gt;安装的包都放置在&lt;code&gt;node_modules&lt;/code&gt;文件夹下面，这里我们创建PostCSS的插件文件夹，注意：&lt;strong&gt;PostCSS的插件命名格式为：postcss-插件名字&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 这里采用命令新建文件夹，你也可以手动创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir node_modules/postcss-fontstack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建插件入口文件&quot;&gt;&lt;a href=&quot;#创建插件入口文件&quot; class=&quot;headerlink&quot; title=&quot;创建插件入口文件&quot;&gt;&lt;/a&gt;创建插件入口文件&lt;/h3&gt;&lt;p&gt;现在我们可以在&lt;code&gt;postcss-fontstack&lt;/code&gt;文件夹创建入口文件&lt;code&gt;index.js&lt;/code&gt;，&lt;code&gt;PostCSS&lt;/code&gt;创建插件的方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postcss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;postcss&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = postcss.plugin(&lt;span class=&quot;string&quot;&gt;&#39;插件名字&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; 插件名字(&lt;span class=&quot;params&quot;&gt;选项&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//这里写插件代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那我们可以在&lt;code&gt;index.js&lt;/code&gt;里面贴入下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postcss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;postcss&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules.exports = postcss.plugin(&lt;span class=&quot;string&quot;&gt;&#39;fontstack&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fontstack&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; options &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; css &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    options = options || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fontstack_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;Arial&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;tahoma,arial&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;Times New Roman&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;TimesNewRoman, &quot;Times New Roman&quot;, Times, Baskerville, Georgia, serif&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toTitleCase&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; str &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.replace(&lt;span class=&quot;regexp&quot;&gt;/\w\S*/g&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; txt &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; txt.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toUpperCase() + txt.substr(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// css.walkRules方法用来遍历每一条css规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    css.walkRules( &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; rule &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// walkDecls方法用来解析属性跟值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rule.walkDecls( &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; decl, i &lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = decl.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( value.indexOf( &lt;span class=&quot;string&quot;&gt;&#39;fontstack(&#39;&lt;/span&gt; ) !== &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fontstack_requested = value.match(&lt;span class=&quot;regexp&quot;&gt;/\(([^)]+)\)/&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;regexp&quot;&gt;/[&quot;&#39;]/g&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fontstack_requested = toTitleCase( fontstack_requested );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fontstack = fontstack_config[ fontstack_requested ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; firstFont = value.substr( &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, value.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;fontstack(&#39;&lt;/span&gt;) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newValue = firstFont + fontstack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                decl.value = newValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;gulpfile.js&lt;/code&gt;引入上面的插件，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postcss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-postcss&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; processors = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./src/css/*.css&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(postcss(processors))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./dist&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;运行实例-1&quot;&gt;&lt;a href=&quot;#运行实例-1&quot; class=&quot;headerlink&quot; title=&quot;运行实例&quot;&gt;&lt;/a&gt;运行实例&lt;/h3&gt;&lt;p&gt;在项目根目录下运行实例，最终实现我们的效果&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gulp css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;再谈PostCSS&quot;&gt;&lt;a href=&quot;#再谈PostCSS&quot; class=&quot;headerlink&quot; title=&quot;再谈PostCSS&quot;&gt;&lt;/a&gt;再谈PostCSS&lt;/h2&gt;&lt;p&gt;基于&lt;code&gt;PostCSS&lt;/code&gt;能够做到很多&lt;code&gt;CSS预处理器&lt;/code&gt;做不到的事情，未来发展前景还是挺不错的，而且最新的&lt;code&gt;Atom&lt;/code&gt;编辑器也可以下载插件来支持&lt;code&gt;PostCSS&lt;/code&gt;这种语法。&lt;/p&gt;
&lt;p&gt;但这就意味着&lt;code&gt;CSS预处理器&lt;/code&gt;过时了么？不会。&lt;code&gt;PostCSS&lt;/code&gt;的出现并不是为了替换掉之前的技术，只是提供多一种思路让我们去考虑，就比如Sass编译后再加&lt;code&gt;autoprefixer&lt;/code&gt;自动补齐浏览器前缀这种做法当前还是比较流行的。&lt;/p&gt;
&lt;p&gt;再回到文章最开始说的，&lt;code&gt;PostCSS&lt;/code&gt;其实是在打造一个改变CSS开发方式的生态系统。也许暂时我们还是保持传统的开发方式，但未来对于&lt;code&gt;PostCSS&lt;/code&gt;我还是保持关注，它是值得期待的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初识PostCSS&quot;&gt;&lt;a href=&quot;#初识PostCSS&quot; class=&quot;headerlink&quot; title=&quot;初识PostCSS&quot;&gt;&lt;/a&gt;初识PostCSS&lt;/h2&gt;&lt;p&gt;如果你第一次听说&lt;code&gt;PostCSS&lt;/code&gt;这个东西，那么请看下面摘自官
    
    </summary>
    
    
      <category term="PostCSS" scheme="http://aotu.io/tags/PostCSS/"/>
    
  </entry>
  
  <entry>
    <title>凹凸实验室博客V1.0.0发布</title>
    <link href="http://aotu.io/notes/2015/10/08/aotu-blog-v1/"/>
    <id>http://aotu.io/notes/2015/10/08/aotu-blog-v1/</id>
    <published>2015-10-08T00:24:35.000Z</published>
    <updated>2016-03-31T02:31:36.000Z</updated>
    
    <content type="html">&lt;p&gt;筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。&lt;br&gt;它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自&lt;a href=&quot;http://html5up.net/future-imperfect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;future-imperfect&lt;/a&gt;的扁平简约，暂且命名为&lt;code&gt;o2&lt;/code&gt;。主题单独开源于 &lt;a href=&quot;o2team/hexo-theme-o2&quot;&gt;hexo-theme-o2&lt;/a&gt;，有兴趣的朋友可以自由下载使用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;博客的一些特性&quot;&gt;&lt;a href=&quot;#博客的一些特性&quot; class=&quot;headerlink&quot; title=&quot;博客的一些特性&quot;&gt;&lt;/a&gt;博客的一些特性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用github头像&lt;/p&gt;
&lt;p&gt;记得将你们在github的头像更新到最帅，将你github的用户名在文章内头部填好即可！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/hexo-wordcount&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-wordcount&lt;/a&gt; 显示博文字数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ibruce.info/2015/04/04/busuanzi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不蒜子&lt;/a&gt; 统计博文的pv&lt;/li&gt;
&lt;li&gt;每日一句英文警句&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://duoshuo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多说&lt;/a&gt;评论&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;使用指引&quot;&gt;&lt;a href=&quot;#使用指引&quot; class=&quot;headerlink&quot; title=&quot;使用指引&quot;&gt;&lt;/a&gt;使用指引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装hexo&lt;/p&gt;
 &lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-&lt;span class=&quot;keyword&quot;&gt;cli&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将o2team.github.io的源码拉到本地&lt;/p&gt;
 &lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@github&lt;span class=&quot;selector-class&quot;&gt;.com&lt;/span&gt;:o2team/o2team&lt;span class=&quot;selector-class&quot;&gt;.github&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.io&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.git&lt;/span&gt; o2team&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化子模块(submodules)&lt;/p&gt;
 &lt;figure class=&quot;highlight tcl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; o2team&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git submodule init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git submodule &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 切换至themes/o2目录，签出master分支&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; ../themes/o2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装nodejs包&lt;/p&gt;
 &lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 切换回根目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;span class=&quot;regexp&quot;&gt;/../&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;hexo s --watch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 运行上述命令后，浏览器打开 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 即可本地访问我们的网站&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;创建文章&quot;&gt;&lt;a href=&quot;#创建文章&quot; class=&quot;headerlink&quot; title=&quot;创建文章&quot;&gt;&lt;/a&gt;创建文章&lt;/h2&gt;&lt;p&gt;有两种方法创建文章，可任选其一：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：文件名不要出现中文!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;hexo new&lt;/code&gt; 命令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拷贝现有的文章进行修改&lt;/p&gt;
&lt;p&gt;hexo使用markdown来编辑文章，在source目录下，拷贝任意md文件进行创建新的文章。具体可参考下hexo的官方说明&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;文章规范&quot;&gt;&lt;a href=&quot;#文章规范&quot; class=&quot;headerlink&quot; title=&quot;文章规范&quot;&gt;&lt;/a&gt;文章规范&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用markdown写博文 &lt;/li&gt;
&lt;li&gt;&lt;p&gt;博文图片统一位置：&lt;code&gt;source/img/post/&lt;/code&gt;&lt;br&gt; 在博客内容中可以使用 &lt;code&gt;pimg&lt;/code&gt; 自定义标签来引用图片。注意别覆盖了别人的图片!!!&lt;br&gt; 其语法格式为：&lt;br&gt; &lt;code&gt;{% pimg imageName [alt text] [JSONImageAttibutes] %}&lt;/code&gt;&lt;br&gt; 例如：&lt;br&gt; &lt;code&gt;{% pimg post-aotu.jpg &quot;空格请用%20来区分&quot; &#39;{&quot;title&quot;:&quot;hello&quot;,&quot;class&quot;:&quot;test_img&quot;}&#39; %}&lt;/code&gt;&lt;br&gt; 需要注意的是：&lt;code&gt;pimg&lt;/code&gt; 利用空格来划分字段属性，如果一个属性的值需要空格，请将空格用&lt;code&gt;%20&lt;/code&gt;代替!!!    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了保证博客整体美观，每个文章需要一张配图(大小：840x340)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指明文章的副标题、作者信息、封面图片地址&lt;/p&gt;
 &lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;subtitle:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;凹凸实验室博客是一个托管于Github的静态博客，基于HEXO搭建...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;date:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-11&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;cover:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;封面图片地址&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;tags:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;author:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    nick:&lt;/span&gt; LV主唱大人&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;    github_name:&lt;/span&gt; mamboer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用&lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;设置文章的摘要&lt;/p&gt;
&lt;p&gt; 示例：&lt;/p&gt;
 &lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;title: 文章标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这部分是文章摘要，这部分是文章摘要。在hexo模版里可通过 &lt;/span&gt;&lt;span class=&quot;template-tag&quot;&gt;&amp;#123;% &lt;span class=&quot;name&quot;&gt;raw&lt;/span&gt; %&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; post.excerpt &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-tag&quot;&gt;&amp;#123;% &lt;span class=&quot;name&quot;&gt;endraw&lt;/span&gt; %&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; 来引用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这里是文章的剩余部分。在hexo模版里可通过&lt;/span&gt;&lt;span class=&quot;template-tag&quot;&gt;&amp;#123;% &lt;span class=&quot;name&quot;&gt;raw&lt;/span&gt; %&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; post.more &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;template-tag&quot;&gt;&amp;#123;% &lt;span class=&quot;name&quot;&gt;endraw&lt;/span&gt; %&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; 来引用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 实际使用请参考&lt;a href=&quot;!--￼9--&quot;&gt;本文&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;关于博客的发布&quot;&gt;&lt;a href=&quot;#关于博客的发布&quot; class=&quot;headerlink&quot; title=&quot;关于博客的发布&quot;&gt;&lt;/a&gt;关于博客的发布&lt;/h2&gt;&lt;p&gt;为了便于统一维护，博客的发布由&lt;code&gt;LV&lt;/code&gt;负责。同学们写好博文并在本地预览OK后直接提交Github即可。  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;筹备了两周多，凹凸实验室博客 V1.0.0 正式发布啦，欢迎同学们体验并提供建议。&lt;br&gt;它是一个托管于Github的静态博客，基于HEXO搭建，主题的定做参考自&lt;a href=&quot;http://html5up.net/future-imperfect&quot;&gt;future-imperfect&lt;/a&gt;的扁平简约，暂且命名为&lt;code&gt;o2&lt;/code&gt;。主题单独开源于 &lt;a href=&quot;o2team/hexo-theme-o2&quot;&gt;hexo-theme-o2&lt;/a&gt;，有兴趣的朋友可以自由下载使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://aotu.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
